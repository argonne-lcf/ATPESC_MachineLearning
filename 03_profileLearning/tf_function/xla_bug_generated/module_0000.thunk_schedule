Total order:
kKernel     	%fusion.31 = f32[] fusion(f32[] %arg4.5, f32[] %arg3.4, f32[] %arg5.6, s64[] %arg2.3), kind=kLoop, calls=%fused_computation.31, metadata={op_type="ResourceApplyAdam" op_name="Adam/Adam/update_1/ResourceApplyAdam"}
kKernel     	%copy.32 = f32[5,5,1,32]{1,0,2,3} copy(f32[5,5,1,32]{3,2,1,0} %arg7.8), metadata={op_name="XLA_Args"}
kKernel     	%broadcast.84 = f32[1024,10]{1,0} broadcast(f32[10]{0} %arg14.15), dimensions={1}, metadata={op_type="BiasAdd" op_name="StatefulPartitionedCall/mnist_classifier/StatefulPartitionedCall/dense_1/BiasAdd"}
kKernel     	%copy.33 = f32[5,5,32,64]{1,0,2,3} copy(f32[5,5,32,64]{3,2,1,0} %arg9.10), metadata={op_name="XLA_Args"}
kKernel     	%broadcast.77 = f32[1024,128]{1,0} broadcast(f32[128]{0} %arg12.13), dimensions={1}, metadata={op_type="BiasAdd" op_name="StatefulPartitionedCall/mnist_classifier/StatefulPartitionedCall/dense/BiasAdd"}
kKernel     	%copy.34 = f32[5,5,64,128]{1,0,2,3} copy(f32[5,5,64,128]{3,2,1,0} %arg11.12), metadata={op_name="XLA_Args"}
kConvolution	%custom-call.24 = (f32[1024,32,24,24]{3,2,1,0}, u8[0]{0}) custom-call(f32[1024,1,28,28]{3,2,1,0} %bitcast.6, f32[5,5,1,32]{1,0,2,3} %copy.32, f32[32]{0} %arg6.7), window={size=5x5}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBiasActivationForward", metadata={op_type="Conv2D" op_name="StatefulPartitionedCall/mnist_classifier/StatefulPartitionedCall/conv2d/Conv2D"}, backend_config="{\"algorithm\":\"1\",\"tensor_ops_enabled\":true,\"conv_result_scale\":1,\"activation_mode\":\"2\",\"side_input_scale\":0}"
kConvolution	%custom-call.25 = (f32[1024,64,20,20]{3,2,1,0}, u8[75703312]{0}) custom-call(f32[1024,32,24,24]{3,2,1,0} %get-tuple-element.78, f32[5,5,32,64]{1,0,2,3} %copy.33, f32[64]{0} %arg8.9), window={size=5x5}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBiasActivationForward", metadata={op_type="Conv2D" op_name="StatefulPartitionedCall/mnist_classifier/StatefulPartitionedCall/conv2d_1/Conv2D"}, backend_config="{\"algorithm\":\"1\",\"tensor_ops_enabled\":true,\"conv_result_scale\":1,\"activation_mode\":\"2\",\"side_input_scale\":0}"
kKernel     	%reduce-window.66 = f32[1024,64,10,10]{3,2,1,0} reduce-window(f32[1024,64,20,20]{3,2,1,0} %get-tuple-element.79, f32[] %constant_61), window={size=1x1x2x2 stride=1x1x2x2}, to_apply=%max_F32.62, metadata={op_type="MaxPool" op_name="StatefulPartitionedCall/mnist_classifier/StatefulPartitionedCall/max_pooling2d/MaxPool"}
kConvolution	%custom-call.26 = (f32[1024,128,6,6]{3,2,1,0}, u8[64785696]{0}) custom-call(f32[1024,64,10,10]{3,2,1,0} %reduce-window.66, f32[5,5,64,128]{1,0,2,3} %copy.34, f32[128]{0} %arg10.11), window={size=5x5}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBiasActivationForward", metadata={op_type="Conv2D" op_name="StatefulPartitionedCall/mnist_classifier/StatefulPartitionedCall/conv2d_2/Conv2D"}, backend_config="{\"algorithm\":\"1\",\"tensor_ops_enabled\":true,\"conv_result_scale\":1,\"activation_mode\":\"2\",\"side_input_scale\":0}"
kKernel     	%fusion.45 = f32[1024,4608]{1,0} fusion(f32[1024,128,6,6]{3,2,1,0} %get-tuple-element.80), kind=kLoop, calls=%fused_computation.45, metadata={op_type="Reshape" op_name="StatefulPartitionedCall/mnist_classifier/StatefulPartitionedCall/flatten/Reshape"}
kGemm       	%custom-call.12 = f32[1024,128]{1,0} custom-call(f32[1024,4608]{1,0} %fusion.45, f32[4608,128]{1,0} %arg13.14, f32[1024,128]{1,0} %broadcast.77), custom_call_target="__cublas$gemm", metadata={op_type="BiasAdd" op_name="StatefulPartitionedCall/mnist_classifier/StatefulPartitionedCall/dense/BiasAdd"}, backend_config="{\"alpha_real\":1,\"alpha_imag\":0,\"beta\":1,\"dot_dimension_numbers\":{\"lhs_contracting_dimensions\":[\"1\"],\"rhs_contracting_dimensions\":[\"0\"],\"lhs_batch_dimensions\":[],\"rhs_batch_dimensions\":[]},\"batch_size\":\"1\",\"selected_algorithm\":\"101\"}"
kKernel     	%fusion.48 = f32[1024,128]{1,0} fusion(f32[1024,128]{1,0} %custom-call.12), kind=kLoop, calls=%fused_computation.48, metadata={op_type="Relu" op_name="StatefulPartitionedCall/mnist_classifier/StatefulPartitionedCall/dense/Relu"}
kGemm       	%custom-call.14 = f32[1024,10]{1,0} custom-call(f32[1024,128]{1,0} %fusion.48, f32[128,10]{1,0} %arg15.16, f32[1024,10]{1,0} %broadcast.84), custom_call_target="__cublas$gemm", metadata={op_type="BiasAdd" op_name="StatefulPartitionedCall/mnist_classifier/StatefulPartitionedCall/dense_1/BiasAdd"}, backend_config="{\"alpha_real\":1,\"alpha_imag\":0,\"beta\":1,\"dot_dimension_numbers\":{\"lhs_contracting_dimensions\":[\"1\"],\"rhs_contracting_dimensions\":[\"0\"],\"lhs_batch_dimensions\":[],\"rhs_batch_dimensions\":[]},\"batch_size\":\"1\",\"selected_algorithm\":\"1\"}"
kKernel     	%reduce = f32[1024]{0} reduce(f32[1024,10]{1,0} %custom-call.14, f32[] %constant_61), dimensions={1}, to_apply=%scalar_max_computation, metadata={op_type="Softmax" op_name="StatefulPartitionedCall/mnist_classifier/StatefulPartitionedCall/dense_1/Softmax"}
kKernel     	%fusion.44 = f32[1024,10]{1,0} fusion(f32[1024,10]{1,0} %custom-call.14, f32[1024]{0} %reduce), kind=kLoop, calls=%fused_computation.44, metadata={op_type="Softmax" op_name="StatefulPartitionedCall/mnist_classifier/StatefulPartitionedCall/dense_1/Softmax"}
kKernel     	%reduce.1 = f32[1024]{0} reduce(f32[1024,10]{1,0} %fusion.44, f32[] %constant_41), dimensions={1}, to_apply=%scalar_add_computation, metadata={op_type="Softmax" op_name="StatefulPartitionedCall/mnist_classifier/StatefulPartitionedCall/dense_1/Softmax"}
kKernel     	%fusion.47 = f32[1024,10]{1,0} fusion(f32[1024,10]{1,0} %fusion.44, f32[1024]{0} %reduce.1), kind=kLoop, calls=%fused_computation.47, metadata={op_type="Log" op_name="StatefulPartitionedCall/PartitionedCall/sparse_categorical_crossentropy/Log"}
kKernel     	%reduce.129 = f32[1024]{0} reduce(f32[1024,10]{1,0} %fusion.47, f32[] %constant_61), dimensions={1}, to_apply=%max_float_.125, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="StatefulPartitionedCall/PartitionedCall/sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
kKernel     	%fusion.49 = f32[1024,10]{1,0} fusion(f32[1024,10]{1,0} %fusion.47, f32[1024]{0} %reduce.129), kind=kLoop, calls=%fused_computation.49, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="StatefulPartitionedCall/PartitionedCall/sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
kKernel     	%fusion.58 = (f32[1024]{0}, f32[1024]{0}) fusion(f32[1024,10]{1,0} %fusion.49), kind=kLoop, calls=%fused_computation.58, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="StatefulPartitionedCall/PartitionedCall/sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
kSequential 	%fusion.57 = (f32[10]{0}, f32[1024,10]{1,0}) fusion(f32[1024,10]{1,0} %fusion.44, f32[1024]{0} %reduce.1, s32[1024]{0} %arg0.1, f32[1024,10]{1,0} %fusion.49, f32[1024]{0} %get-tuple-element.119), kind=kInput, calls=%fused_computation.57, metadata={op_type="BiasAddGrad" op_name="PartitionedCall/gradients/mnist_classifier/StatefulPartitionedCall_grad/PartitionedCall/gradients/dense_1/BiasAdd_grad/BiasAddGrad"}
kKernel     	%fusion.41 = f32[1024]{0} fusion(f32[1024]{0} %get-tuple-element.118, f32[1024,10]{1,0} %fusion.47, f32[1024]{0} %reduce.129, s32[1024]{0} %arg0.1), kind=kLoop, calls=%fused_computation.41, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="StatefulPartitionedCall/PartitionedCall/sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
kGemm       	%custom-call.18 = f32[128,10]{1,0} custom-call(f32[1024,128]{1,0} %fusion.48, f32[1024,10]{1,0} %get-tuple-element.117), custom_call_target="__cublas$gemm", metadata={op_type="MatMul" op_name="PartitionedCall/gradients/mnist_classifier/StatefulPartitionedCall_grad/PartitionedCall/gradients/dense_1/MatMul_grad/MatMul_1"}, backend_config="{\"alpha_real\":1,\"alpha_imag\":0,\"beta\":0,\"dot_dimension_numbers\":{\"lhs_contracting_dimensions\":[\"0\"],\"rhs_contracting_dimensions\":[\"0\"],\"lhs_batch_dimensions\":[],\"rhs_batch_dimensions\":[]},\"batch_size\":\"1\",\"selected_algorithm\":\"0\"}"
kGemm       	%custom-call.15 = f32[1024,128]{1,0} custom-call(f32[1024,10]{1,0} %get-tuple-element.117, f32[128,10]{1,0} %arg15.16), custom_call_target="__cublas$gemm", metadata={op_type="MatMul" op_name="PartitionedCall/gradients/mnist_classifier/StatefulPartitionedCall_grad/PartitionedCall/gradients/dense_1/MatMul_grad/MatMul"}, backend_config="{\"alpha_real\":1,\"alpha_imag\":0,\"beta\":0,\"dot_dimension_numbers\":{\"lhs_contracting_dimensions\":[\"1\"],\"rhs_contracting_dimensions\":[\"1\"],\"lhs_batch_dimensions\":[],\"rhs_batch_dimensions\":[]},\"batch_size\":\"1\",\"selected_algorithm\":\"-1\"}"
kSequential 	%fusion.56 = (f32[128]{0}, f32[1024,128]{1,0}) fusion(f32[1024,128]{1,0} %custom-call.15, f32[1024,128]{1,0} %custom-call.12), kind=kInput, calls=%fused_computation.56, metadata={op_type="BiasAddGrad" op_name="PartitionedCall/gradients/mnist_classifier/StatefulPartitionedCall_grad/PartitionedCall/gradients/dense/BiasAdd_grad/BiasAddGrad"}
kGemm       	%custom-call.17 = f32[4608,128]{1,0} custom-call(f32[1024,4608]{1,0} %fusion.45, f32[1024,128]{1,0} %get-tuple-element.115), custom_call_target="__cublas$gemm", metadata={op_type="MatMul" op_name="PartitionedCall/gradients/mnist_classifier/StatefulPartitionedCall_grad/PartitionedCall/gradients/dense/MatMul_grad/MatMul_1"}, backend_config="{\"alpha_real\":1,\"alpha_imag\":0,\"beta\":0,\"dot_dimension_numbers\":{\"lhs_contracting_dimensions\":[\"0\"],\"rhs_contracting_dimensions\":[\"0\"],\"lhs_batch_dimensions\":[],\"rhs_batch_dimensions\":[]},\"batch_size\":\"1\",\"selected_algorithm\":\"104\"}"
kKernel     	%fusion.6 = (f32[4608,128]{1,0}, f32[4608,128]{1,0}, f32[4608,128]{1,0}) fusion(f32[4608,128]{1,0} %arg13.14, f32[] %fusion.31, f32[4608,128]{1,0} %arg20.21, f32[] %arg4.5, f32[4608,128]{1,0} %custom-call.17, f32[4608,128]{1,0} %arg21.22, f32[] %arg5.6), kind=kLoop, calls=%fused_computation.6, metadata={op_type="ResourceApplyAdam" op_name="Adam/Adam/update_6/ResourceApplyAdam"}
kGemm       	%custom-call.16 = f32[1024,4608]{1,0} custom-call(f32[1024,128]{1,0} %get-tuple-element.115, f32[4608,128]{1,0} %arg13.14), custom_call_target="__cublas$gemm", metadata={op_type="MatMul" op_name="PartitionedCall/gradients/mnist_classifier/StatefulPartitionedCall_grad/PartitionedCall/gradients/dense/MatMul_grad/MatMul"}, backend_config="{\"alpha_real\":1,\"alpha_imag\":0,\"beta\":0,\"dot_dimension_numbers\":{\"lhs_contracting_dimensions\":[\"1\"],\"rhs_contracting_dimensions\":[\"1\"],\"lhs_batch_dimensions\":[],\"rhs_batch_dimensions\":[]},\"batch_size\":\"1\",\"selected_algorithm\":\"106\"}"
kKernel     	%fusion.36 = f32[1024,128,6,6]{3,2,1,0} fusion(f32[1024,4608]{1,0} %custom-call.16, f32[1024,128,6,6]{3,2,1,0} %get-tuple-element.80), kind=kLoop, calls=%fused_computation.36, metadata={op_type="ReluGrad" op_name="PartitionedCall/gradients/mnist_classifier/StatefulPartitionedCall_grad/PartitionedCall/gradients/conv2d_2/Relu_grad/ReluGrad"}
kSequential 	%fusion.18 = f32[128]{0} fusion(f32[1024,128,6,6]{3,2,1,0} %fusion.36), kind=kInput, calls=%fused_computation.18, metadata={op_type="BiasAddGrad" op_name="PartitionedCall/gradients/mnist_classifier/StatefulPartitionedCall_grad/PartitionedCall/gradients/conv2d_2/BiasAdd_grad/BiasAddGrad"}
kKernel     	%fusion.15 = (f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}) fusion(f32[128]{0} %arg10.11, f32[] %fusion.31, f32[128]{0} %arg26.27, f32[] %arg4.5, f32[128]{0} %fusion.18, f32[128]{0} %arg27.28, f32[] %arg5.6, f32[128]{0} %arg12.13, f32[128]{0} %arg23.24, f32[128]{0} %get-tuple-element.114, f32[128]{0} %arg22.23), kind=kLoop, calls=%fused_computation.15, metadata={op_type="ResourceApplyAdam" op_name="Adam/Adam/update_5/ResourceApplyAdam"}
kConvolution	%custom-call.19 = (f32[5,5,64,128]{1,0,2,3}, u8[62291984]{0}) custom-call(f32[1024,64,10,10]{3,2,1,0} %reduce-window.66, f32[1024,128,6,6]{3,2,1,0} %fusion.36), window={size=5x5}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBackwardFilter", metadata={op_type="Conv2DBackpropFilter" op_name="PartitionedCall/gradients/mnist_classifier/StatefulPartitionedCall_grad/PartitionedCall/gradients/conv2d_2/Conv2D_grad/Conv2DBackpropFilter"}, backend_config="{\"algorithm\":\"1\",\"tensor_ops_enabled\":true,\"conv_result_scale\":1,\"activation_mode\":\"0\",\"side_input_scale\":0}"
kKernel     	%fusion.55 = (f32[5,5,64,128]{3,2,1,0}, f32[5,5,64,128]{3,2,1,0}, f32[5,5,64,128]{3,2,1,0}) fusion(f32[] %arg4.5, f32[5,5,64,128]{1,0,2,3} %get-tuple-element.73, f32[5,5,64,128]{3,2,1,0} %arg24.25, f32[] %arg5.6, f32[5,5,64,128]{3,2,1,0} %arg25.26, f32[] %fusion.31, f32[5,5,64,128]{3,2,1,0} %arg11.12), kind=kLoop, calls=%fused_computation.55, metadata={op_name="XLA_Retvals"}
kConvolution	%custom-call.20 = (f32[1024,64,10,10]{3,2,1,0}, u8[45907984]{0}) custom-call(f32[1024,128,6,6]{3,2,1,0} %fusion.36, f32[5,5,64,128]{1,0,2,3} %copy.34), window={size=5x5}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBackwardInput", metadata={op_type="Conv2DBackpropInput" op_name="PartitionedCall/gradients/mnist_classifier/StatefulPartitionedCall_grad/PartitionedCall/gradients/conv2d_2/Conv2D_grad/Conv2DBackpropInput"}, backend_config="{\"algorithm\":\"1\",\"tensor_ops_enabled\":true,\"conv_result_scale\":1,\"activation_mode\":\"0\",\"side_input_scale\":0}"
kSequential 	%select-and-scatter.337 = f32[1024,64,20,20]{3,2,1,0} select-and-scatter(f32[1024,64,20,20]{3,2,1,0} %get-tuple-element.79, f32[1024,64,10,10]{3,2,1,0} %get-tuple-element.74, f32[] %constant_41), window={size=1x1x2x2 stride=1x1x2x2}, select=%ge_F32.329, scatter=%add_F32.333, metadata={op_type="MaxPoolGrad" op_name="PartitionedCall/gradients/mnist_classifier/StatefulPartitionedCall_grad/PartitionedCall/gradients/max_pooling2d/MaxPool_grad/MaxPoolGrad"}
kKernel     	%fusion.35 = f32[1024,64,20,20]{3,2,1,0} fusion(f32[1024,64,20,20]{3,2,1,0} %select-and-scatter.337, f32[1024,64,20,20]{3,2,1,0} %get-tuple-element.79), kind=kLoop, calls=%fused_computation.35, metadata={op_type="ReluGrad" op_name="PartitionedCall/gradients/mnist_classifier/StatefulPartitionedCall_grad/PartitionedCall/gradients/conv2d_1/Relu_grad/ReluGrad"}
kSequential 	%fusion.25 = f32[64]{0} fusion(f32[1024,64,20,20]{3,2,1,0} %fusion.35), kind=kInput, calls=%fused_computation.25, metadata={op_type="BiasAddGrad" op_name="PartitionedCall/gradients/mnist_classifier/StatefulPartitionedCall_grad/PartitionedCall/gradients/conv2d_1/BiasAdd_grad/BiasAddGrad"}
kConvolution	%custom-call.22 = (f32[1024,32,24,24]{3,2,1,0}, u8[588455936]{0}) custom-call(f32[1024,64,20,20]{3,2,1,0} %fusion.35, f32[5,5,32,64]{1,0,2,3} %copy.33), window={size=5x5}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBackwardInput", metadata={op_type="Conv2DBackpropInput" op_name="PartitionedCall/gradients/mnist_classifier/StatefulPartitionedCall_grad/PartitionedCall/gradients/conv2d_1/Conv2D_grad/Conv2DBackpropInput"}, backend_config="{\"algorithm\":\"2\",\"tensor_ops_enabled\":true,\"conv_result_scale\":1,\"activation_mode\":\"0\",\"side_input_scale\":0}"
kKernel     	%fusion.34 = f32[1024,32,24,24]{3,2,1,0} fusion(f32[1024,32,24,24]{3,2,1,0} %get-tuple-element.76, f32[1024,32,24,24]{3,2,1,0} %get-tuple-element.78), kind=kLoop, calls=%fused_computation.34, metadata={op_type="ReluGrad" op_name="PartitionedCall/gradients/mnist_classifier/StatefulPartitionedCall_grad/PartitionedCall/gradients/conv2d/Relu_grad/ReluGrad"}
kSequential 	%fusion.33 = f32[32]{0} fusion(f32[1024,32,24,24]{3,2,1,0} %fusion.34), kind=kInput, calls=%fused_computation.33, metadata={op_type="BiasAddGrad" op_name="PartitionedCall/gradients/mnist_classifier/StatefulPartitionedCall_grad/PartitionedCall/gradients/conv2d/BiasAdd_grad/BiasAddGrad"}
kConvolution	%custom-call.23 = (f32[5,5,1,32]{1,0,2,3}, u8[0]{0}) custom-call(f32[1024,1,28,28]{3,2,1,0} %bitcast.6, f32[1024,32,24,24]{3,2,1,0} %fusion.34), window={size=5x5}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBackwardFilter", metadata={op_type="Conv2DBackpropFilter" op_name="PartitionedCall/gradients/mnist_classifier/StatefulPartitionedCall_grad/PartitionedCall/gradients/conv2d/Conv2D_grad/Conv2DBackpropFilter"}, backend_config="{\"algorithm\":\"3\",\"tensor_ops_enabled\":true,\"conv_result_scale\":1,\"activation_mode\":\"0\",\"side_input_scale\":0}"
kKernel     	%fusion.51 = (f32[5,5,1,32]{3,2,1,0}, f32[5,5,1,32]{3,2,1,0}, f32[5,5,1,32]{3,2,1,0}) fusion(f32[] %arg4.5, f32[5,5,1,32]{1,0,2,3} %get-tuple-element.77, f32[5,5,1,32]{3,2,1,0} %arg32.33, f32[] %arg5.6, f32[5,5,1,32]{3,2,1,0} %arg33.34, f32[] %fusion.31, f32[5,5,1,32]{3,2,1,0} %arg7.8), kind=kLoop, calls=%fused_computation.51, metadata={op_name="XLA_Retvals"}
kKernel     	%fusion.59 = (f32[32]{0}, f32[32]{0}, f32[32]{0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[10]{0}, f32[10]{0}, f32[10]{0}, f32[1280]{0}, f32[1280]{0}, f32[1280]{0}) fusion(f32[32]{0} %arg6.7, f32[] %fusion.31, f32[32]{0} %arg34.35, f32[] %arg4.5, f32[32]{0} %fusion.33, f32[32]{0} %arg35.36, f32[] %arg5.6, f32[64]{0} %arg8.9, f32[] %fusion.31, f32[64]{0} %arg30.31, f32[] %arg4.5, f32[64]{0} %fusion.25, f32[64]{0} %arg31.32, f32[] %arg5.6, f32[10]{0} %arg14.15, f32[] %fusion.31, f32[10]{0} %arg16.17, f32[] %arg4.5, f32[10]{0} %get-tuple-element.116, f32[10]{0} %arg17.18, f32[] %arg5.6, f32[128,10]{1,0} %arg15.16, f32[] %fusion.31, f32[128,10]{1,0} %arg18.19, f32[] %arg4.5, f32[128,10]{1,0} %custom-call.18, f32[128,10]{1,0} %arg19.20, f32[] %arg5.6), kind=kInput, calls=%horizontally_fused_computation
kConvolution	%custom-call.21 = (f32[5,5,32,64]{1,0,2,3}, u8[960495616]{0}) custom-call(f32[1024,32,24,24]{3,2,1,0} %get-tuple-element.78, f32[1024,64,20,20]{3,2,1,0} %fusion.35), window={size=5x5}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBackwardFilter", metadata={op_type="Conv2DBackpropFilter" op_name="PartitionedCall/gradients/mnist_classifier/StatefulPartitionedCall_grad/PartitionedCall/gradients/conv2d_1/Conv2D_grad/Conv2DBackpropFilter"}, backend_config="{\"algorithm\":\"2\",\"tensor_ops_enabled\":true,\"conv_result_scale\":1,\"activation_mode\":\"0\",\"side_input_scale\":0}"
kKernel     	%fusion.53 = (f32[5,5,32,64]{3,2,1,0}, f32[5,5,32,64]{3,2,1,0}, f32[5,5,32,64]{3,2,1,0}) fusion(f32[] %arg4.5, f32[5,5,32,64]{1,0,2,3} %get-tuple-element.75, f32[5,5,32,64]{3,2,1,0} %arg28.29, f32[] %arg5.6, f32[5,5,32,64]{3,2,1,0} %arg29.30, f32[] %fusion.31, f32[5,5,32,64]{3,2,1,0} %arg9.10), kind=kLoop, calls=%fused_computation.53, metadata={op_name="XLA_Retvals"}

Dependencies:
