target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"
target triple = "nvptx64-nvidia-cuda"

@buffer_for_constant_41 = external local_unnamed_addr addrspace(1) constant [4 x i8], align 64
@buffer_for_constant_61 = external local_unnamed_addr addrspace(1) constant [4 x i8], align 64
@shared_cache_0 = external dso_local unnamed_addr addrspace(3) global [1 x [32 x [33 x float]]]
@shared_cache_01 = external dso_local unnamed_addr addrspace(3) global [2 x [32 x [33 x float]]]
@shared_cache_02 = external dso_local unnamed_addr addrspace(3) global [1 x [32 x float]]
@shared_cache_03 = external dso_local unnamed_addr addrspace(3) global [1 x [32 x float]]
@shared_cache_04 = external dso_local unnamed_addr addrspace(3) global [1 x [32 x float]]

; Function Attrs: nounwind
define void @fusion_31(i8* noalias nocapture readonly align 16 dereferenceable(8) %alloc81, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc84, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc85, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc86, i8* noalias nocapture align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #0 {
entry:
  %temp_buf39 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc8637 = addrspacecast i8* %alloc86 to i8 addrspace(1)*
  %alloc8535 = addrspacecast i8* %alloc85 to i8 addrspace(1)*
  %alloc8433 = addrspacecast i8* %alloc84 to i8 addrspace(1)*
  %alloc8131 = addrspacecast i8* %alloc81 to i8 addrspace(1)*
  %arg2.3.typed = bitcast i8 addrspace(1)* %alloc8131 to i64 addrspace(1)*
  %arg5.6.typed = bitcast i8 addrspace(1)* %alloc8637 to float addrspace(1)*
  %arg3.4.typed = bitcast i8 addrspace(1)* %alloc8535 to float addrspace(1)*
  %param_1.170 = load float, float addrspace(1)* %arg3.4.typed, align 16, !invariant.load !66
  %param_2.199 = load float, float addrspace(1)* %arg5.6.typed, align 16, !invariant.load !66
  %param_3.90 = load i64, i64 addrspace(1)* %arg2.3.typed, align 16, !invariant.load !66
  %0 = add i64 %param_3.90, 1
  %1 = sitofp i64 %0 to float
  %2 = fmul float %1, 5.000000e-01
  %3 = tail call float @llvm.trunc.f32(float %2) #0
  %4 = fmul float %3, 2.000000e+00
  %5 = fsub float %1, %4
  %6 = tail call float @llvm.fabs.f32(float %5) #0
  %7 = fcmp oeq float %6, 1.000000e+00
  %8 = tail call float @llvm.fabs.f32(float %param_2.199) #0
  %9 = fcmp olt float %8, 0x3810000000000000
  %expo.i.i.0.i = select i1 %9, float -1.510000e+02, float -1.270000e+02
  %10 = fmul float %8, 0x4170000000000000
  %.07.i = select i1 %9, float %10, float %8
  %11 = bitcast float %.07.i to i32
  %12 = and i32 %11, 8388607
  %13 = or i32 %12, 1065353216
  %14 = bitcast i32 %13 to float
  %15 = lshr i32 %11, 23
  %16 = uitofp i32 %15 to float
  %17 = fadd float %expo.i.i.0.i, %16
  %18 = fcmp ogt float %14, 0x3FF6A09E60000000
  %19 = fmul float %14, 5.000000e-01
  %20 = fadd float %17, 1.000000e+00
  %expo.i.i.2.i = select i1 %18, float %20, float %17
  %m.i.i.0.i = select i1 %18, float %19, float %14
  %21 = fadd float %m.i.i.0.i, -1.000000e+00
  %22 = fadd float %m.i.i.0.i, 1.000000e+00
  %23 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %22) #1, !srcloc !67
  %24 = fmul float %21, 2.000000e+00
  %25 = fmul float %23, %24
  %26 = fmul float %25, %25
  %27 = tail call float @llvm.fma.f32(float %26, float 0x3F631E1FC0000000, float 0x3F8995EC60000000) #0
  %28 = tail call float @llvm.fma.f32(float %27, float %26, float 0x3FB55557A0000000) #0
  %29 = fmul float %26, %28
  %30 = fmul float %25, %29
  %31 = fneg float %25
  %32 = fsub float %21, %25
  %33 = fmul float %32, 2.000000e+00
  %34 = tail call float @llvm.fma.f32(float %31, float %21, float %33) #0
  %35 = fmul float %23, %34
  %36 = fadd float %25, %30
  %37 = fsub float %25, %36
  %38 = fadd float %30, %37
  %39 = fadd float %35, %38
  %40 = fadd float %36, %39
  %41 = fsub float %36, %40
  %42 = fadd float %39, %41
  %43 = fmul float %expo.i.i.2.i, 0x3FE62E4000000000
  %44 = fmul float %expo.i.i.2.i, 0x3EB7F7D1C0000000
  %45 = fadd float %43, %40
  %46 = fsub float %43, %45
  %47 = fadd float %40, %46
  %48 = fadd float %42, %47
  %49 = fadd float %44, %48
  %50 = fadd float %45, %49
  %51 = fsub float %45, %50
  %52 = fadd float %49, %51
  %53 = tail call float @llvm.fabs.f32(float %1) #0
  %54 = fcmp ogt float %53, 0x46FED09BE0000000
  %55 = fmul float %1, 0x3F20000000000000
  %.04.i = select i1 %54, float %55, float %1
  %56 = fmul float %.04.i, %50
  %57 = fneg float %56
  %58 = tail call float @llvm.fma.f32(float %.04.i, float %50, float %57) #0
  %59 = tail call float @llvm.fma.f32(float %.04.i, float %52, float %58) #0
  %60 = tail call float @llvm.fma.f32(float %50, float 0.000000e+00, float %59) #0
  %61 = fadd float %56, %60
  %62 = fsub float %56, %61
  %63 = fadd float %60, %62
  %64 = bitcast float %61 to i32
  %65 = icmp eq i32 %64, 1118925336
  %66 = fadd float %63, 0x3EE0000000000000
  %prod.i.042.0.i = select i1 %65, float %66, float %63
  %prod.i.143.0.i = select i1 %65, float 0x40562E42E0000000, float %61
  %67 = fmul float %prod.i.143.0.i, 0x3FF7154760000000
  %68 = tail call float @llvm.trunc.f32(float %67) #0
  %69 = tail call float @llvm.fabs.f32(float %68) #0
  %70 = fcmp ogt float %69, 1.260000e+02
  %71 = bitcast float %68 to i32
  %72 = and i32 %71, -2147483648
  %73 = or i32 %72, 1123811328
  %74 = bitcast i32 %73 to float
  %j.i.i.0.i = select i1 %70, float %74, float %68
  %75 = tail call float @llvm.fma.f32(float %j.i.i.0.i, float 0xBFE62E4300000000, float %prod.i.143.0.i) #0
  %76 = tail call float @llvm.fma.f32(float %j.i.i.0.i, float 0x3E205C6100000000, float %75) #0
  %77 = fmul float %76, 0x3FF7154760000000
  %78 = fadd float %j.i.i.0.i, 0x4168000FE0000000
  %79 = bitcast float %78 to i32
  %80 = shl i32 %79, 23
  %81 = bitcast i32 %80 to float
  %82 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %77) #0
  %83 = fmul float %82, %81
  %84 = fcmp une float %83, 0x7FF0000000000000
  %85 = tail call float @llvm.fma.f32(float %83, float %prod.i.042.0.i, float %83) #0
  %t.i.0.i = select i1 %84, float %85, float %83
  %86 = fcmp olt float %param_2.199, 0.000000e+00
  %or.cond.i = and i1 %86, %7
  %87 = fcmp oeq float %param_2.199, 0.000000e+00
  br i1 %87, label %88, label %95

88:                                               ; preds = %entry
  %89 = fcmp oeq float %6, 1.000000e+00
  %90 = fadd float %param_2.199, %param_2.199
  %91 = bitcast float %90 to i32
  %ti.0.i = select i1 %89, i32 %91, i32 0
  %92 = icmp slt i64 %0, 0
  %93 = or i32 %ti.0.i, 2139095040
  %ti.1.i = select i1 %92, i32 %93, i32 %ti.0.i
  %94 = bitcast i32 %ti.1.i to float
  br label %__nv_fabsf.exit7.i

95:                                               ; preds = %entry
  %96 = bitcast float %t.i.0.i to i32
  %97 = xor i32 %96, -2147483648
  %98 = bitcast i32 %97 to float
  %t.0.i = select i1 %or.cond.i, float %98, float %t.i.0.i
  br label %__nv_fabsf.exit7.i

__nv_fabsf.exit7.i:                               ; preds = %95, %88
  %t.2.i = phi float [ %94, %88 ], [ %t.0.i, %95 ]
  %99 = fadd float %8, %53
  %100 = bitcast float %99 to i32
  %101 = icmp sgt i32 %100, 2139095039
  br i1 %101, label %__nv_isnanf.exit.i, label %__nv_powf.exit

__nv_isnanf.exit.i:                               ; preds = %__nv_fabsf.exit7.i
  %102 = fcmp ugt float %8, 0x7FF0000000000000
  %103 = fcmp ugt float %53, 0x7FF0000000000000
  %or.cond40.i = or i1 %102, %103
  br i1 %or.cond40.i, label %104, label %__nv_isinff.exit.i

104:                                              ; preds = %__nv_isnanf.exit.i
  %105 = fadd float %param_2.199, %1
  br label %__nv_powf.exit

__nv_isinff.exit.i:                               ; preds = %__nv_isnanf.exit.i
  %106 = fcmp oeq float %53, 0x7FF0000000000000
  br i1 %106, label %__nv_fabsf.exit19.i, label %__nv_isinff.exit23.i

__nv_fabsf.exit19.i:                              ; preds = %__nv_isinff.exit.i
  %107 = fcmp ogt float %8, 1.000000e+00
  %ti.2.i = select i1 %107, i32 2139095040, i32 0
  %108 = icmp slt i64 %0, 0
  %109 = xor i32 %ti.2.i, 2139095040
  %ti.3.i = select i1 %108, i32 %109, i32 %ti.2.i
  %110 = fcmp oeq float %param_2.199, -1.000000e+00
  %111 = bitcast i32 %ti.3.i to float
  %112 = select i1 %110, float 1.000000e+00, float %111
  br label %__nv_powf.exit

__nv_isinff.exit23.i:                             ; preds = %__nv_isinff.exit.i
  %113 = fcmp oeq float %8, 0x7FF0000000000000
  %114 = icmp sgt i64 %0, -1
  %ti.5.i = select i1 %114, i32 2139095040, i32 0
  %115 = or i32 %ti.5.i, -2147483648
  %ti.6.i = select i1 %or.cond.i, i32 %115, i32 %ti.5.i
  %116 = bitcast i32 %ti.6.i to float
  br i1 %113, label %117, label %__nv_powf.exit

117:                                              ; preds = %__nv_isinff.exit23.i
  br label %__nv_powf.exit

__nv_powf.exit:                                   ; preds = %117, %__nv_isinff.exit23.i, %__nv_fabsf.exit19.i, %104, %__nv_fabsf.exit7.i
  %t.6.i = phi float [ %t.2.i, %__nv_fabsf.exit7.i ], [ %105, %104 ], [ %112, %__nv_fabsf.exit19.i ], [ %116, %117 ], [ %t.2.i, %__nv_isinff.exit23.i ]
  %118 = fcmp oeq float %6, 1.000000e+00
  %119 = bitcast i8 addrspace(1)* %alloc8433 to float addrspace(1)*
  %param_0.87 = load float, float addrspace(1)* %119, align 16, !invariant.load !66
  %120 = tail call float @llvm.fabs.f32(float %param_0.87) #0
  %121 = fcmp olt float %120, 0x3810000000000000
  %expo.i.i.0.i1 = select i1 %121, float -1.510000e+02, float -1.270000e+02
  %122 = fmul float %120, 0x4170000000000000
  %.07.i2 = select i1 %121, float %122, float %120
  %123 = bitcast float %.07.i2 to i32
  %124 = and i32 %123, 8388607
  %125 = or i32 %124, 1065353216
  %126 = bitcast i32 %125 to float
  %127 = lshr i32 %123, 23
  %128 = uitofp i32 %127 to float
  %129 = fadd float %expo.i.i.0.i1, %128
  %130 = fcmp ogt float %126, 0x3FF6A09E60000000
  %131 = fmul float %126, 5.000000e-01
  %132 = fadd float %129, 1.000000e+00
  %expo.i.i.2.i3 = select i1 %130, float %132, float %129
  %m.i.i.0.i4 = select i1 %130, float %131, float %126
  %133 = fadd float %m.i.i.0.i4, -1.000000e+00
  %134 = fadd float %m.i.i.0.i4, 1.000000e+00
  %135 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %134) #1, !srcloc !67
  %136 = fmul float %133, 2.000000e+00
  %137 = fmul float %135, %136
  %138 = fmul float %137, %137
  %139 = tail call float @llvm.fma.f32(float %138, float 0x3F631E1FC0000000, float 0x3F8995EC60000000) #0
  %140 = tail call float @llvm.fma.f32(float %139, float %138, float 0x3FB55557A0000000) #0
  %141 = fmul float %138, %140
  %142 = fmul float %137, %141
  %143 = fneg float %137
  %144 = fsub float %133, %137
  %145 = fmul float %144, 2.000000e+00
  %146 = tail call float @llvm.fma.f32(float %143, float %133, float %145) #0
  %147 = fmul float %135, %146
  %148 = fadd float %137, %142
  %149 = fsub float %137, %148
  %150 = fadd float %142, %149
  %151 = fadd float %147, %150
  %152 = fadd float %148, %151
  %153 = fsub float %148, %152
  %154 = fadd float %151, %153
  %155 = fmul float %expo.i.i.2.i3, 0x3FE62E4000000000
  %156 = fmul float %expo.i.i.2.i3, 0x3EB7F7D1C0000000
  %157 = fadd float %155, %152
  %158 = fsub float %155, %157
  %159 = fadd float %152, %158
  %160 = fadd float %154, %159
  %161 = fadd float %156, %160
  %162 = fadd float %157, %161
  %163 = fsub float %157, %162
  %164 = fadd float %161, %163
  %165 = fmul float %.04.i, %162
  %166 = fneg float %165
  %167 = tail call float @llvm.fma.f32(float %.04.i, float %162, float %166) #0
  %168 = tail call float @llvm.fma.f32(float %.04.i, float %164, float %167) #0
  %169 = tail call float @llvm.fma.f32(float %162, float 0.000000e+00, float %168) #0
  %170 = fadd float %165, %169
  %171 = fsub float %165, %170
  %172 = fadd float %169, %171
  %173 = bitcast float %170 to i32
  %174 = icmp eq i32 %173, 1118925336
  %175 = fadd float %172, 0x3EE0000000000000
  %prod.i.042.0.i6 = select i1 %174, float %175, float %172
  %prod.i.143.0.i7 = select i1 %174, float 0x40562E42E0000000, float %170
  %176 = fmul float %prod.i.143.0.i7, 0x3FF7154760000000
  %177 = tail call float @llvm.trunc.f32(float %176) #0
  %178 = tail call float @llvm.fabs.f32(float %177) #0
  %179 = fcmp ogt float %178, 1.260000e+02
  %180 = bitcast float %177 to i32
  %181 = and i32 %180, -2147483648
  %182 = or i32 %181, 1123811328
  %183 = bitcast i32 %182 to float
  %j.i.i.0.i8 = select i1 %179, float %183, float %177
  %184 = tail call float @llvm.fma.f32(float %j.i.i.0.i8, float 0xBFE62E4300000000, float %prod.i.143.0.i7) #0
  %185 = tail call float @llvm.fma.f32(float %j.i.i.0.i8, float 0x3E205C6100000000, float %184) #0
  %186 = fmul float %185, 0x3FF7154760000000
  %187 = fadd float %j.i.i.0.i8, 0x4168000FE0000000
  %188 = bitcast float %187 to i32
  %189 = shl i32 %188, 23
  %190 = bitcast i32 %189 to float
  %191 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %186) #0
  %192 = fmul float %191, %190
  %193 = fcmp une float %192, 0x7FF0000000000000
  %194 = tail call float @llvm.fma.f32(float %192, float %prod.i.042.0.i6, float %192) #0
  %t.i.0.i9 = select i1 %193, float %194, float %192
  %195 = fcmp olt float %param_0.87, 0.000000e+00
  %or.cond.i10 = and i1 %118, %195
  %196 = fcmp oeq float %param_0.87, 0.000000e+00
  br i1 %196, label %197, label %204

197:                                              ; preds = %__nv_powf.exit
  %198 = fcmp oeq float %6, 1.000000e+00
  %199 = fadd float %param_0.87, %param_0.87
  %200 = bitcast float %199 to i32
  %ti.0.i11 = select i1 %198, i32 %200, i32 0
  %201 = icmp slt i64 %0, 0
  %202 = or i32 %ti.0.i11, 2139095040
  %ti.1.i12 = select i1 %201, i32 %202, i32 %ti.0.i11
  %203 = bitcast i32 %ti.1.i12 to float
  br label %__nv_fabsf.exit7.i17

204:                                              ; preds = %__nv_powf.exit
  %205 = bitcast float %t.i.0.i9 to i32
  %206 = xor i32 %205, -2147483648
  %207 = bitcast i32 %206 to float
  %t.0.i13 = select i1 %or.cond.i10, float %207, float %t.i.0.i9
  br label %__nv_fabsf.exit7.i17

__nv_fabsf.exit7.i17:                             ; preds = %204, %197
  %t.2.i16 = phi float [ %203, %197 ], [ %t.0.i13, %204 ]
  %208 = fadd float %53, %120
  %209 = bitcast float %208 to i32
  %210 = icmp sgt i32 %209, 2139095039
  br i1 %210, label %__nv_isnanf.exit.i19, label %__nv_powf.exit30

__nv_isnanf.exit.i19:                             ; preds = %__nv_fabsf.exit7.i17
  %211 = fcmp ugt float %120, 0x7FF0000000000000
  %212 = fcmp ugt float %53, 0x7FF0000000000000
  %or.cond40.i18 = or i1 %212, %211
  br i1 %or.cond40.i18, label %213, label %__nv_isinff.exit.i20

213:                                              ; preds = %__nv_isnanf.exit.i19
  %214 = fadd float %param_0.87, %1
  br label %__nv_powf.exit30

__nv_isinff.exit.i20:                             ; preds = %__nv_isnanf.exit.i19
  %215 = fcmp oeq float %53, 0x7FF0000000000000
  br i1 %215, label %__nv_fabsf.exit19.i23, label %__nv_isinff.exit23.i25

__nv_fabsf.exit19.i23:                            ; preds = %__nv_isinff.exit.i20
  %216 = fcmp ogt float %120, 1.000000e+00
  %ti.2.i21 = select i1 %216, i32 2139095040, i32 0
  %217 = icmp slt i64 %0, 0
  %218 = xor i32 %ti.2.i21, 2139095040
  %ti.3.i22 = select i1 %217, i32 %218, i32 %ti.2.i21
  %219 = fcmp oeq float %param_0.87, -1.000000e+00
  %220 = bitcast i32 %ti.3.i22 to float
  %221 = select i1 %219, float 1.000000e+00, float %220
  br label %__nv_powf.exit30

__nv_isinff.exit23.i25:                           ; preds = %__nv_isinff.exit.i20
  %222 = fcmp oeq float %120, 0x7FF0000000000000
  %223 = icmp sgt i64 %0, -1
  %ti.5.i24 = select i1 %223, i32 2139095040, i32 0
  %224 = or i32 %ti.5.i24, -2147483648
  %ti.6.i26 = select i1 %or.cond.i10, i32 %224, i32 %ti.5.i24
  %225 = bitcast i32 %ti.6.i26 to float
  br i1 %222, label %226, label %__nv_powf.exit30

226:                                              ; preds = %__nv_isinff.exit23.i25
  br label %__nv_powf.exit30

__nv_powf.exit30:                                 ; preds = %226, %__nv_isinff.exit23.i25, %__nv_fabsf.exit19.i23, %213, %__nv_fabsf.exit7.i17
  %t.6.i27 = phi float [ %t.2.i16, %__nv_fabsf.exit7.i17 ], [ %214, %213 ], [ %221, %__nv_fabsf.exit19.i23 ], [ %225, %226 ], [ %t.2.i16, %__nv_isinff.exit23.i25 ]
  %227 = icmp eq i64 %0, 0
  %228 = fcmp oeq float %param_2.199, 1.000000e+00
  %or.cond2.i = or i1 %228, %227
  %t.6.i.op = fsub float 1.000000e+00, %t.6.i
  %subtract.31 = select i1 %or.cond2.i, float 0.000000e+00, float %t.6.i.op
  %229 = tail call float @llvm.nvvm.sqrt.approx.f(float %subtract.31) #0
  %multiply.39 = fmul float %param_1.170, %229
  %fusion.31.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf39, i64 1141055488
  %fusion.31.typed = bitcast i8 addrspace(1)* %fusion.31.raw to float addrspace(1)*
  %230 = fcmp oeq float %param_0.87, 1.000000e+00
  %or.cond2.i28 = or i1 %227, %230
  %t.6.i27.op = fsub float 1.000000e+00, %t.6.i27
  %subtract.30 = select i1 %or.cond2.i28, float 0.000000e+00, float %t.6.i27.op
  %divide.11 = fdiv float %multiply.39, %subtract.30
  store float %divide.11, float addrspace(1)* %fusion.31.typed, align 64
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: nounwind readnone
declare i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: nofree nounwind
define void @copy_32(i8* noalias nocapture align 64 dereferenceable(3200) %alloc29, i8* noalias nocapture readonly align 16 dereferenceable(3200) %alloc30, i8* noalias nocapture readnone align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #3 {
entry:
  %alloc309 = addrspacecast i8* %alloc30 to i8 addrspace(1)*
  %alloc297 = addrspacecast i8* %alloc29 to i8 addrspace(1)*
  %arg7.8.typed = bitcast i8 addrspace(1)* %alloc309 to [5 x [5 x [1 x [32 x float]]]] addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !68
  %linear_index_base = shl nuw nsw i32 %0, 2
  %linear_index1 = or i32 %linear_index_base, 1
  %linear_index2 = or i32 %linear_index_base, 2
  %linear_index3 = or i32 %linear_index_base, 3
  %1 = udiv i32 %linear_index3, 25
  %linear_index3.frozen = freeze i32 %linear_index3
  %2 = udiv i32 %linear_index3.frozen, 5
  %3 = urem i32 %2, 5
  %4 = mul i32 %2, 5
  %.decomposed = sub i32 %linear_index3.frozen, %4
  %5 = udiv i32 %linear_index2, 25
  %linear_index2.frozen = freeze i32 %linear_index2
  %6 = udiv i32 %linear_index2.frozen, 5
  %7 = urem i32 %6, 5
  %8 = mul i32 %6, 5
  %.decomposed4 = sub i32 %linear_index2.frozen, %8
  %9 = udiv i32 %linear_index1, 25
  %linear_index1.frozen = freeze i32 %linear_index1
  %10 = udiv i32 %linear_index1.frozen, 5
  %11 = urem i32 %10, 5
  %12 = mul i32 %10, 5
  %.decomposed5 = sub i32 %linear_index1.frozen, %12
  %13 = udiv i32 %linear_index_base, 25
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %14 = udiv i32 %linear_index_base.frozen, 5
  %15 = urem i32 %14, 5
  %16 = mul i32 %14, 5
  %.decomposed6 = sub i32 %linear_index_base.frozen, %16
  %17 = zext i32 %15 to i64
  %18 = zext i32 %.decomposed6 to i64
  %19 = zext i32 %13 to i64
  %20 = getelementptr inbounds [5 x [5 x [1 x [32 x float]]]], [5 x [5 x [1 x [32 x float]]]] addrspace(1)* %arg7.8.typed, i64 0, i64 %17, i64 %18, i64 0, i64 %19
  %21 = load float, float addrspace(1)* %20, align 4, !invariant.load !66
  %22 = bitcast i8 addrspace(1)* %alloc297 to float addrspace(1)*
  %23 = zext i32 %linear_index_base to i64
  %24 = getelementptr float, float addrspace(1)* %22, i64 %23
  %25 = zext i32 %11 to i64
  %26 = zext i32 %.decomposed5 to i64
  %27 = zext i32 %9 to i64
  %28 = getelementptr inbounds [5 x [5 x [1 x [32 x float]]]], [5 x [5 x [1 x [32 x float]]]] addrspace(1)* %arg7.8.typed, i64 0, i64 %25, i64 %26, i64 0, i64 %27
  %29 = load float, float addrspace(1)* %28, align 4, !invariant.load !66
  %30 = zext i32 %7 to i64
  %31 = zext i32 %.decomposed4 to i64
  %32 = zext i32 %5 to i64
  %33 = getelementptr inbounds [5 x [5 x [1 x [32 x float]]]], [5 x [5 x [1 x [32 x float]]]] addrspace(1)* %arg7.8.typed, i64 0, i64 %30, i64 %31, i64 0, i64 %32
  %34 = load float, float addrspace(1)* %33, align 4, !invariant.load !66
  %35 = zext i32 %3 to i64
  %36 = zext i32 %.decomposed to i64
  %37 = zext i32 %1 to i64
  %38 = getelementptr inbounds [5 x [5 x [1 x [32 x float]]]], [5 x [5 x [1 x [32 x float]]]] addrspace(1)* %arg7.8.typed, i64 0, i64 %35, i64 %36, i64 0, i64 %37
  %39 = load float, float addrspace(1)* %38, align 4, !invariant.load !66
  %40 = insertelement <4 x float> undef, float %21, i32 0
  %41 = insertelement <4 x float> %40, float %29, i32 1
  %42 = insertelement <4 x float> %41, float %34, i32 2
  %43 = insertelement <4 x float> %42, float %39, i32 3
  %44 = bitcast float addrspace(1)* %24 to <4 x float> addrspace(1)*
  store <4 x float> %43, <4 x float> addrspace(1)* %44, align 16
  ret void
}

; Function Attrs: nofree nounwind
define void @broadcast_84(i8* noalias nocapture align 64 dereferenceable(204800) %alloc14, i8* noalias nocapture readonly align 16 dereferenceable(40) %alloc63, i8* noalias nocapture readnone align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #3 {
entry:
  %alloc633 = addrspacecast i8* %alloc63 to i8 addrspace(1)*
  %alloc141 = addrspacecast i8* %alloc14 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !69
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !70
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = urem i32 %linear_index, 10
  %4 = bitcast i8 addrspace(1)* %alloc633 to float addrspace(1)*
  %5 = zext i32 %3 to i64
  %6 = getelementptr inbounds float, float addrspace(1)* %4, i64 %5
  %7 = load float, float addrspace(1)* %6, align 4, !invariant.load !66
  %8 = bitcast i8 addrspace(1)* %alloc141 to float addrspace(1)*
  %9 = zext i32 %linear_index to i64
  %10 = getelementptr inbounds float, float addrspace(1)* %8, i64 %9
  store float %7, float addrspace(1)* %10, align 4
  ret void
}

; Function Attrs: nofree nounwind
define void @copy_33(i8* noalias nocapture align 64 dereferenceable(204800) %alloc15, i8* noalias nocapture readonly align 16 dereferenceable(204800) %alloc16, i8* noalias nocapture readnone align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #3 {
entry:
  %alloc169 = addrspacecast i8* %alloc16 to i8 addrspace(1)*
  %alloc157 = addrspacecast i8* %alloc15 to i8 addrspace(1)*
  %arg9.10.typed = bitcast i8 addrspace(1)* %alloc169 to [5 x [5 x [32 x [64 x float]]]] addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !71
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !72
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %3, %2
  %linear_index1 = or i32 %linear_index_base, 1
  %linear_index2 = or i32 %linear_index_base, 2
  %linear_index3 = or i32 %linear_index_base, 3
  %4 = udiv i32 %linear_index_base, 800
  %5 = udiv i32 %linear_index3, 25
  %6 = and i32 %5, 31
  %linear_index3.frozen = freeze i32 %linear_index3
  %7 = udiv i32 %linear_index3.frozen, 5
  %8 = urem i32 %7, 5
  %9 = mul i32 %7, 5
  %.decomposed = sub i32 %linear_index3.frozen, %9
  %10 = udiv i32 %linear_index2, 25
  %11 = and i32 %10, 31
  %linear_index2.frozen = freeze i32 %linear_index2
  %12 = udiv i32 %linear_index2.frozen, 5
  %13 = urem i32 %12, 5
  %14 = mul i32 %12, 5
  %.decomposed4 = sub i32 %linear_index2.frozen, %14
  %15 = udiv i32 %linear_index1, 25
  %16 = and i32 %15, 31
  %linear_index1.frozen = freeze i32 %linear_index1
  %17 = udiv i32 %linear_index1.frozen, 5
  %18 = urem i32 %17, 5
  %19 = mul i32 %17, 5
  %.decomposed5 = sub i32 %linear_index1.frozen, %19
  %20 = udiv i32 %linear_index_base, 25
  %21 = and i32 %20, 31
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %22 = udiv i32 %linear_index_base.frozen, 5
  %23 = urem i32 %22, 5
  %24 = mul i32 %22, 5
  %.decomposed6 = sub i32 %linear_index_base.frozen, %24
  %25 = zext i32 %23 to i64
  %26 = zext i32 %.decomposed6 to i64
  %27 = zext i32 %21 to i64
  %28 = zext i32 %4 to i64
  %29 = getelementptr inbounds [5 x [5 x [32 x [64 x float]]]], [5 x [5 x [32 x [64 x float]]]] addrspace(1)* %arg9.10.typed, i64 0, i64 %25, i64 %26, i64 %27, i64 %28
  %30 = load float, float addrspace(1)* %29, align 4, !invariant.load !66
  %31 = bitcast i8 addrspace(1)* %alloc157 to float addrspace(1)*
  %32 = zext i32 %linear_index_base to i64
  %33 = getelementptr float, float addrspace(1)* %31, i64 %32
  %34 = zext i32 %18 to i64
  %35 = zext i32 %.decomposed5 to i64
  %36 = zext i32 %16 to i64
  %37 = getelementptr inbounds [5 x [5 x [32 x [64 x float]]]], [5 x [5 x [32 x [64 x float]]]] addrspace(1)* %arg9.10.typed, i64 0, i64 %34, i64 %35, i64 %36, i64 %28
  %38 = load float, float addrspace(1)* %37, align 4, !invariant.load !66
  %39 = zext i32 %13 to i64
  %40 = zext i32 %.decomposed4 to i64
  %41 = zext i32 %11 to i64
  %42 = getelementptr inbounds [5 x [5 x [32 x [64 x float]]]], [5 x [5 x [32 x [64 x float]]]] addrspace(1)* %arg9.10.typed, i64 0, i64 %39, i64 %40, i64 %41, i64 %28
  %43 = load float, float addrspace(1)* %42, align 4, !invariant.load !66
  %44 = zext i32 %8 to i64
  %45 = zext i32 %.decomposed to i64
  %46 = zext i32 %6 to i64
  %47 = getelementptr inbounds [5 x [5 x [32 x [64 x float]]]], [5 x [5 x [32 x [64 x float]]]] addrspace(1)* %arg9.10.typed, i64 0, i64 %44, i64 %45, i64 %46, i64 %28
  %48 = load float, float addrspace(1)* %47, align 4, !invariant.load !66
  %49 = insertelement <4 x float> undef, float %30, i32 0
  %50 = insertelement <4 x float> %49, float %38, i32 1
  %51 = insertelement <4 x float> %50, float %43, i32 2
  %52 = insertelement <4 x float> %51, float %48, i32 3
  %53 = bitcast float addrspace(1)* %33 to <4 x float> addrspace(1)*
  store <4 x float> %52, <4 x float> addrspace(1)* %53, align 16
  ret void
}

; Function Attrs: nofree nounwind
define void @broadcast_77(i8* noalias nocapture align 64 dereferenceable(819200) %alloc9, i8* noalias nocapture readonly align 16 dereferenceable(512) %alloc40, i8* noalias nocapture readnone align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #3 {
entry:
  %alloc403 = addrspacecast i8* %alloc40 to i8 addrspace(1)*
  %alloc91 = addrspacecast i8* %alloc9 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !70
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !73
  %2 = shl nuw nsw i32 %1, 10
  %linear_index = or i32 %2, %0
  %3 = and i32 %0, 127
  %4 = bitcast i8 addrspace(1)* %alloc403 to float addrspace(1)*
  %5 = zext i32 %3 to i64
  %6 = getelementptr inbounds float, float addrspace(1)* %4, i64 %5
  %7 = load float, float addrspace(1)* %6, align 4, !invariant.load !66
  %8 = bitcast i8 addrspace(1)* %alloc91 to float addrspace(1)*
  %9 = zext i32 %linear_index to i64
  %10 = getelementptr inbounds float, float addrspace(1)* %8, i64 %9
  store float %7, float addrspace(1)* %10, align 4
  ret void
}

; Function Attrs: nofree nounwind
define void @copy_34(i8* noalias nocapture readonly align 16 dereferenceable(819200) %alloc10, i8* noalias nocapture align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #3 {
entry:
  %temp_buf9 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc107 = addrspacecast i8* %alloc10 to i8 addrspace(1)*
  %arg11.12.typed = bitcast i8 addrspace(1)* %alloc107 to [5 x [5 x [64 x [128 x float]]]] addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !68
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !72
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %3, %2
  %linear_index1 = or i32 %linear_index_base, 1
  %linear_index2 = or i32 %linear_index_base, 2
  %linear_index3 = or i32 %linear_index_base, 3
  %4 = udiv i32 %linear_index_base, 1600
  %5 = udiv i32 %linear_index3, 25
  %6 = and i32 %5, 63
  %linear_index3.frozen = freeze i32 %linear_index3
  %7 = udiv i32 %linear_index3.frozen, 5
  %8 = urem i32 %7, 5
  %9 = mul i32 %7, 5
  %.decomposed = sub i32 %linear_index3.frozen, %9
  %10 = udiv i32 %linear_index2, 25
  %11 = and i32 %10, 63
  %linear_index2.frozen = freeze i32 %linear_index2
  %12 = udiv i32 %linear_index2.frozen, 5
  %13 = urem i32 %12, 5
  %14 = mul i32 %12, 5
  %.decomposed4 = sub i32 %linear_index2.frozen, %14
  %15 = udiv i32 %linear_index1, 25
  %16 = and i32 %15, 63
  %linear_index1.frozen = freeze i32 %linear_index1
  %17 = udiv i32 %linear_index1.frozen, 5
  %18 = urem i32 %17, 5
  %19 = mul i32 %17, 5
  %.decomposed5 = sub i32 %linear_index1.frozen, %19
  %20 = udiv i32 %linear_index_base, 25
  %21 = and i32 %20, 63
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %22 = udiv i32 %linear_index_base.frozen, 5
  %23 = urem i32 %22, 5
  %24 = mul i32 %22, 5
  %.decomposed6 = sub i32 %linear_index_base.frozen, %24
  %copy.34.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf9, i64 233606464
  %25 = zext i32 %23 to i64
  %26 = zext i32 %.decomposed6 to i64
  %27 = zext i32 %21 to i64
  %28 = zext i32 %4 to i64
  %29 = getelementptr inbounds [5 x [5 x [64 x [128 x float]]]], [5 x [5 x [64 x [128 x float]]]] addrspace(1)* %arg11.12.typed, i64 0, i64 %25, i64 %26, i64 %27, i64 %28
  %30 = load float, float addrspace(1)* %29, align 4, !invariant.load !66
  %31 = bitcast i8 addrspace(1)* %copy.34.raw to float addrspace(1)*
  %32 = zext i32 %linear_index_base to i64
  %33 = getelementptr float, float addrspace(1)* %31, i64 %32
  %34 = zext i32 %18 to i64
  %35 = zext i32 %.decomposed5 to i64
  %36 = zext i32 %16 to i64
  %37 = getelementptr inbounds [5 x [5 x [64 x [128 x float]]]], [5 x [5 x [64 x [128 x float]]]] addrspace(1)* %arg11.12.typed, i64 0, i64 %34, i64 %35, i64 %36, i64 %28
  %38 = load float, float addrspace(1)* %37, align 4, !invariant.load !66
  %39 = zext i32 %13 to i64
  %40 = zext i32 %.decomposed4 to i64
  %41 = zext i32 %11 to i64
  %42 = getelementptr inbounds [5 x [5 x [64 x [128 x float]]]], [5 x [5 x [64 x [128 x float]]]] addrspace(1)* %arg11.12.typed, i64 0, i64 %39, i64 %40, i64 %41, i64 %28
  %43 = load float, float addrspace(1)* %42, align 4, !invariant.load !66
  %44 = zext i32 %8 to i64
  %45 = zext i32 %.decomposed to i64
  %46 = zext i32 %6 to i64
  %47 = getelementptr inbounds [5 x [5 x [64 x [128 x float]]]], [5 x [5 x [64 x [128 x float]]]] addrspace(1)* %arg11.12.typed, i64 0, i64 %44, i64 %45, i64 %46, i64 %28
  %48 = load float, float addrspace(1)* %47, align 4, !invariant.load !66
  %49 = insertelement <4 x float> undef, float %30, i32 0
  %50 = insertelement <4 x float> %49, float %38, i32 1
  %51 = insertelement <4 x float> %50, float %43, i32 2
  %52 = insertelement <4 x float> %51, float %48, i32 3
  %53 = bitcast float addrspace(1)* %33 to <4 x float> addrspace(1)*
  store <4 x float> %52, <4 x float> addrspace(1)* %53, align 16
  ret void
}

; Function Attrs: nofree nounwind
define void @reduce_window_66(i8* noalias nocapture align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #3 {
entry:
  %temp_buf13 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %get-tuple-element.79.typed = bitcast i8 addrspace(1)* %temp_buf13 to [1024 x [64 x [20 x [20 x float]]]] addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !74
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !70
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %linear_index.frozen = freeze i32 %linear_index
  %3 = udiv i32 %linear_index.frozen, 10
  %4 = mul i32 %3, 10
  %.decomposed = sub i32 %linear_index.frozen, %4
  %5 = urem i32 %3, 10
  %6 = udiv i32 %linear_index, 100
  %7 = and i32 %6, 63
  %8 = udiv i32 %linear_index, 6400
  %9 = shl nuw nsw i32 %.decomposed, 1
  %10 = shl nuw nsw i32 %5, 1
  %11 = zext i32 %8 to i64
  %12 = zext i32 %7 to i64
  %13 = zext i32 %9 to i64
  %14 = zext i32 %10 to i64
  %15 = getelementptr inbounds [1024 x [64 x [20 x [20 x float]]]], [1024 x [64 x [20 x [20 x float]]]] addrspace(1)* %get-tuple-element.79.typed, i64 0, i64 %11, i64 %12, i64 %14, i64 %13
  %16 = bitcast float addrspace(1)* %15 to <2 x float> addrspace(1)*
  %17 = load <2 x float>, <2 x float> addrspace(1)* %16, align 8, !invariant.load !66
  %18 = extractelement <2 x float> %17, i32 0
  %19 = extractelement <2 x float> %17, i32 1
  %20 = tail call float @llvm.maxnum.f32(float %18, float 0xFFF0000000000000) #0
  %21 = tail call float @llvm.maxnum.f32(float %20, float %19) #0
  %22 = getelementptr inbounds float, float addrspace(1)* %15, i64 20
  %23 = bitcast float addrspace(1)* %22 to <2 x float> addrspace(1)*
  %24 = load <2 x float>, <2 x float> addrspace(1)* %23, align 8, !invariant.load !66
  %25 = extractelement <2 x float> %24, i32 0
  %26 = extractelement <2 x float> %24, i32 1
  %27 = tail call float @llvm.maxnum.f32(float %21, float %25) #0
  %28 = tail call float @llvm.maxnum.f32(float %27, float %26) #0
  %reduce-window.66.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf13, i64 169643328
  %29 = bitcast i8 addrspace(1)* %reduce-window.66.raw to float addrspace(1)*
  %30 = zext i32 %linear_index to i64
  %31 = getelementptr inbounds float, float addrspace(1)* %29, i64 %30
  store float %28, float addrspace(1)* %31, align 4
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.maxnum.f32(float, float) #4

; Function Attrs: nofree nounwind
define void @fusion_45(i8* noalias nocapture align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #3 {
entry:
  %temp_buf25 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %get-tuple-element.80.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf25, i64 214732096
  %get-tuple-element.80.typed = bitcast i8 addrspace(1)* %get-tuple-element.80.raw to [1024 x [128 x [6 x [6 x float]]]] addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !75
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !72
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %3, %2
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %4 = udiv i32 %linear_index_base.frozen, 4608
  %5 = mul i32 %4, 4608
  %.decomposed = sub i32 %linear_index_base.frozen, %5
  %linear_index1 = or i32 %linear_index_base, 1
  %6 = urem i32 %linear_index1, 4608
  %linear_index2 = or i32 %linear_index_base, 2
  %7 = urem i32 %linear_index2, 4608
  %linear_index3 = or i32 %linear_index_base, 3
  %8 = urem i32 %linear_index3, 4608
  %fusion.45.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf25, i64 195857728
  %9 = and i32 %.decomposed, 127
  %10 = lshr i32 %.decomposed, 7
  %.lhs.trunc = trunc i32 %10 to i8
  %11 = urem i8 %.lhs.trunc, 6
  %.lhs.trunc11 = trunc i32 %.decomposed to i16
  %12 = udiv i16 %.lhs.trunc11, 768
  %13 = zext i32 %4 to i64
  %14 = zext i32 %9 to i64
  %15 = zext i16 %12 to i64
  %16 = zext i8 %11 to i64
  %param_0.70 = getelementptr inbounds [1024 x [128 x [6 x [6 x float]]]], [1024 x [128 x [6 x [6 x float]]]] addrspace(1)* %get-tuple-element.80.typed, i64 0, i64 %13, i64 %14, i64 %15, i64 %16
  %param_0.704 = load float, float addrspace(1)* %param_0.70, align 4, !invariant.load !66
  %17 = bitcast i8 addrspace(1)* %fusion.45.raw to float addrspace(1)*
  %18 = zext i32 %linear_index_base to i64
  %19 = getelementptr float, float addrspace(1)* %17, i64 %18
  %20 = and i32 %6, 127
  %21 = lshr i32 %6, 7
  %.lhs.trunc13 = trunc i32 %21 to i8
  %22 = urem i8 %.lhs.trunc13, 6
  %.lhs.trunc15 = trunc i32 %6 to i16
  %23 = udiv i16 %.lhs.trunc15, 768
  %24 = zext i32 %20 to i64
  %25 = zext i16 %23 to i64
  %26 = zext i8 %22 to i64
  %param_0.705 = getelementptr inbounds [1024 x [128 x [6 x [6 x float]]]], [1024 x [128 x [6 x [6 x float]]]] addrspace(1)* %get-tuple-element.80.typed, i64 0, i64 %13, i64 %24, i64 %25, i64 %26
  %param_0.706 = load float, float addrspace(1)* %param_0.705, align 4, !invariant.load !66
  %27 = and i32 %7, 127
  %28 = lshr i32 %7, 7
  %.lhs.trunc17 = trunc i32 %28 to i8
  %29 = urem i8 %.lhs.trunc17, 6
  %.lhs.trunc19 = trunc i32 %7 to i16
  %30 = udiv i16 %.lhs.trunc19, 768
  %31 = zext i32 %27 to i64
  %32 = zext i16 %30 to i64
  %33 = zext i8 %29 to i64
  %param_0.707 = getelementptr inbounds [1024 x [128 x [6 x [6 x float]]]], [1024 x [128 x [6 x [6 x float]]]] addrspace(1)* %get-tuple-element.80.typed, i64 0, i64 %13, i64 %31, i64 %32, i64 %33
  %param_0.708 = load float, float addrspace(1)* %param_0.707, align 4, !invariant.load !66
  %34 = and i32 %8, 127
  %35 = lshr i32 %8, 7
  %.lhs.trunc21 = trunc i32 %35 to i8
  %36 = urem i8 %.lhs.trunc21, 6
  %.lhs.trunc23 = trunc i32 %8 to i16
  %37 = udiv i16 %.lhs.trunc23, 768
  %38 = zext i32 %34 to i64
  %39 = zext i16 %37 to i64
  %40 = zext i8 %36 to i64
  %param_0.709 = getelementptr inbounds [1024 x [128 x [6 x [6 x float]]]], [1024 x [128 x [6 x [6 x float]]]] addrspace(1)* %get-tuple-element.80.typed, i64 0, i64 %13, i64 %38, i64 %39, i64 %40
  %param_0.7010 = load float, float addrspace(1)* %param_0.709, align 4, !invariant.load !66
  %41 = insertelement <4 x float> undef, float %param_0.704, i32 0
  %42 = insertelement <4 x float> %41, float %param_0.706, i32 1
  %43 = insertelement <4 x float> %42, float %param_0.708, i32 2
  %44 = insertelement <4 x float> %43, float %param_0.7010, i32 3
  %45 = bitcast float addrspace(1)* %19 to <4 x float> addrspace(1)*
  store <4 x float> %44, <4 x float> addrspace(1)* %45, align 16
  ret void
}

; Function Attrs: nofree nounwind
define void @fusion_48(i8* noalias nocapture align 64 dereferenceable(819200) %alloc8, i8* noalias nocapture readonly align 64 dereferenceable(819200) %alloc9, i8* noalias nocapture readnone align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #3 {
entry:
  %alloc913 = addrspacecast i8* %alloc9 to i8 addrspace(1)*
  %alloc811 = addrspacecast i8* %alloc8 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !73
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !72
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %3, %2
  %4 = bitcast i8 addrspace(1)* %alloc913 to float addrspace(1)*
  %5 = zext i32 %linear_index_base to i64
  %param_0.97 = getelementptr float, float addrspace(1)* %4, i64 %5
  %6 = bitcast float addrspace(1)* %param_0.97 to <4 x float> addrspace(1)*
  %7 = load <4 x float>, <4 x float> addrspace(1)* %6, align 16, !invariant.load !66
  %param_0.97426 = extractelement <4 x float> %7, i32 0
  %param_0.97627 = extractelement <4 x float> %7, i32 1
  %param_0.97828 = extractelement <4 x float> %7, i32 2
  %param_0.971029 = extractelement <4 x float> %7, i32 3
  %8 = tail call float @llvm.maxnum.f32(float %param_0.97426, float 0.000000e+00)
  %9 = bitcast i8 addrspace(1)* %alloc811 to float addrspace(1)*
  %10 = getelementptr float, float addrspace(1)* %9, i64 %5
  %11 = tail call float @llvm.maxnum.f32(float %param_0.97627, float 0.000000e+00)
  %12 = tail call float @llvm.maxnum.f32(float %param_0.97828, float 0.000000e+00)
  %13 = tail call float @llvm.maxnum.f32(float %param_0.971029, float 0.000000e+00)
  %14 = insertelement <4 x float> undef, float %8, i32 0
  %15 = insertelement <4 x float> %14, float %11, i32 1
  %16 = insertelement <4 x float> %15, float %12, i32 2
  %17 = insertelement <4 x float> %16, float %13, i32 3
  %18 = bitcast float addrspace(1)* %10 to <4 x float> addrspace(1)*
  store <4 x float> %17, <4 x float> addrspace(1)* %18, align 16
  ret void
}

; Function Attrs: nofree nounwind
define void @reduce(i8* noalias nocapture readonly align 64 dereferenceable(204800) %alloc14, i8* noalias nocapture align 64 dereferenceable(4096) %alloc25, i8* noalias nocapture readnone align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #3 {
entry:
  %alloc2552 = addrspacecast i8* %alloc25 to i8 addrspace(1)*
  %alloc1450 = addrspacecast i8* %alloc14 to i8 addrspace(1)*
  %custom-call.14.typed = bitcast i8 addrspace(1)* %alloc1450 to [1024 x [10 x float]] addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !72
  %linear_index_base = shl nuw nsw i32 %0, 2
  %1 = zext i32 %linear_index_base to i64
  %2 = getelementptr inbounds [1024 x [10 x float]], [1024 x [10 x float]] addrspace(1)* %custom-call.14.typed, i64 0, i64 %1, i64 0
  %3 = bitcast float addrspace(1)* %2 to <4 x float> addrspace(1)*
  %4 = load <4 x float>, <4 x float> addrspace(1)* %3, align 32, !invariant.load !66
  %5 = extractelement <4 x float> %4, i32 0
  %6 = extractelement <4 x float> %4, i32 1
  %7 = extractelement <4 x float> %4, i32 2
  %8 = extractelement <4 x float> %4, i32 3
  %9 = tail call float @llvm.maxnum.f32(float %5, float 0xFFF0000000000000) #0
  %10 = tail call float @llvm.maxnum.f32(float %9, float %6) #0
  %11 = tail call float @llvm.maxnum.f32(float %10, float %7) #0
  %12 = tail call float @llvm.maxnum.f32(float %11, float %8) #0
  %13 = getelementptr inbounds float, float addrspace(1)* %2, i64 4
  %14 = bitcast float addrspace(1)* %13 to <4 x float> addrspace(1)*
  %15 = load <4 x float>, <4 x float> addrspace(1)* %14, align 16, !invariant.load !66
  %16 = extractelement <4 x float> %15, i32 0
  %17 = extractelement <4 x float> %15, i32 1
  %18 = extractelement <4 x float> %15, i32 2
  %19 = extractelement <4 x float> %15, i32 3
  %20 = tail call float @llvm.maxnum.f32(float %12, float %16) #0
  %21 = tail call float @llvm.maxnum.f32(float %20, float %17) #0
  %22 = tail call float @llvm.maxnum.f32(float %21, float %18) #0
  %23 = tail call float @llvm.maxnum.f32(float %22, float %19) #0
  %24 = getelementptr inbounds float, float addrspace(1)* %2, i64 8
  %25 = bitcast float addrspace(1)* %24 to <4 x float> addrspace(1)*
  %26 = load <4 x float>, <4 x float> addrspace(1)* %25, align 32, !invariant.load !66
  %27 = extractelement <4 x float> %26, i32 0
  %28 = extractelement <4 x float> %26, i32 1
  %29 = extractelement <4 x float> %26, i32 2
  %30 = extractelement <4 x float> %26, i32 3
  %31 = tail call float @llvm.maxnum.f32(float %23, float %27) #0
  %32 = tail call float @llvm.maxnum.f32(float %31, float %28) #0
  %33 = bitcast i8 addrspace(1)* %alloc2552 to float addrspace(1)*
  %34 = getelementptr float, float addrspace(1)* %33, i64 %1
  %35 = tail call float @llvm.maxnum.f32(float %29, float 0xFFF0000000000000) #0
  %36 = tail call float @llvm.maxnum.f32(float %35, float %30) #0
  %37 = getelementptr inbounds float, float addrspace(1)* %2, i64 12
  %38 = bitcast float addrspace(1)* %37 to <2 x float> addrspace(1)*
  %39 = load <2 x float>, <2 x float> addrspace(1)* %38, align 8, !invariant.load !66
  %40 = extractelement <2 x float> %39, i32 0
  %41 = extractelement <2 x float> %39, i32 1
  %42 = tail call float @llvm.maxnum.f32(float %36, float %40) #0
  %43 = tail call float @llvm.maxnum.f32(float %42, float %41) #0
  %44 = getelementptr inbounds float, float addrspace(1)* %2, i64 14
  %45 = bitcast float addrspace(1)* %44 to <2 x float> addrspace(1)*
  %46 = load <2 x float>, <2 x float> addrspace(1)* %45, align 8, !invariant.load !66
  %47 = extractelement <2 x float> %46, i32 0
  %48 = extractelement <2 x float> %46, i32 1
  %49 = tail call float @llvm.maxnum.f32(float %43, float %47) #0
  %50 = tail call float @llvm.maxnum.f32(float %49, float %48) #0
  %51 = getelementptr inbounds float, float addrspace(1)* %2, i64 16
  %52 = bitcast float addrspace(1)* %51 to <2 x float> addrspace(1)*
  %53 = load <2 x float>, <2 x float> addrspace(1)* %52, align 8, !invariant.load !66
  %54 = extractelement <2 x float> %53, i32 0
  %55 = extractelement <2 x float> %53, i32 1
  %56 = tail call float @llvm.maxnum.f32(float %50, float %54) #0
  %57 = tail call float @llvm.maxnum.f32(float %56, float %55) #0
  %58 = getelementptr inbounds float, float addrspace(1)* %2, i64 18
  %59 = bitcast float addrspace(1)* %58 to <2 x float> addrspace(1)*
  %60 = load <2 x float>, <2 x float> addrspace(1)* %59, align 8, !invariant.load !66
  %61 = extractelement <2 x float> %60, i32 0
  %62 = extractelement <2 x float> %60, i32 1
  %63 = tail call float @llvm.maxnum.f32(float %57, float %61) #0
  %64 = tail call float @llvm.maxnum.f32(float %63, float %62) #0
  %65 = getelementptr inbounds float, float addrspace(1)* %2, i64 20
  %66 = bitcast float addrspace(1)* %65 to <4 x float> addrspace(1)*
  %67 = load <4 x float>, <4 x float> addrspace(1)* %66, align 16, !invariant.load !66
  %68 = extractelement <4 x float> %67, i32 0
  %69 = extractelement <4 x float> %67, i32 1
  %70 = extractelement <4 x float> %67, i32 2
  %71 = extractelement <4 x float> %67, i32 3
  %72 = tail call float @llvm.maxnum.f32(float %68, float 0xFFF0000000000000) #0
  %73 = tail call float @llvm.maxnum.f32(float %72, float %69) #0
  %74 = tail call float @llvm.maxnum.f32(float %73, float %70) #0
  %75 = tail call float @llvm.maxnum.f32(float %74, float %71) #0
  %76 = getelementptr inbounds float, float addrspace(1)* %2, i64 24
  %77 = bitcast float addrspace(1)* %76 to <4 x float> addrspace(1)*
  %78 = load <4 x float>, <4 x float> addrspace(1)* %77, align 16, !invariant.load !66
  %79 = extractelement <4 x float> %78, i32 0
  %80 = extractelement <4 x float> %78, i32 1
  %81 = extractelement <4 x float> %78, i32 2
  %82 = extractelement <4 x float> %78, i32 3
  %83 = tail call float @llvm.maxnum.f32(float %75, float %79) #0
  %84 = tail call float @llvm.maxnum.f32(float %83, float %80) #0
  %85 = tail call float @llvm.maxnum.f32(float %84, float %81) #0
  %86 = tail call float @llvm.maxnum.f32(float %85, float %82) #0
  %87 = getelementptr inbounds float, float addrspace(1)* %2, i64 28
  %88 = bitcast float addrspace(1)* %87 to <4 x float> addrspace(1)*
  %89 = load <4 x float>, <4 x float> addrspace(1)* %88, align 16, !invariant.load !66
  %90 = extractelement <4 x float> %89, i32 0
  %91 = extractelement <4 x float> %89, i32 1
  %92 = extractelement <4 x float> %89, i32 2
  %93 = extractelement <4 x float> %89, i32 3
  %94 = tail call float @llvm.maxnum.f32(float %86, float %90) #0
  %95 = tail call float @llvm.maxnum.f32(float %94, float %91) #0
  %96 = tail call float @llvm.maxnum.f32(float %92, float 0xFFF0000000000000) #0
  %97 = tail call float @llvm.maxnum.f32(float %96, float %93) #0
  %98 = getelementptr inbounds float, float addrspace(1)* %2, i64 32
  %99 = bitcast float addrspace(1)* %98 to <2 x float> addrspace(1)*
  %100 = load <2 x float>, <2 x float> addrspace(1)* %99, align 8, !invariant.load !66
  %101 = extractelement <2 x float> %100, i32 0
  %102 = extractelement <2 x float> %100, i32 1
  %103 = tail call float @llvm.maxnum.f32(float %97, float %101) #0
  %104 = tail call float @llvm.maxnum.f32(float %103, float %102) #0
  %105 = getelementptr inbounds float, float addrspace(1)* %2, i64 34
  %106 = bitcast float addrspace(1)* %105 to <2 x float> addrspace(1)*
  %107 = load <2 x float>, <2 x float> addrspace(1)* %106, align 8, !invariant.load !66
  %108 = extractelement <2 x float> %107, i32 0
  %109 = extractelement <2 x float> %107, i32 1
  %110 = tail call float @llvm.maxnum.f32(float %104, float %108) #0
  %111 = tail call float @llvm.maxnum.f32(float %110, float %109) #0
  %112 = getelementptr inbounds float, float addrspace(1)* %2, i64 36
  %113 = bitcast float addrspace(1)* %112 to <2 x float> addrspace(1)*
  %114 = load <2 x float>, <2 x float> addrspace(1)* %113, align 8, !invariant.load !66
  %115 = extractelement <2 x float> %114, i32 0
  %116 = extractelement <2 x float> %114, i32 1
  %117 = tail call float @llvm.maxnum.f32(float %111, float %115) #0
  %118 = tail call float @llvm.maxnum.f32(float %117, float %116) #0
  %119 = getelementptr inbounds float, float addrspace(1)* %2, i64 38
  %120 = bitcast float addrspace(1)* %119 to <2 x float> addrspace(1)*
  %121 = load <2 x float>, <2 x float> addrspace(1)* %120, align 8, !invariant.load !66
  %122 = extractelement <2 x float> %121, i32 0
  %123 = extractelement <2 x float> %121, i32 1
  %124 = tail call float @llvm.maxnum.f32(float %118, float %122) #0
  %125 = tail call float @llvm.maxnum.f32(float %124, float %123) #0
  %126 = insertelement <4 x float> undef, float %32, i32 0
  %127 = insertelement <4 x float> %126, float %64, i32 1
  %128 = insertelement <4 x float> %127, float %95, i32 2
  %129 = insertelement <4 x float> %128, float %125, i32 3
  %130 = bitcast float addrspace(1)* %34 to <4 x float> addrspace(1)*
  store <4 x float> %129, <4 x float> addrspace(1)* %130, align 16
  ret void
}

; Function Attrs: nofree nounwind
define void @fusion_44(i8* noalias nocapture align 64 dereferenceable(204800) %alloc14, i8* noalias nocapture readonly align 64 dereferenceable(4096) %alloc25, i8* noalias nocapture readnone align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #3 {
entry:
  %alloc2523 = addrspacecast i8* %alloc25 to i8 addrspace(1)*
  %alloc1421 = addrspacecast i8* %alloc14 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !69
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !72
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %3, %2
  %linear_index2 = or i32 %linear_index_base, 2
  %linear_index3 = or i32 %linear_index_base, 3
  %4 = bitcast i8 addrspace(1)* %alloc1421 to float addrspace(1)*
  %5 = zext i32 %linear_index_base to i64
  %param_0.67 = getelementptr float, float addrspace(1)* %4, i64 %5
  %6 = bitcast float addrspace(1)* %param_0.67 to <4 x float> addrspace(1)*
  %7 = load <4 x float>, <4 x float> addrspace(1)* %6, align 16
  %param_0.67433 = extractelement <4 x float> %7, i32 0
  %param_0.67734 = extractelement <4 x float> %7, i32 1
  %param_0.671235 = extractelement <4 x float> %7, i32 2
  %param_0.671736 = extractelement <4 x float> %7, i32 3
  %8 = udiv i32 %linear_index_base, 10
  %9 = bitcast i8 addrspace(1)* %alloc2523 to float addrspace(1)*
  %10 = zext i32 %8 to i64
  %param_1.132 = getelementptr inbounds float, float addrspace(1)* %9, i64 %10
  %param_1.1325 = load float, float addrspace(1)* %param_1.132, align 4, !invariant.load !66
  %subtract.37 = fsub float %param_0.67433, %param_1.1325
  %11 = tail call float @llvm.fma.f32(float %subtract.37, float 0x3F777313A0000000, float 5.000000e-01) #0
  %12 = tail call float @llvm.nvvm.saturate.f(float %11) #0
  %13 = tail call float @llvm.nvvm.fma.rm.f(float %12, float 2.520000e+02, float 0x4168000020000000) #0
  %14 = fadd float %13, 0xC168000FE0000000
  %15 = fneg float %14
  %16 = tail call float @llvm.fma.f32(float %subtract.37, float 0x3FF7154760000000, float %15) #0
  %17 = tail call float @llvm.fma.f32(float %subtract.37, float 0x3E54AE0C00000000, float %16) #0
  %18 = bitcast float %13 to i32
  %19 = shl i32 %18, 23
  %20 = bitcast i32 %19 to float
  %21 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %17) #0
  %22 = fmul float %21, %20
  %subtract.3710 = fsub float %param_0.67734, %param_1.1325
  %23 = tail call float @llvm.fma.f32(float %subtract.3710, float 0x3F777313A0000000, float 5.000000e-01) #0
  %24 = tail call float @llvm.nvvm.saturate.f(float %23) #0
  %25 = tail call float @llvm.nvvm.fma.rm.f(float %24, float 2.520000e+02, float 0x4168000020000000) #0
  %26 = fadd float %25, 0xC168000FE0000000
  %27 = fneg float %26
  %28 = tail call float @llvm.fma.f32(float %subtract.3710, float 0x3FF7154760000000, float %27) #0
  %29 = tail call float @llvm.fma.f32(float %subtract.3710, float 0x3E54AE0C00000000, float %28) #0
  %30 = bitcast float %25 to i32
  %31 = shl i32 %30, 23
  %32 = bitcast i32 %31 to float
  %33 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %29) #0
  %34 = fmul float %33, %32
  %35 = udiv i32 %linear_index2, 10
  %36 = zext i32 %35 to i64
  %param_1.13213 = getelementptr inbounds float, float addrspace(1)* %9, i64 %36
  %param_1.13214 = load float, float addrspace(1)* %param_1.13213, align 4, !invariant.load !66
  %subtract.3715 = fsub float %param_0.671235, %param_1.13214
  %37 = tail call float @llvm.fma.f32(float %subtract.3715, float 0x3F777313A0000000, float 5.000000e-01) #0
  %38 = tail call float @llvm.nvvm.saturate.f(float %37) #0
  %39 = tail call float @llvm.nvvm.fma.rm.f(float %38, float 2.520000e+02, float 0x4168000020000000) #0
  %40 = fadd float %39, 0xC168000FE0000000
  %41 = fneg float %40
  %42 = tail call float @llvm.fma.f32(float %subtract.3715, float 0x3FF7154760000000, float %41) #0
  %43 = tail call float @llvm.fma.f32(float %subtract.3715, float 0x3E54AE0C00000000, float %42) #0
  %44 = bitcast float %39 to i32
  %45 = shl i32 %44, 23
  %46 = bitcast i32 %45 to float
  %47 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %43) #0
  %48 = fmul float %47, %46
  %49 = udiv i32 %linear_index3, 10
  %50 = zext i32 %49 to i64
  %param_1.13218 = getelementptr inbounds float, float addrspace(1)* %9, i64 %50
  %param_1.13219 = load float, float addrspace(1)* %param_1.13218, align 4, !invariant.load !66
  %subtract.3720 = fsub float %param_0.671736, %param_1.13219
  %51 = tail call float @llvm.fma.f32(float %subtract.3720, float 0x3F777313A0000000, float 5.000000e-01) #0
  %52 = tail call float @llvm.nvvm.saturate.f(float %51) #0
  %53 = tail call float @llvm.nvvm.fma.rm.f(float %52, float 2.520000e+02, float 0x4168000020000000) #0
  %54 = fadd float %53, 0xC168000FE0000000
  %55 = fneg float %54
  %56 = tail call float @llvm.fma.f32(float %subtract.3720, float 0x3FF7154760000000, float %55) #0
  %57 = tail call float @llvm.fma.f32(float %subtract.3720, float 0x3E54AE0C00000000, float %56) #0
  %58 = bitcast float %53 to i32
  %59 = shl i32 %58, 23
  %60 = bitcast i32 %59 to float
  %61 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %57) #0
  %62 = fmul float %61, %60
  %63 = insertelement <4 x float> undef, float %22, i32 0
  %64 = insertelement <4 x float> %63, float %34, i32 1
  %65 = insertelement <4 x float> %64, float %48, i32 2
  %66 = insertelement <4 x float> %65, float %62, i32 3
  %67 = bitcast float addrspace(1)* %param_0.67 to <4 x float> addrspace(1)*
  store <4 x float> %66, <4 x float> addrspace(1)* %67, align 16
  ret void
}

; Function Attrs: nofree nounwind
define void @reduce_1(i8* noalias nocapture readonly align 64 dereferenceable(204800) %alloc14, i8* noalias nocapture align 64 dereferenceable(4096) %alloc25, i8* noalias nocapture readnone align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #3 {
entry:
  %alloc2552 = addrspacecast i8* %alloc25 to i8 addrspace(1)*
  %alloc1450 = addrspacecast i8* %alloc14 to i8 addrspace(1)*
  %fusion.44.typed = bitcast i8 addrspace(1)* %alloc1450 to [1024 x [10 x float]] addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !72
  %linear_index_base = shl nuw nsw i32 %0, 2
  %1 = zext i32 %linear_index_base to i64
  %2 = getelementptr inbounds [1024 x [10 x float]], [1024 x [10 x float]] addrspace(1)* %fusion.44.typed, i64 0, i64 %1, i64 0
  %3 = bitcast float addrspace(1)* %2 to <4 x float> addrspace(1)*
  %4 = load <4 x float>, <4 x float> addrspace(1)* %3, align 32, !invariant.load !66
  %5 = extractelement <4 x float> %4, i32 0
  %6 = extractelement <4 x float> %4, i32 1
  %7 = extractelement <4 x float> %4, i32 2
  %8 = extractelement <4 x float> %4, i32 3
  %add.i = fadd float %5, 0.000000e+00
  %add.i.1 = fadd float %add.i, %6
  %add.i.2 = fadd float %add.i.1, %7
  %add.i.3 = fadd float %add.i.2, %8
  %9 = getelementptr inbounds float, float addrspace(1)* %2, i64 4
  %10 = bitcast float addrspace(1)* %9 to <4 x float> addrspace(1)*
  %11 = load <4 x float>, <4 x float> addrspace(1)* %10, align 16, !invariant.load !66
  %12 = extractelement <4 x float> %11, i32 0
  %13 = extractelement <4 x float> %11, i32 1
  %14 = extractelement <4 x float> %11, i32 2
  %15 = extractelement <4 x float> %11, i32 3
  %add.i.4 = fadd float %add.i.3, %12
  %add.i.5 = fadd float %add.i.4, %13
  %add.i.6 = fadd float %add.i.5, %14
  %add.i.7 = fadd float %add.i.6, %15
  %16 = getelementptr inbounds float, float addrspace(1)* %2, i64 8
  %17 = bitcast float addrspace(1)* %16 to <4 x float> addrspace(1)*
  %18 = load <4 x float>, <4 x float> addrspace(1)* %17, align 32, !invariant.load !66
  %19 = extractelement <4 x float> %18, i32 0
  %20 = extractelement <4 x float> %18, i32 1
  %21 = extractelement <4 x float> %18, i32 2
  %22 = extractelement <4 x float> %18, i32 3
  %add.i.8 = fadd float %add.i.7, %19
  %add.i.9 = fadd float %add.i.8, %20
  %23 = bitcast i8 addrspace(1)* %alloc2552 to float addrspace(1)*
  %24 = getelementptr float, float addrspace(1)* %23, i64 %1
  %add.i41 = fadd float %21, 0.000000e+00
  %add.i41.1 = fadd float %add.i41, %22
  %25 = getelementptr inbounds float, float addrspace(1)* %2, i64 12
  %26 = bitcast float addrspace(1)* %25 to <2 x float> addrspace(1)*
  %27 = load <2 x float>, <2 x float> addrspace(1)* %26, align 8, !invariant.load !66
  %28 = extractelement <2 x float> %27, i32 0
  %29 = extractelement <2 x float> %27, i32 1
  %add.i41.2 = fadd float %add.i41.1, %28
  %add.i41.3 = fadd float %add.i41.2, %29
  %30 = getelementptr inbounds float, float addrspace(1)* %2, i64 14
  %31 = bitcast float addrspace(1)* %30 to <2 x float> addrspace(1)*
  %32 = load <2 x float>, <2 x float> addrspace(1)* %31, align 8, !invariant.load !66
  %33 = extractelement <2 x float> %32, i32 0
  %34 = extractelement <2 x float> %32, i32 1
  %add.i41.4 = fadd float %add.i41.3, %33
  %add.i41.5 = fadd float %add.i41.4, %34
  %35 = getelementptr inbounds float, float addrspace(1)* %2, i64 16
  %36 = bitcast float addrspace(1)* %35 to <2 x float> addrspace(1)*
  %37 = load <2 x float>, <2 x float> addrspace(1)* %36, align 8, !invariant.load !66
  %38 = extractelement <2 x float> %37, i32 0
  %39 = extractelement <2 x float> %37, i32 1
  %add.i41.6 = fadd float %add.i41.5, %38
  %add.i41.7 = fadd float %add.i41.6, %39
  %40 = getelementptr inbounds float, float addrspace(1)* %2, i64 18
  %41 = bitcast float addrspace(1)* %40 to <2 x float> addrspace(1)*
  %42 = load <2 x float>, <2 x float> addrspace(1)* %41, align 8, !invariant.load !66
  %43 = extractelement <2 x float> %42, i32 0
  %44 = extractelement <2 x float> %42, i32 1
  %add.i41.8 = fadd float %add.i41.7, %43
  %add.i41.9 = fadd float %add.i41.8, %44
  %45 = getelementptr inbounds float, float addrspace(1)* %2, i64 20
  %46 = bitcast float addrspace(1)* %45 to <4 x float> addrspace(1)*
  %47 = load <4 x float>, <4 x float> addrspace(1)* %46, align 16, !invariant.load !66
  %48 = extractelement <4 x float> %47, i32 0
  %49 = extractelement <4 x float> %47, i32 1
  %50 = extractelement <4 x float> %47, i32 2
  %51 = extractelement <4 x float> %47, i32 3
  %add.i40 = fadd float %48, 0.000000e+00
  %add.i40.1 = fadd float %add.i40, %49
  %add.i40.2 = fadd float %add.i40.1, %50
  %add.i40.3 = fadd float %add.i40.2, %51
  %52 = getelementptr inbounds float, float addrspace(1)* %2, i64 24
  %53 = bitcast float addrspace(1)* %52 to <4 x float> addrspace(1)*
  %54 = load <4 x float>, <4 x float> addrspace(1)* %53, align 16, !invariant.load !66
  %55 = extractelement <4 x float> %54, i32 0
  %56 = extractelement <4 x float> %54, i32 1
  %57 = extractelement <4 x float> %54, i32 2
  %58 = extractelement <4 x float> %54, i32 3
  %add.i40.4 = fadd float %add.i40.3, %55
  %add.i40.5 = fadd float %add.i40.4, %56
  %add.i40.6 = fadd float %add.i40.5, %57
  %add.i40.7 = fadd float %add.i40.6, %58
  %59 = getelementptr inbounds float, float addrspace(1)* %2, i64 28
  %60 = bitcast float addrspace(1)* %59 to <4 x float> addrspace(1)*
  %61 = load <4 x float>, <4 x float> addrspace(1)* %60, align 16, !invariant.load !66
  %62 = extractelement <4 x float> %61, i32 0
  %63 = extractelement <4 x float> %61, i32 1
  %64 = extractelement <4 x float> %61, i32 2
  %65 = extractelement <4 x float> %61, i32 3
  %add.i40.8 = fadd float %add.i40.7, %62
  %add.i40.9 = fadd float %add.i40.8, %63
  %add.i39 = fadd float %64, 0.000000e+00
  %add.i39.1 = fadd float %add.i39, %65
  %66 = getelementptr inbounds float, float addrspace(1)* %2, i64 32
  %67 = bitcast float addrspace(1)* %66 to <2 x float> addrspace(1)*
  %68 = load <2 x float>, <2 x float> addrspace(1)* %67, align 8, !invariant.load !66
  %69 = extractelement <2 x float> %68, i32 0
  %70 = extractelement <2 x float> %68, i32 1
  %add.i39.2 = fadd float %add.i39.1, %69
  %add.i39.3 = fadd float %add.i39.2, %70
  %71 = getelementptr inbounds float, float addrspace(1)* %2, i64 34
  %72 = bitcast float addrspace(1)* %71 to <2 x float> addrspace(1)*
  %73 = load <2 x float>, <2 x float> addrspace(1)* %72, align 8, !invariant.load !66
  %74 = extractelement <2 x float> %73, i32 0
  %75 = extractelement <2 x float> %73, i32 1
  %add.i39.4 = fadd float %add.i39.3, %74
  %add.i39.5 = fadd float %add.i39.4, %75
  %76 = getelementptr inbounds float, float addrspace(1)* %2, i64 36
  %77 = bitcast float addrspace(1)* %76 to <2 x float> addrspace(1)*
  %78 = load <2 x float>, <2 x float> addrspace(1)* %77, align 8, !invariant.load !66
  %79 = extractelement <2 x float> %78, i32 0
  %80 = extractelement <2 x float> %78, i32 1
  %add.i39.6 = fadd float %add.i39.5, %79
  %add.i39.7 = fadd float %add.i39.6, %80
  %81 = getelementptr inbounds float, float addrspace(1)* %2, i64 38
  %82 = bitcast float addrspace(1)* %81 to <2 x float> addrspace(1)*
  %83 = load <2 x float>, <2 x float> addrspace(1)* %82, align 8, !invariant.load !66
  %84 = extractelement <2 x float> %83, i32 0
  %85 = extractelement <2 x float> %83, i32 1
  %add.i39.8 = fadd float %add.i39.7, %84
  %add.i39.9 = fadd float %add.i39.8, %85
  %86 = insertelement <4 x float> undef, float %add.i.9, i32 0
  %87 = insertelement <4 x float> %86, float %add.i41.9, i32 1
  %88 = insertelement <4 x float> %87, float %add.i40.9, i32 2
  %89 = insertelement <4 x float> %88, float %add.i39.9, i32 3
  %90 = bitcast float addrspace(1)* %24 to <4 x float> addrspace(1)*
  store <4 x float> %89, <4 x float> addrspace(1)* %90, align 16
  ret void
}

; Function Attrs: nofree nounwind
define void @fusion_47(i8* noalias nocapture align 64 dereferenceable(204800) %alloc13, i8* noalias nocapture readonly align 64 dereferenceable(204800) %alloc14, i8* noalias nocapture readonly align 64 dereferenceable(4096) %alloc25, i8* noalias nocapture readnone align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #3 {
entry:
  %alloc2544 = addrspacecast i8* %alloc25 to i8 addrspace(1)*
  %alloc1442 = addrspacecast i8* %alloc14 to i8 addrspace(1)*
  %alloc1340 = addrspacecast i8* %alloc13 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !69
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !72
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %3, %2
  %linear_index2 = or i32 %linear_index_base, 2
  %linear_index3 = or i32 %linear_index_base, 3
  %4 = bitcast i8 addrspace(1)* %alloc1442 to float addrspace(1)*
  %5 = zext i32 %linear_index_base to i64
  %param_0.99 = getelementptr float, float addrspace(1)* %4, i64 %5
  %6 = bitcast float addrspace(1)* %param_0.99 to <4 x float> addrspace(1)*
  %7 = load <4 x float>, <4 x float> addrspace(1)* %6, align 16, !invariant.load !66
  %param_0.99457 = extractelement <4 x float> %7, i32 0
  %param_0.99758 = extractelement <4 x float> %7, i32 1
  %param_0.991259 = extractelement <4 x float> %7, i32 2
  %param_0.991760 = extractelement <4 x float> %7, i32 3
  %8 = udiv i32 %linear_index_base, 10
  %9 = bitcast i8 addrspace(1)* %alloc2544 to float addrspace(1)*
  %10 = zext i32 %8 to i64
  %param_1.184 = getelementptr inbounds float, float addrspace(1)* %9, i64 %10
  %param_1.1845 = load float, float addrspace(1)* %param_1.184, align 4, !invariant.load !66
  %divide.16 = fdiv float %param_0.99457, %param_1.1845
  %.inv = fcmp ogt float %divide.16, 0x3E7AD7F2A0000000
  %11 = select i1 %.inv, float %divide.16, float 0x3E7AD7F2A0000000
  %.inv21 = fcmp olt float %11, 0x3FEFFFFFC0000000
  %12 = select i1 %.inv21, float %11, float 0x3FEFFFFFC0000000
  %13 = fcmp olt float %12, 0x3810000000000000
  %14 = fmul float %12, 0x4160000000000000
  %.02.i = select i1 %13, float %14, float %12
  %15 = bitcast float %.02.i to i32
  %16 = add nsw i32 %15, -1059760811
  %17 = and i32 %16, -8388608
  %18 = sub nsw i32 %15, %17
  %19 = bitcast i32 %18 to float
  %20 = sitofp i32 %17 to float
  %i.i.0.i = select i1 %13, float -2.300000e+01, float 0.000000e+00
  %21 = tail call float @llvm.fma.f32(float %20, float 0x3E80000000000000, float %i.i.0.i) #0
  %22 = fadd float %19, -1.000000e+00
  %23 = tail call float @llvm.fma.f32(float %22, float 0xBFC0AA04E0000000, float 0x3FC2073EC0000000) #0
  %24 = tail call float @llvm.fma.f32(float %23, float %22, float 0xBFBF19B980000000) #0
  %25 = tail call float @llvm.fma.f32(float %24, float %22, float 0x3FC1E52AA0000000) #0
  %26 = tail call float @llvm.fma.f32(float %25, float %22, float 0xBFC55B1720000000) #0
  %27 = tail call float @llvm.fma.f32(float %26, float %22, float 0x3FC99DA160000000) #0
  %28 = tail call float @llvm.fma.f32(float %27, float %22, float 0xBFCFFFE440000000) #0
  %29 = tail call float @llvm.fma.f32(float %28, float %22, float 0x3FD5554F00000000) #0
  %30 = tail call float @llvm.fma.f32(float %29, float %22, float -5.000000e-01) #0
  %31 = fmul float %22, %30
  %32 = tail call float @llvm.fma.f32(float %31, float %22, float %22) #0
  %33 = tail call float @llvm.fma.f32(float %21, float 0x3FE62E4300000000, float %32) #0
  %34 = icmp ugt i32 %15, 2139095039
  %35 = tail call float @llvm.fma.f32(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #0
  %r.i.0.i = select i1 %34, float %35, float %33
  %36 = fcmp oeq float %.02.i, 0.000000e+00
  %r.i.1.i = select i1 %36, float 0xFFF0000000000000, float %r.i.0.i
  %37 = bitcast i8 addrspace(1)* %alloc1340 to float addrspace(1)*
  %38 = getelementptr float, float addrspace(1)* %37, i64 %5
  %divide.1610 = fdiv float %param_0.99758, %param_1.1845
  %.inv22 = fcmp ogt float %divide.1610, 0x3E7AD7F2A0000000
  %39 = select i1 %.inv22, float %divide.1610, float 0x3E7AD7F2A0000000
  %.inv23 = fcmp olt float %39, 0x3FEFFFFFC0000000
  %40 = select i1 %.inv23, float %39, float 0x3FEFFFFFC0000000
  %41 = fcmp olt float %40, 0x3810000000000000
  %42 = fmul float %40, 0x4160000000000000
  %.02.i36 = select i1 %41, float %42, float %40
  %43 = bitcast float %.02.i36 to i32
  %44 = add nsw i32 %43, -1059760811
  %45 = and i32 %44, -8388608
  %46 = sub nsw i32 %43, %45
  %47 = bitcast i32 %46 to float
  %48 = sitofp i32 %45 to float
  %i.i.0.i37 = select i1 %41, float -2.300000e+01, float 0.000000e+00
  %49 = tail call float @llvm.fma.f32(float %48, float 0x3E80000000000000, float %i.i.0.i37) #0
  %50 = fadd float %47, -1.000000e+00
  %51 = tail call float @llvm.fma.f32(float %50, float 0xBFC0AA04E0000000, float 0x3FC2073EC0000000) #0
  %52 = tail call float @llvm.fma.f32(float %51, float %50, float 0xBFBF19B980000000) #0
  %53 = tail call float @llvm.fma.f32(float %52, float %50, float 0x3FC1E52AA0000000) #0
  %54 = tail call float @llvm.fma.f32(float %53, float %50, float 0xBFC55B1720000000) #0
  %55 = tail call float @llvm.fma.f32(float %54, float %50, float 0x3FC99DA160000000) #0
  %56 = tail call float @llvm.fma.f32(float %55, float %50, float 0xBFCFFFE440000000) #0
  %57 = tail call float @llvm.fma.f32(float %56, float %50, float 0x3FD5554F00000000) #0
  %58 = tail call float @llvm.fma.f32(float %57, float %50, float -5.000000e-01) #0
  %59 = fmul float %50, %58
  %60 = tail call float @llvm.fma.f32(float %59, float %50, float %50) #0
  %61 = tail call float @llvm.fma.f32(float %49, float 0x3FE62E4300000000, float %60) #0
  %62 = icmp ugt i32 %43, 2139095039
  %63 = tail call float @llvm.fma.f32(float %.02.i36, float 0x7FF0000000000000, float 0x7FF0000000000000) #0
  %r.i.0.i38 = select i1 %62, float %63, float %61
  %64 = fcmp oeq float %.02.i36, 0.000000e+00
  %r.i.1.i39 = select i1 %64, float 0xFFF0000000000000, float %r.i.0.i38
  %65 = udiv i32 %linear_index2, 10
  %66 = zext i32 %65 to i64
  %param_1.18413 = getelementptr inbounds float, float addrspace(1)* %9, i64 %66
  %param_1.18414 = load float, float addrspace(1)* %param_1.18413, align 4, !invariant.load !66
  %divide.1615 = fdiv float %param_0.991259, %param_1.18414
  %.inv24 = fcmp ogt float %divide.1615, 0x3E7AD7F2A0000000
  %67 = select i1 %.inv24, float %divide.1615, float 0x3E7AD7F2A0000000
  %.inv25 = fcmp olt float %67, 0x3FEFFFFFC0000000
  %68 = select i1 %.inv25, float %67, float 0x3FEFFFFFC0000000
  %69 = fcmp olt float %68, 0x3810000000000000
  %70 = fmul float %68, 0x4160000000000000
  %.02.i32 = select i1 %69, float %70, float %68
  %71 = bitcast float %.02.i32 to i32
  %72 = add nsw i32 %71, -1059760811
  %73 = and i32 %72, -8388608
  %74 = sub nsw i32 %71, %73
  %75 = bitcast i32 %74 to float
  %76 = sitofp i32 %73 to float
  %i.i.0.i33 = select i1 %69, float -2.300000e+01, float 0.000000e+00
  %77 = tail call float @llvm.fma.f32(float %76, float 0x3E80000000000000, float %i.i.0.i33) #0
  %78 = fadd float %75, -1.000000e+00
  %79 = tail call float @llvm.fma.f32(float %78, float 0xBFC0AA04E0000000, float 0x3FC2073EC0000000) #0
  %80 = tail call float @llvm.fma.f32(float %79, float %78, float 0xBFBF19B980000000) #0
  %81 = tail call float @llvm.fma.f32(float %80, float %78, float 0x3FC1E52AA0000000) #0
  %82 = tail call float @llvm.fma.f32(float %81, float %78, float 0xBFC55B1720000000) #0
  %83 = tail call float @llvm.fma.f32(float %82, float %78, float 0x3FC99DA160000000) #0
  %84 = tail call float @llvm.fma.f32(float %83, float %78, float 0xBFCFFFE440000000) #0
  %85 = tail call float @llvm.fma.f32(float %84, float %78, float 0x3FD5554F00000000) #0
  %86 = tail call float @llvm.fma.f32(float %85, float %78, float -5.000000e-01) #0
  %87 = fmul float %78, %86
  %88 = tail call float @llvm.fma.f32(float %87, float %78, float %78) #0
  %89 = tail call float @llvm.fma.f32(float %77, float 0x3FE62E4300000000, float %88) #0
  %90 = icmp ugt i32 %71, 2139095039
  %91 = tail call float @llvm.fma.f32(float %.02.i32, float 0x7FF0000000000000, float 0x7FF0000000000000) #0
  %r.i.0.i34 = select i1 %90, float %91, float %89
  %92 = fcmp oeq float %.02.i32, 0.000000e+00
  %r.i.1.i35 = select i1 %92, float 0xFFF0000000000000, float %r.i.0.i34
  %93 = udiv i32 %linear_index3, 10
  %94 = zext i32 %93 to i64
  %param_1.18418 = getelementptr inbounds float, float addrspace(1)* %9, i64 %94
  %param_1.18419 = load float, float addrspace(1)* %param_1.18418, align 4, !invariant.load !66
  %divide.1620 = fdiv float %param_0.991760, %param_1.18419
  %.inv26 = fcmp ogt float %divide.1620, 0x3E7AD7F2A0000000
  %95 = select i1 %.inv26, float %divide.1620, float 0x3E7AD7F2A0000000
  %.inv27 = fcmp olt float %95, 0x3FEFFFFFC0000000
  %96 = select i1 %.inv27, float %95, float 0x3FEFFFFFC0000000
  %97 = fcmp olt float %96, 0x3810000000000000
  %98 = fmul float %96, 0x4160000000000000
  %.02.i28 = select i1 %97, float %98, float %96
  %99 = bitcast float %.02.i28 to i32
  %100 = add nsw i32 %99, -1059760811
  %101 = and i32 %100, -8388608
  %102 = sub nsw i32 %99, %101
  %103 = bitcast i32 %102 to float
  %104 = sitofp i32 %101 to float
  %i.i.0.i29 = select i1 %97, float -2.300000e+01, float 0.000000e+00
  %105 = tail call float @llvm.fma.f32(float %104, float 0x3E80000000000000, float %i.i.0.i29) #0
  %106 = fadd float %103, -1.000000e+00
  %107 = tail call float @llvm.fma.f32(float %106, float 0xBFC0AA04E0000000, float 0x3FC2073EC0000000) #0
  %108 = tail call float @llvm.fma.f32(float %107, float %106, float 0xBFBF19B980000000) #0
  %109 = tail call float @llvm.fma.f32(float %108, float %106, float 0x3FC1E52AA0000000) #0
  %110 = tail call float @llvm.fma.f32(float %109, float %106, float 0xBFC55B1720000000) #0
  %111 = tail call float @llvm.fma.f32(float %110, float %106, float 0x3FC99DA160000000) #0
  %112 = tail call float @llvm.fma.f32(float %111, float %106, float 0xBFCFFFE440000000) #0
  %113 = tail call float @llvm.fma.f32(float %112, float %106, float 0x3FD5554F00000000) #0
  %114 = tail call float @llvm.fma.f32(float %113, float %106, float -5.000000e-01) #0
  %115 = fmul float %106, %114
  %116 = tail call float @llvm.fma.f32(float %115, float %106, float %106) #0
  %117 = tail call float @llvm.fma.f32(float %105, float 0x3FE62E4300000000, float %116) #0
  %118 = icmp ugt i32 %99, 2139095039
  %119 = tail call float @llvm.fma.f32(float %.02.i28, float 0x7FF0000000000000, float 0x7FF0000000000000) #0
  %r.i.0.i30 = select i1 %118, float %119, float %117
  %120 = fcmp oeq float %.02.i28, 0.000000e+00
  %r.i.1.i31 = select i1 %120, float 0xFFF0000000000000, float %r.i.0.i30
  %121 = insertelement <4 x float> undef, float %r.i.1.i, i32 0
  %122 = insertelement <4 x float> %121, float %r.i.1.i39, i32 1
  %123 = insertelement <4 x float> %122, float %r.i.1.i35, i32 2
  %124 = insertelement <4 x float> %123, float %r.i.1.i31, i32 3
  %125 = bitcast float addrspace(1)* %38 to <4 x float> addrspace(1)*
  store <4 x float> %124, <4 x float> addrspace(1)* %125, align 16
  ret void
}

; Function Attrs: nofree nounwind
define void @reduce_129(i8* noalias nocapture readonly align 64 dereferenceable(204800) %alloc13, i8* noalias nocapture align 64 dereferenceable(5120) %alloc21, i8* noalias nocapture readnone align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #3 {
entry:
  %alloc2152 = addrspacecast i8* %alloc21 to i8 addrspace(1)*
  %alloc1350 = addrspacecast i8* %alloc13 to i8 addrspace(1)*
  %fusion.47.typed = bitcast i8 addrspace(1)* %alloc1350 to [1024 x [10 x float]] addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !72
  %linear_index_base = shl nuw nsw i32 %0, 2
  %1 = zext i32 %linear_index_base to i64
  %2 = getelementptr inbounds [1024 x [10 x float]], [1024 x [10 x float]] addrspace(1)* %fusion.47.typed, i64 0, i64 %1, i64 0
  %3 = bitcast float addrspace(1)* %2 to <4 x float> addrspace(1)*
  %4 = load <4 x float>, <4 x float> addrspace(1)* %3, align 32, !invariant.load !66
  %5 = extractelement <4 x float> %4, i32 0
  %6 = extractelement <4 x float> %4, i32 1
  %7 = extractelement <4 x float> %4, i32 2
  %8 = extractelement <4 x float> %4, i32 3
  %9 = tail call float @llvm.maxnum.f32(float %5, float 0xFFF0000000000000) #0
  %10 = tail call float @llvm.maxnum.f32(float %9, float %6) #0
  %11 = tail call float @llvm.maxnum.f32(float %10, float %7) #0
  %12 = tail call float @llvm.maxnum.f32(float %11, float %8) #0
  %13 = getelementptr inbounds float, float addrspace(1)* %2, i64 4
  %14 = bitcast float addrspace(1)* %13 to <4 x float> addrspace(1)*
  %15 = load <4 x float>, <4 x float> addrspace(1)* %14, align 16, !invariant.load !66
  %16 = extractelement <4 x float> %15, i32 0
  %17 = extractelement <4 x float> %15, i32 1
  %18 = extractelement <4 x float> %15, i32 2
  %19 = extractelement <4 x float> %15, i32 3
  %20 = tail call float @llvm.maxnum.f32(float %12, float %16) #0
  %21 = tail call float @llvm.maxnum.f32(float %20, float %17) #0
  %22 = tail call float @llvm.maxnum.f32(float %21, float %18) #0
  %23 = tail call float @llvm.maxnum.f32(float %22, float %19) #0
  %24 = getelementptr inbounds float, float addrspace(1)* %2, i64 8
  %25 = bitcast float addrspace(1)* %24 to <4 x float> addrspace(1)*
  %26 = load <4 x float>, <4 x float> addrspace(1)* %25, align 32, !invariant.load !66
  %27 = extractelement <4 x float> %26, i32 0
  %28 = extractelement <4 x float> %26, i32 1
  %29 = extractelement <4 x float> %26, i32 2
  %30 = extractelement <4 x float> %26, i32 3
  %31 = tail call float @llvm.maxnum.f32(float %23, float %27) #0
  %32 = tail call float @llvm.maxnum.f32(float %31, float %28) #0
  %33 = bitcast i8 addrspace(1)* %alloc2152 to float addrspace(1)*
  %34 = getelementptr float, float addrspace(1)* %33, i64 %1
  %35 = tail call float @llvm.maxnum.f32(float %29, float 0xFFF0000000000000) #0
  %36 = tail call float @llvm.maxnum.f32(float %35, float %30) #0
  %37 = getelementptr inbounds float, float addrspace(1)* %2, i64 12
  %38 = bitcast float addrspace(1)* %37 to <2 x float> addrspace(1)*
  %39 = load <2 x float>, <2 x float> addrspace(1)* %38, align 8, !invariant.load !66
  %40 = extractelement <2 x float> %39, i32 0
  %41 = extractelement <2 x float> %39, i32 1
  %42 = tail call float @llvm.maxnum.f32(float %36, float %40) #0
  %43 = tail call float @llvm.maxnum.f32(float %42, float %41) #0
  %44 = getelementptr inbounds float, float addrspace(1)* %2, i64 14
  %45 = bitcast float addrspace(1)* %44 to <2 x float> addrspace(1)*
  %46 = load <2 x float>, <2 x float> addrspace(1)* %45, align 8, !invariant.load !66
  %47 = extractelement <2 x float> %46, i32 0
  %48 = extractelement <2 x float> %46, i32 1
  %49 = tail call float @llvm.maxnum.f32(float %43, float %47) #0
  %50 = tail call float @llvm.maxnum.f32(float %49, float %48) #0
  %51 = getelementptr inbounds float, float addrspace(1)* %2, i64 16
  %52 = bitcast float addrspace(1)* %51 to <2 x float> addrspace(1)*
  %53 = load <2 x float>, <2 x float> addrspace(1)* %52, align 8, !invariant.load !66
  %54 = extractelement <2 x float> %53, i32 0
  %55 = extractelement <2 x float> %53, i32 1
  %56 = tail call float @llvm.maxnum.f32(float %50, float %54) #0
  %57 = tail call float @llvm.maxnum.f32(float %56, float %55) #0
  %58 = getelementptr inbounds float, float addrspace(1)* %2, i64 18
  %59 = bitcast float addrspace(1)* %58 to <2 x float> addrspace(1)*
  %60 = load <2 x float>, <2 x float> addrspace(1)* %59, align 8, !invariant.load !66
  %61 = extractelement <2 x float> %60, i32 0
  %62 = extractelement <2 x float> %60, i32 1
  %63 = tail call float @llvm.maxnum.f32(float %57, float %61) #0
  %64 = tail call float @llvm.maxnum.f32(float %63, float %62) #0
  %65 = getelementptr inbounds float, float addrspace(1)* %2, i64 20
  %66 = bitcast float addrspace(1)* %65 to <4 x float> addrspace(1)*
  %67 = load <4 x float>, <4 x float> addrspace(1)* %66, align 16, !invariant.load !66
  %68 = extractelement <4 x float> %67, i32 0
  %69 = extractelement <4 x float> %67, i32 1
  %70 = extractelement <4 x float> %67, i32 2
  %71 = extractelement <4 x float> %67, i32 3
  %72 = tail call float @llvm.maxnum.f32(float %68, float 0xFFF0000000000000) #0
  %73 = tail call float @llvm.maxnum.f32(float %72, float %69) #0
  %74 = tail call float @llvm.maxnum.f32(float %73, float %70) #0
  %75 = tail call float @llvm.maxnum.f32(float %74, float %71) #0
  %76 = getelementptr inbounds float, float addrspace(1)* %2, i64 24
  %77 = bitcast float addrspace(1)* %76 to <4 x float> addrspace(1)*
  %78 = load <4 x float>, <4 x float> addrspace(1)* %77, align 16, !invariant.load !66
  %79 = extractelement <4 x float> %78, i32 0
  %80 = extractelement <4 x float> %78, i32 1
  %81 = extractelement <4 x float> %78, i32 2
  %82 = extractelement <4 x float> %78, i32 3
  %83 = tail call float @llvm.maxnum.f32(float %75, float %79) #0
  %84 = tail call float @llvm.maxnum.f32(float %83, float %80) #0
  %85 = tail call float @llvm.maxnum.f32(float %84, float %81) #0
  %86 = tail call float @llvm.maxnum.f32(float %85, float %82) #0
  %87 = getelementptr inbounds float, float addrspace(1)* %2, i64 28
  %88 = bitcast float addrspace(1)* %87 to <4 x float> addrspace(1)*
  %89 = load <4 x float>, <4 x float> addrspace(1)* %88, align 16, !invariant.load !66
  %90 = extractelement <4 x float> %89, i32 0
  %91 = extractelement <4 x float> %89, i32 1
  %92 = extractelement <4 x float> %89, i32 2
  %93 = extractelement <4 x float> %89, i32 3
  %94 = tail call float @llvm.maxnum.f32(float %86, float %90) #0
  %95 = tail call float @llvm.maxnum.f32(float %94, float %91) #0
  %96 = tail call float @llvm.maxnum.f32(float %92, float 0xFFF0000000000000) #0
  %97 = tail call float @llvm.maxnum.f32(float %96, float %93) #0
  %98 = getelementptr inbounds float, float addrspace(1)* %2, i64 32
  %99 = bitcast float addrspace(1)* %98 to <2 x float> addrspace(1)*
  %100 = load <2 x float>, <2 x float> addrspace(1)* %99, align 8, !invariant.load !66
  %101 = extractelement <2 x float> %100, i32 0
  %102 = extractelement <2 x float> %100, i32 1
  %103 = tail call float @llvm.maxnum.f32(float %97, float %101) #0
  %104 = tail call float @llvm.maxnum.f32(float %103, float %102) #0
  %105 = getelementptr inbounds float, float addrspace(1)* %2, i64 34
  %106 = bitcast float addrspace(1)* %105 to <2 x float> addrspace(1)*
  %107 = load <2 x float>, <2 x float> addrspace(1)* %106, align 8, !invariant.load !66
  %108 = extractelement <2 x float> %107, i32 0
  %109 = extractelement <2 x float> %107, i32 1
  %110 = tail call float @llvm.maxnum.f32(float %104, float %108) #0
  %111 = tail call float @llvm.maxnum.f32(float %110, float %109) #0
  %112 = getelementptr inbounds float, float addrspace(1)* %2, i64 36
  %113 = bitcast float addrspace(1)* %112 to <2 x float> addrspace(1)*
  %114 = load <2 x float>, <2 x float> addrspace(1)* %113, align 8, !invariant.load !66
  %115 = extractelement <2 x float> %114, i32 0
  %116 = extractelement <2 x float> %114, i32 1
  %117 = tail call float @llvm.maxnum.f32(float %111, float %115) #0
  %118 = tail call float @llvm.maxnum.f32(float %117, float %116) #0
  %119 = getelementptr inbounds float, float addrspace(1)* %2, i64 38
  %120 = bitcast float addrspace(1)* %119 to <2 x float> addrspace(1)*
  %121 = load <2 x float>, <2 x float> addrspace(1)* %120, align 8, !invariant.load !66
  %122 = extractelement <2 x float> %121, i32 0
  %123 = extractelement <2 x float> %121, i32 1
  %124 = tail call float @llvm.maxnum.f32(float %118, float %122) #0
  %125 = tail call float @llvm.maxnum.f32(float %124, float %123) #0
  %126 = insertelement <4 x float> undef, float %32, i32 0
  %127 = insertelement <4 x float> %126, float %64, i32 1
  %128 = insertelement <4 x float> %127, float %95, i32 2
  %129 = insertelement <4 x float> %128, float %125, i32 3
  %130 = bitcast float addrspace(1)* %34 to <4 x float> addrspace(1)*
  store <4 x float> %129, <4 x float> addrspace(1)* %130, align 16
  ret void
}

; Function Attrs: nofree nounwind
define void @fusion_49(i8* noalias nocapture align 64 dereferenceable(819200) %alloc7, i8* noalias nocapture readonly align 64 dereferenceable(204800) %alloc13, i8* noalias nocapture readonly align 64 dereferenceable(5120) %alloc21, i8* noalias nocapture readnone align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #3 {
entry:
  %alloc2125 = addrspacecast i8* %alloc21 to i8 addrspace(1)*
  %alloc1323 = addrspacecast i8* %alloc13 to i8 addrspace(1)*
  %alloc721 = addrspacecast i8* %alloc7 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !69
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !72
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %3, %2
  %linear_index2 = or i32 %linear_index_base, 2
  %linear_index3 = or i32 %linear_index_base, 3
  %4 = bitcast i8 addrspace(1)* %alloc1323 to float addrspace(1)*
  %5 = zext i32 %linear_index_base to i64
  %param_0.106 = getelementptr float, float addrspace(1)* %4, i64 %5
  %6 = bitcast float addrspace(1)* %param_0.106 to <4 x float> addrspace(1)*
  %7 = load <4 x float>, <4 x float> addrspace(1)* %6, align 16, !invariant.load !66
  %param_0.106438 = extractelement <4 x float> %7, i32 0
  %param_0.106739 = extractelement <4 x float> %7, i32 1
  %param_0.1061240 = extractelement <4 x float> %7, i32 2
  %param_0.1061741 = extractelement <4 x float> %7, i32 3
  %8 = udiv i32 %linear_index_base, 10
  %9 = bitcast i8 addrspace(1)* %alloc2125 to float addrspace(1)*
  %10 = zext i32 %8 to i64
  %param_1.192 = getelementptr inbounds float, float addrspace(1)* %9, i64 %10
  %param_1.1925 = load float, float addrspace(1)* %param_1.192, align 4, !invariant.load !66
  %subtract.59 = fsub float %param_0.106438, %param_1.1925
  %11 = tail call float @llvm.fma.f32(float %subtract.59, float 0x3F777313A0000000, float 5.000000e-01) #0
  %12 = tail call float @llvm.nvvm.saturate.f(float %11) #0
  %13 = tail call float @llvm.nvvm.fma.rm.f(float %12, float 2.520000e+02, float 0x4168000020000000) #0
  %14 = fadd float %13, 0xC168000FE0000000
  %15 = fneg float %14
  %16 = tail call float @llvm.fma.f32(float %subtract.59, float 0x3FF7154760000000, float %15) #0
  %17 = tail call float @llvm.fma.f32(float %subtract.59, float 0x3E54AE0C00000000, float %16) #0
  %18 = bitcast float %13 to i32
  %19 = shl i32 %18, 23
  %20 = bitcast i32 %19 to float
  %21 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %17) #0
  %22 = fmul float %21, %20
  %23 = bitcast i8 addrspace(1)* %alloc721 to float addrspace(1)*
  %24 = getelementptr float, float addrspace(1)* %23, i64 %5
  %subtract.5910 = fsub float %param_0.106739, %param_1.1925
  %25 = tail call float @llvm.fma.f32(float %subtract.5910, float 0x3F777313A0000000, float 5.000000e-01) #0
  %26 = tail call float @llvm.nvvm.saturate.f(float %25) #0
  %27 = tail call float @llvm.nvvm.fma.rm.f(float %26, float 2.520000e+02, float 0x4168000020000000) #0
  %28 = fadd float %27, 0xC168000FE0000000
  %29 = fneg float %28
  %30 = tail call float @llvm.fma.f32(float %subtract.5910, float 0x3FF7154760000000, float %29) #0
  %31 = tail call float @llvm.fma.f32(float %subtract.5910, float 0x3E54AE0C00000000, float %30) #0
  %32 = bitcast float %27 to i32
  %33 = shl i32 %32, 23
  %34 = bitcast i32 %33 to float
  %35 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %31) #0
  %36 = fmul float %35, %34
  %37 = udiv i32 %linear_index2, 10
  %38 = zext i32 %37 to i64
  %param_1.19213 = getelementptr inbounds float, float addrspace(1)* %9, i64 %38
  %param_1.19214 = load float, float addrspace(1)* %param_1.19213, align 4, !invariant.load !66
  %subtract.5915 = fsub float %param_0.1061240, %param_1.19214
  %39 = tail call float @llvm.fma.f32(float %subtract.5915, float 0x3F777313A0000000, float 5.000000e-01) #0
  %40 = tail call float @llvm.nvvm.saturate.f(float %39) #0
  %41 = tail call float @llvm.nvvm.fma.rm.f(float %40, float 2.520000e+02, float 0x4168000020000000) #0
  %42 = fadd float %41, 0xC168000FE0000000
  %43 = fneg float %42
  %44 = tail call float @llvm.fma.f32(float %subtract.5915, float 0x3FF7154760000000, float %43) #0
  %45 = tail call float @llvm.fma.f32(float %subtract.5915, float 0x3E54AE0C00000000, float %44) #0
  %46 = bitcast float %41 to i32
  %47 = shl i32 %46, 23
  %48 = bitcast i32 %47 to float
  %49 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %45) #0
  %50 = fmul float %49, %48
  %51 = udiv i32 %linear_index3, 10
  %52 = zext i32 %51 to i64
  %param_1.19218 = getelementptr inbounds float, float addrspace(1)* %9, i64 %52
  %param_1.19219 = load float, float addrspace(1)* %param_1.19218, align 4, !invariant.load !66
  %subtract.5920 = fsub float %param_0.1061741, %param_1.19219
  %53 = tail call float @llvm.fma.f32(float %subtract.5920, float 0x3F777313A0000000, float 5.000000e-01) #0
  %54 = tail call float @llvm.nvvm.saturate.f(float %53) #0
  %55 = tail call float @llvm.nvvm.fma.rm.f(float %54, float 2.520000e+02, float 0x4168000020000000) #0
  %56 = fadd float %55, 0xC168000FE0000000
  %57 = fneg float %56
  %58 = tail call float @llvm.fma.f32(float %subtract.5920, float 0x3FF7154760000000, float %57) #0
  %59 = tail call float @llvm.fma.f32(float %subtract.5920, float 0x3E54AE0C00000000, float %58) #0
  %60 = bitcast float %55 to i32
  %61 = shl i32 %60, 23
  %62 = bitcast i32 %61 to float
  %63 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %59) #0
  %64 = fmul float %63, %62
  %65 = insertelement <4 x float> undef, float %22, i32 0
  %66 = insertelement <4 x float> %65, float %36, i32 1
  %67 = insertelement <4 x float> %66, float %50, i32 2
  %68 = insertelement <4 x float> %67, float %64, i32 3
  %69 = bitcast float addrspace(1)* %24 to <4 x float> addrspace(1)*
  store <4 x float> %68, <4 x float> addrspace(1)* %69, align 16
  ret void
}

; Function Attrs: nounwind
define void @fusion_58(i8* noalias nocapture readonly align 64 dereferenceable(819200) %alloc7, i8* noalias align 64 dereferenceable(5120) %alloc19, i8* noalias align 64 dereferenceable(5120) %alloc20, i8* noalias nocapture align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #0 {
entry:
  %temp_buf79 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc2077 = addrspacecast i8* %alloc20 to i8 addrspace(1)*
  %alloc1975 = addrspacecast i8* %alloc19 to i8 addrspace(1)*
  %alloc773 = addrspacecast i8* %alloc7 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !76
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !70
  %2 = or i32 %1, %0
  %3 = icmp eq i32 %2, 0
  %4 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf79, i64 1141056008
  br i1 %3, label %emit_mof_tuple-true, label %emit_mof_tuple-after

emit_mof_tuple-after:                             ; preds = %emit_mof_tuple-true, %entry
  %5 = bitcast i8 addrspace(1)* %alloc773 to [1024 x [10 x float]] addrspace(1)*
  %6 = shl nuw nsw i32 %0, 8
  %linear_index = add nuw nsw i32 %6, %1
  %linear_index_base = shl nuw nsw i32 %linear_index, 2
  %7 = zext i32 %linear_index_base to i64
  %param_0.159 = getelementptr inbounds [1024 x [10 x float]], [1024 x [10 x float]] addrspace(1)* %5, i64 0, i64 %7, i64 0
  %8 = bitcast float addrspace(1)* %param_0.159 to <4 x float> addrspace(1)*
  %9 = load <4 x float>, <4 x float> addrspace(1)* %8, align 32, !invariant.load !66
  %param_0.1598156 = extractelement <4 x float> %9, i32 0
  %param_0.1598.1157 = extractelement <4 x float> %9, i32 1
  %param_0.1598.2158 = extractelement <4 x float> %9, i32 2
  %param_0.1598.3159 = extractelement <4 x float> %9, i32 3
  %add.138.i = fadd float %param_0.1598156, 0.000000e+00
  %add.138.i.1 = fadd float %add.138.i, %param_0.1598.1157
  %add.138.i.2 = fadd float %add.138.i.1, %param_0.1598.2158
  %add.138.i.3 = fadd float %add.138.i.2, %param_0.1598.3159
  %param_0.159.484 = getelementptr inbounds float, float addrspace(1)* %param_0.159, i64 4
  %10 = bitcast float addrspace(1)* %param_0.159.484 to <4 x float> addrspace(1)*
  %11 = load <4 x float>, <4 x float> addrspace(1)* %10, align 16, !invariant.load !66
  %param_0.1598.4160 = extractelement <4 x float> %11, i32 0
  %param_0.1598.5161 = extractelement <4 x float> %11, i32 1
  %param_0.1598.6162 = extractelement <4 x float> %11, i32 2
  %param_0.1598.7163 = extractelement <4 x float> %11, i32 3
  %add.138.i.4 = fadd float %add.138.i.3, %param_0.1598.4160
  %add.138.i.5 = fadd float %add.138.i.4, %param_0.1598.5161
  %add.138.i.6 = fadd float %add.138.i.5, %param_0.1598.6162
  %add.138.i.7 = fadd float %add.138.i.6, %param_0.1598.7163
  %param_0.159.888 = getelementptr inbounds float, float addrspace(1)* %param_0.159, i64 8
  %12 = bitcast float addrspace(1)* %param_0.159.888 to <4 x float> addrspace(1)*
  %13 = load <4 x float>, <4 x float> addrspace(1)* %12, align 32, !invariant.load !66
  %param_0.1598.8164 = extractelement <4 x float> %13, i32 0
  %param_0.1598.9165 = extractelement <4 x float> %13, i32 1
  %param_0.15918166 = extractelement <4 x float> %13, i32 2
  %param_0.15918.1167 = extractelement <4 x float> %13, i32 3
  %add.138.i.8 = fadd float %add.138.i.7, %param_0.1598.8164
  %add.138.i.9 = fadd float %add.138.i.8, %param_0.1598.9165
  %14 = fcmp olt float %add.138.i.9, 0x3810000000000000
  %15 = fmul float %add.138.i.9, 0x4160000000000000
  %.02.i61 = select i1 %14, float %15, float %add.138.i.9
  %16 = bitcast float %.02.i61 to i32
  %17 = add nsw i32 %16, -1059760811
  %18 = and i32 %17, -8388608
  %19 = sub nsw i32 %16, %18
  %20 = bitcast i32 %19 to float
  %21 = sitofp i32 %18 to float
  %i.i.0.i62 = select i1 %14, float -2.300000e+01, float 0.000000e+00
  %22 = tail call float @llvm.fma.f32(float %21, float 0x3E80000000000000, float %i.i.0.i62) #0
  %23 = fadd float %20, -1.000000e+00
  %24 = tail call float @llvm.fma.f32(float %23, float 0xBFC0AA04E0000000, float 0x3FC2073EC0000000) #0
  %25 = tail call float @llvm.fma.f32(float %24, float %23, float 0xBFBF19B980000000) #0
  %26 = tail call float @llvm.fma.f32(float %25, float %23, float 0x3FC1E52AA0000000) #0
  %27 = tail call float @llvm.fma.f32(float %26, float %23, float 0xBFC55B1720000000) #0
  %28 = tail call float @llvm.fma.f32(float %27, float %23, float 0x3FC99DA160000000) #0
  %29 = tail call float @llvm.fma.f32(float %28, float %23, float 0xBFCFFFE440000000) #0
  %30 = tail call float @llvm.fma.f32(float %29, float %23, float 0x3FD5554F00000000) #0
  %31 = tail call float @llvm.fma.f32(float %30, float %23, float -5.000000e-01) #0
  %32 = fmul float %23, %31
  %33 = tail call float @llvm.fma.f32(float %32, float %23, float %23) #0
  %34 = tail call float @llvm.fma.f32(float %22, float 0x3FE62E4300000000, float %33) #0
  %35 = icmp ugt i32 %16, 2139095039
  %36 = tail call float @llvm.fma.f32(float %.02.i61, float 0x7FF0000000000000, float 0x7FF0000000000000) #0
  %r.i.0.i63 = select i1 %35, float %36, float %34
  %37 = fcmp oeq float %.02.i61, 0.000000e+00
  %r.i.1.i64 = select i1 %37, float 0xFFF0000000000000, float %r.i.0.i63
  %38 = bitcast i8 addrspace(1)* %alloc1975 to float addrspace(1)*
  %39 = getelementptr float, float addrspace(1)* %38, i64 %7
  %40 = bitcast i8 addrspace(1)* %alloc2077 to float addrspace(1)*
  %41 = getelementptr float, float addrspace(1)* %40, i64 %7
  %add.138.i60 = fadd float %param_0.15918166, 0.000000e+00
  %add.138.i60.1 = fadd float %add.138.i60, %param_0.15918.1167
  %param_0.15917.295 = getelementptr inbounds float, float addrspace(1)* %param_0.159, i64 12
  %42 = bitcast float addrspace(1)* %param_0.15917.295 to <2 x float> addrspace(1)*
  %43 = load <2 x float>, <2 x float> addrspace(1)* %42, align 8, !invariant.load !66
  %param_0.15918.2168 = extractelement <2 x float> %43, i32 0
  %param_0.15918.3169 = extractelement <2 x float> %43, i32 1
  %add.138.i60.2 = fadd float %add.138.i60.1, %param_0.15918.2168
  %add.138.i60.3 = fadd float %add.138.i60.2, %param_0.15918.3169
  %param_0.15917.499 = getelementptr inbounds float, float addrspace(1)* %param_0.159, i64 14
  %44 = bitcast float addrspace(1)* %param_0.15917.499 to <2 x float> addrspace(1)*
  %45 = load <2 x float>, <2 x float> addrspace(1)* %44, align 8, !invariant.load !66
  %param_0.15918.4170 = extractelement <2 x float> %45, i32 0
  %param_0.15918.5171 = extractelement <2 x float> %45, i32 1
  %add.138.i60.4 = fadd float %add.138.i60.3, %param_0.15918.4170
  %add.138.i60.5 = fadd float %add.138.i60.4, %param_0.15918.5171
  %param_0.15917.6103 = getelementptr inbounds float, float addrspace(1)* %param_0.159, i64 16
  %46 = bitcast float addrspace(1)* %param_0.15917.6103 to <2 x float> addrspace(1)*
  %47 = load <2 x float>, <2 x float> addrspace(1)* %46, align 8, !invariant.load !66
  %param_0.15918.6172 = extractelement <2 x float> %47, i32 0
  %param_0.15918.7173 = extractelement <2 x float> %47, i32 1
  %add.138.i60.6 = fadd float %add.138.i60.5, %param_0.15918.6172
  %add.138.i60.7 = fadd float %add.138.i60.6, %param_0.15918.7173
  %param_0.15917.8107 = getelementptr inbounds float, float addrspace(1)* %param_0.159, i64 18
  %48 = bitcast float addrspace(1)* %param_0.15917.8107 to <2 x float> addrspace(1)*
  %49 = load <2 x float>, <2 x float> addrspace(1)* %48, align 8, !invariant.load !66
  %param_0.15918.8174 = extractelement <2 x float> %49, i32 0
  %param_0.15918.9175 = extractelement <2 x float> %49, i32 1
  %add.138.i60.8 = fadd float %add.138.i60.7, %param_0.15918.8174
  %add.138.i60.9 = fadd float %add.138.i60.8, %param_0.15918.9175
  %50 = fcmp olt float %add.138.i60.9, 0x3810000000000000
  %51 = fmul float %add.138.i60.9, 0x4160000000000000
  %.02.i56 = select i1 %50, float %51, float %add.138.i60.9
  %52 = bitcast float %.02.i56 to i32
  %53 = add nsw i32 %52, -1059760811
  %54 = and i32 %53, -8388608
  %55 = sub nsw i32 %52, %54
  %56 = bitcast i32 %55 to float
  %57 = sitofp i32 %54 to float
  %i.i.0.i57 = select i1 %50, float -2.300000e+01, float 0.000000e+00
  %58 = tail call float @llvm.fma.f32(float %57, float 0x3E80000000000000, float %i.i.0.i57) #0
  %59 = fadd float %56, -1.000000e+00
  %60 = tail call float @llvm.fma.f32(float %59, float 0xBFC0AA04E0000000, float 0x3FC2073EC0000000) #0
  %61 = tail call float @llvm.fma.f32(float %60, float %59, float 0xBFBF19B980000000) #0
  %62 = tail call float @llvm.fma.f32(float %61, float %59, float 0x3FC1E52AA0000000) #0
  %63 = tail call float @llvm.fma.f32(float %62, float %59, float 0xBFC55B1720000000) #0
  %64 = tail call float @llvm.fma.f32(float %63, float %59, float 0x3FC99DA160000000) #0
  %65 = tail call float @llvm.fma.f32(float %64, float %59, float 0xBFCFFFE440000000) #0
  %66 = tail call float @llvm.fma.f32(float %65, float %59, float 0x3FD5554F00000000) #0
  %67 = tail call float @llvm.fma.f32(float %66, float %59, float -5.000000e-01) #0
  %68 = fmul float %59, %67
  %69 = tail call float @llvm.fma.f32(float %68, float %59, float %59) #0
  %70 = tail call float @llvm.fma.f32(float %58, float 0x3FE62E4300000000, float %69) #0
  %71 = icmp ugt i32 %52, 2139095039
  %72 = tail call float @llvm.fma.f32(float %.02.i56, float 0x7FF0000000000000, float 0x7FF0000000000000) #0
  %r.i.0.i58 = select i1 %71, float %72, float %70
  %73 = fcmp oeq float %.02.i56, 0.000000e+00
  %r.i.1.i59 = select i1 %73, float 0xFFF0000000000000, float %r.i.0.i58
  %param_0.15929113 = getelementptr inbounds float, float addrspace(1)* %param_0.159, i64 20
  %74 = bitcast float addrspace(1)* %param_0.15929113 to <4 x float> addrspace(1)*
  %75 = load <4 x float>, <4 x float> addrspace(1)* %74, align 16, !invariant.load !66
  %param_0.15930176 = extractelement <4 x float> %75, i32 0
  %param_0.15930.1177 = extractelement <4 x float> %75, i32 1
  %param_0.15930.2178 = extractelement <4 x float> %75, i32 2
  %param_0.15930.3179 = extractelement <4 x float> %75, i32 3
  %add.138.i55 = fadd float %param_0.15930176, 0.000000e+00
  %add.138.i55.1 = fadd float %add.138.i55, %param_0.15930.1177
  %add.138.i55.2 = fadd float %add.138.i55.1, %param_0.15930.2178
  %add.138.i55.3 = fadd float %add.138.i55.2, %param_0.15930.3179
  %param_0.15929.4121 = getelementptr inbounds float, float addrspace(1)* %param_0.159, i64 24
  %76 = bitcast float addrspace(1)* %param_0.15929.4121 to <4 x float> addrspace(1)*
  %77 = load <4 x float>, <4 x float> addrspace(1)* %76, align 16, !invariant.load !66
  %param_0.15930.4180 = extractelement <4 x float> %77, i32 0
  %param_0.15930.5181 = extractelement <4 x float> %77, i32 1
  %param_0.15930.6182 = extractelement <4 x float> %77, i32 2
  %param_0.15930.7183 = extractelement <4 x float> %77, i32 3
  %add.138.i55.4 = fadd float %add.138.i55.3, %param_0.15930.4180
  %add.138.i55.5 = fadd float %add.138.i55.4, %param_0.15930.5181
  %add.138.i55.6 = fadd float %add.138.i55.5, %param_0.15930.6182
  %add.138.i55.7 = fadd float %add.138.i55.6, %param_0.15930.7183
  %param_0.15929.8129 = getelementptr inbounds float, float addrspace(1)* %param_0.159, i64 28
  %78 = bitcast float addrspace(1)* %param_0.15929.8129 to <4 x float> addrspace(1)*
  %79 = load <4 x float>, <4 x float> addrspace(1)* %78, align 16, !invariant.load !66
  %param_0.15930.8184 = extractelement <4 x float> %79, i32 0
  %param_0.15930.9185 = extractelement <4 x float> %79, i32 1
  %param_0.15942186 = extractelement <4 x float> %79, i32 2
  %param_0.15942.1187 = extractelement <4 x float> %79, i32 3
  %add.138.i55.8 = fadd float %add.138.i55.7, %param_0.15930.8184
  %add.138.i55.9 = fadd float %add.138.i55.8, %param_0.15930.9185
  %80 = fcmp olt float %add.138.i55.9, 0x3810000000000000
  %81 = fmul float %add.138.i55.9, 0x4160000000000000
  %.02.i51 = select i1 %80, float %81, float %add.138.i55.9
  %82 = bitcast float %.02.i51 to i32
  %83 = add nsw i32 %82, -1059760811
  %84 = and i32 %83, -8388608
  %85 = sub nsw i32 %82, %84
  %86 = bitcast i32 %85 to float
  %87 = sitofp i32 %84 to float
  %i.i.0.i52 = select i1 %80, float -2.300000e+01, float 0.000000e+00
  %88 = tail call float @llvm.fma.f32(float %87, float 0x3E80000000000000, float %i.i.0.i52) #0
  %89 = fadd float %86, -1.000000e+00
  %90 = tail call float @llvm.fma.f32(float %89, float 0xBFC0AA04E0000000, float 0x3FC2073EC0000000) #0
  %91 = tail call float @llvm.fma.f32(float %90, float %89, float 0xBFBF19B980000000) #0
  %92 = tail call float @llvm.fma.f32(float %91, float %89, float 0x3FC1E52AA0000000) #0
  %93 = tail call float @llvm.fma.f32(float %92, float %89, float 0xBFC55B1720000000) #0
  %94 = tail call float @llvm.fma.f32(float %93, float %89, float 0x3FC99DA160000000) #0
  %95 = tail call float @llvm.fma.f32(float %94, float %89, float 0xBFCFFFE440000000) #0
  %96 = tail call float @llvm.fma.f32(float %95, float %89, float 0x3FD5554F00000000) #0
  %97 = tail call float @llvm.fma.f32(float %96, float %89, float -5.000000e-01) #0
  %98 = fmul float %89, %97
  %99 = tail call float @llvm.fma.f32(float %98, float %89, float %89) #0
  %100 = tail call float @llvm.fma.f32(float %88, float 0x3FE62E4300000000, float %99) #0
  %101 = icmp ugt i32 %82, 2139095039
  %102 = tail call float @llvm.fma.f32(float %.02.i51, float 0x7FF0000000000000, float 0x7FF0000000000000) #0
  %r.i.0.i53 = select i1 %101, float %102, float %100
  %103 = fcmp oeq float %.02.i51, 0.000000e+00
  %r.i.1.i54 = select i1 %103, float 0xFFF0000000000000, float %r.i.0.i53
  %add.138.i50 = fadd float %param_0.15942186, 0.000000e+00
  %add.138.i50.1 = fadd float %add.138.i50, %param_0.15942.1187
  %param_0.15941.2139 = getelementptr inbounds float, float addrspace(1)* %param_0.159, i64 32
  %104 = bitcast float addrspace(1)* %param_0.15941.2139 to <2 x float> addrspace(1)*
  %105 = load <2 x float>, <2 x float> addrspace(1)* %104, align 8, !invariant.load !66
  %param_0.15942.2188 = extractelement <2 x float> %105, i32 0
  %param_0.15942.3189 = extractelement <2 x float> %105, i32 1
  %add.138.i50.2 = fadd float %add.138.i50.1, %param_0.15942.2188
  %add.138.i50.3 = fadd float %add.138.i50.2, %param_0.15942.3189
  %param_0.15941.4143 = getelementptr inbounds float, float addrspace(1)* %param_0.159, i64 34
  %106 = bitcast float addrspace(1)* %param_0.15941.4143 to <2 x float> addrspace(1)*
  %107 = load <2 x float>, <2 x float> addrspace(1)* %106, align 8, !invariant.load !66
  %param_0.15942.4190 = extractelement <2 x float> %107, i32 0
  %param_0.15942.5191 = extractelement <2 x float> %107, i32 1
  %add.138.i50.4 = fadd float %add.138.i50.3, %param_0.15942.4190
  %add.138.i50.5 = fadd float %add.138.i50.4, %param_0.15942.5191
  %param_0.15941.6147 = getelementptr inbounds float, float addrspace(1)* %param_0.159, i64 36
  %108 = bitcast float addrspace(1)* %param_0.15941.6147 to <2 x float> addrspace(1)*
  %109 = load <2 x float>, <2 x float> addrspace(1)* %108, align 8, !invariant.load !66
  %param_0.15942.6192 = extractelement <2 x float> %109, i32 0
  %param_0.15942.7193 = extractelement <2 x float> %109, i32 1
  %add.138.i50.6 = fadd float %add.138.i50.5, %param_0.15942.6192
  %add.138.i50.7 = fadd float %add.138.i50.6, %param_0.15942.7193
  %param_0.15941.8151 = getelementptr inbounds float, float addrspace(1)* %param_0.159, i64 38
  %110 = bitcast float addrspace(1)* %param_0.15941.8151 to <2 x float> addrspace(1)*
  %111 = load <2 x float>, <2 x float> addrspace(1)* %110, align 8, !invariant.load !66
  %param_0.15942.8194 = extractelement <2 x float> %111, i32 0
  %param_0.15942.9195 = extractelement <2 x float> %111, i32 1
  %add.138.i50.8 = fadd float %add.138.i50.7, %param_0.15942.8194
  %add.138.i50.9 = fadd float %add.138.i50.8, %param_0.15942.9195
  %112 = fcmp olt float %add.138.i50.9, 0x3810000000000000
  %113 = fmul float %add.138.i50.9, 0x4160000000000000
  %.02.i = select i1 %112, float %113, float %add.138.i50.9
  %114 = bitcast float %.02.i to i32
  %115 = add nsw i32 %114, -1059760811
  %116 = and i32 %115, -8388608
  %117 = sub nsw i32 %114, %116
  %118 = bitcast i32 %117 to float
  %119 = sitofp i32 %116 to float
  %i.i.0.i = select i1 %112, float -2.300000e+01, float 0.000000e+00
  %120 = tail call float @llvm.fma.f32(float %119, float 0x3E80000000000000, float %i.i.0.i) #0
  %121 = fadd float %118, -1.000000e+00
  %122 = tail call float @llvm.fma.f32(float %121, float 0xBFC0AA04E0000000, float 0x3FC2073EC0000000) #0
  %123 = tail call float @llvm.fma.f32(float %122, float %121, float 0xBFBF19B980000000) #0
  %124 = tail call float @llvm.fma.f32(float %123, float %121, float 0x3FC1E52AA0000000) #0
  %125 = tail call float @llvm.fma.f32(float %124, float %121, float 0xBFC55B1720000000) #0
  %126 = tail call float @llvm.fma.f32(float %125, float %121, float 0x3FC99DA160000000) #0
  %127 = tail call float @llvm.fma.f32(float %126, float %121, float 0xBFCFFFE440000000) #0
  %128 = tail call float @llvm.fma.f32(float %127, float %121, float 0x3FD5554F00000000) #0
  %129 = tail call float @llvm.fma.f32(float %128, float %121, float -5.000000e-01) #0
  %130 = fmul float %121, %129
  %131 = tail call float @llvm.fma.f32(float %130, float %121, float %121) #0
  %132 = tail call float @llvm.fma.f32(float %120, float 0x3FE62E4300000000, float %131) #0
  %133 = icmp ugt i32 %114, 2139095039
  %134 = tail call float @llvm.fma.f32(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #0
  %r.i.0.i = select i1 %133, float %134, float %132
  %135 = fcmp oeq float %.02.i, 0.000000e+00
  %r.i.1.i = select i1 %135, float 0xFFF0000000000000, float %r.i.0.i
  %136 = insertelement <4 x float> undef, float %r.i.1.i64, i32 0
  %137 = insertelement <4 x float> %136, float %r.i.1.i59, i32 1
  %138 = insertelement <4 x float> %137, float %r.i.1.i54, i32 2
  %139 = insertelement <4 x float> %138, float %r.i.1.i, i32 3
  %140 = bitcast float addrspace(1)* %39 to <4 x float> addrspace(1)*
  store <4 x float> %139, <4 x float> addrspace(1)* %140, align 16
  %141 = insertelement <4 x float> undef, float %add.138.i.9, i32 0
  %142 = insertelement <4 x float> %141, float %add.138.i60.9, i32 1
  %143 = insertelement <4 x float> %142, float %add.138.i55.9, i32 2
  %144 = insertelement <4 x float> %143, float %add.138.i50.9, i32 3
  %145 = bitcast float addrspace(1)* %41 to <4 x float> addrspace(1)*
  store <4 x float> %144, <4 x float> addrspace(1)* %145, align 16
  ret void

emit_mof_tuple-true:                              ; preds = %entry
  %146 = ptrtoint i8* %alloc19 to i64
  %147 = insertelement <2 x i64> undef, i64 %146, i32 0
  %148 = ptrtoint i8* %alloc20 to i64
  %149 = insertelement <2 x i64> %147, i64 %148, i32 1
  %sunkaddr = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf79, i64 1141056000
  %150 = bitcast i8 addrspace(1)* %sunkaddr to <2 x i64> addrspace(1)*
  store <2 x i64> %149, <2 x i64> addrspace(1)* %150, align 64
  br label %emit_mof_tuple-after
}

; Function Attrs: nounwind
define void @fusion_57(i8* noalias nocapture align 64 dereferenceable(2359296) %alloc3, i8* noalias nocapture readonly align 64 dereferenceable(819200) %alloc7, i8* noalias nocapture readonly align 64 dereferenceable(204800) %alloc14, i8* noalias nocapture readonly align 64 dereferenceable(5120) %alloc20, i8* noalias nocapture readonly align 64 dereferenceable(4096) %alloc25, i8* noalias nocapture readonly align 16 dereferenceable(4096) %alloc26, i8* noalias nocapture align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #0 {
entry:
  %temp_buf75 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc2673 = addrspacecast i8* %alloc26 to i8 addrspace(1)*
  %alloc2571 = addrspacecast i8* %alloc25 to i8 addrspace(1)*
  %alloc2069 = addrspacecast i8* %alloc20 to i8 addrspace(1)*
  %alloc1467 = addrspacecast i8* %alloc14 to i8 addrspace(1)*
  %alloc765 = addrspacecast i8* %alloc7 to i8 addrspace(1)*
  %alloc363 = addrspacecast i8* %alloc3 to i8 addrspace(1)*
  %fusion.57.raw1 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf75, i64 1140850688
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !70
  %thread_id.x = and i32 %0, 31
  %thread_id.y = lshr i32 %0, 5
  %1 = icmp ult i32 %thread_id.x, 10
  %2 = zext i32 %thread_id.x to i64
  br i1 %1, label %output_y_in_tile.loop_body.us.preheader, label %output_y_in_tile.loop_exit

output_y_in_tile.loop_body.us.preheader:          ; preds = %entry
  br label %output_y_in_tile.loop_body.us

output_y_in_tile.loop_body.us:                    ; preds = %output_y_in_tile.loop_body.us, %output_y_in_tile.loop_body.us.preheader
  %lsr.iv = phi i32 [ 0, %output_y_in_tile.loop_body.us.preheader ], [ %lsr.iv.next, %output_y_in_tile.loop_body.us ]
  %partial_reduction_result.0.060.us = phi float [ %add.186.i53.us, %output_y_in_tile.loop_body.us ], [ 0.000000e+00, %output_y_in_tile.loop_body.us.preheader ]
  %3 = bitcast i8 addrspace(1)* %alloc2069 to [1024 x float] addrspace(1)*
  %4 = bitcast i8 addrspace(1)* %alloc765 to [1024 x [10 x float]] addrspace(1)*
  %5 = bitcast i8 addrspace(1)* %alloc2673 to [1024 x i32] addrspace(1)*
  %6 = bitcast i8 addrspace(1)* %alloc2571 to [1024 x float] addrspace(1)*
  %7 = bitcast i8 addrspace(1)* %alloc1467 to [1024 x [10 x float]] addrspace(1)*
  %8 = bitcast i8 addrspace(1)* %alloc363 to [1024 x [10 x float]] addrspace(1)*
  %9 = or i32 %lsr.iv, %thread_id.y
  %10 = zext i32 %9 to i64
  %param_0.161.us = getelementptr inbounds [1024 x [10 x float]], [1024 x [10 x float]] addrspace(1)* %7, i64 0, i64 %10, i64 %2
  %param_0.1616.us = load float, float addrspace(1)* %param_0.161.us, align 4, !invariant.load !66
  %param_1.260.us = getelementptr inbounds [1024 x float], [1024 x float] addrspace(1)* %6, i64 0, i64 %10
  %param_1.2607.us = load float, float addrspace(1)* %param_1.260.us, align 4, !invariant.load !66
  %divide.34.clone.1.us = fdiv float %param_0.1616.us, %param_1.2607.us
  %compare.40.clone.1.us = fcmp ole float %divide.34.clone.1.us, 0x3FEFFFFFC0000000
  %11 = tail call float @llvm.minnum.f32(float %divide.34.clone.1.us, float 0x3FEFFFFFC0000000)
  %compare.39.clone.1.us = fcmp oge float %11, 0x3E7AD7F2A0000000
  %.inv.us = fcmp ogt float %divide.34.clone.1.us, 0x3E7AD7F2A0000000
  %12 = select i1 %.inv.us, float %divide.34.clone.1.us, float 0x3E7AD7F2A0000000
  %.inv45.us = fcmp olt float %12, 0x3FEFFFFFC0000000
  %13 = select i1 %.inv45.us, float %12, float 0x3FEFFFFFC0000000
  %param_3.165.us = getelementptr inbounds [1024 x [10 x float]], [1024 x [10 x float]] addrspace(1)* %4, i64 0, i64 %10, i64 %2
  %param_3.1658.us = load float, float addrspace(1)* %param_3.165.us, align 4, !invariant.load !66
  %param_4.137.us = getelementptr inbounds [1024 x float], [1024 x float] addrspace(1)* %3, i64 0, i64 %10
  %param_4.1379.us = load float, float addrspace(1)* %param_4.137.us, align 4, !invariant.load !66
  %divide.32.clone.1.us = fdiv float %param_3.1658.us, %param_4.1379.us
  %param_2.302.us = getelementptr inbounds [1024 x i32], [1024 x i32] addrspace(1)* %5, i64 0, i64 %10
  %param_2.30210.us = load i32, i32 addrspace(1)* %param_2.302.us, align 4, !invariant.load !66
  %14 = sitofp i32 %param_2.30210.us to float
  %15 = fptosi float %14 to i64
  %16 = icmp eq i64 %15, %2
  %17 = select i1 %16, float 1.000000e+00, float 0.000000e+00
  %18 = icmp ult i64 %15, 10
  %19 = select i1 %18, float 0.000000e+00, float 0x7FF8000000000000
  %add.40.clone.1.us = fadd float %17, %19
  %subtract.65.clone.1.us = fsub float %divide.32.clone.1.us, %add.40.clone.1.us
  %multiply.53.clone.1.us = fmul float %subtract.65.clone.1.us, 0x3F50000000000000
  %20 = and i1 %compare.40.clone.1.us, %compare.39.clone.1.us
  %param_0.16112.us = getelementptr inbounds [1024 x [10 x float]], [1024 x [10 x float]] addrspace(1)* %7, i64 0, i64 %10, i64 0
  %21 = bitcast float addrspace(1)* %param_0.16112.us to <2 x float> addrspace(1)*
  %22 = load <2 x float>, <2 x float> addrspace(1)* %21, align 8, !invariant.load !66
  %param_0.16113.us95 = extractelement <2 x float> %22, i32 0
  %param_0.16113.us.196 = extractelement <2 x float> %22, i32 1
  %divide.34.clone.116.us = fdiv float %param_0.16113.us95, %param_1.2607.us
  %compare.40.clone.117.us = fcmp ole float %divide.34.clone.116.us, 0x3FEFFFFFC0000000
  %23 = tail call float @llvm.minnum.f32(float %divide.34.clone.116.us, float 0x3FEFFFFFC0000000)
  %compare.39.clone.118.us = fcmp oge float %23, 0x3E7AD7F2A0000000
  %.inv47.us = fcmp ogt float %divide.34.clone.116.us, 0x3E7AD7F2A0000000
  %24 = select i1 %.inv47.us, float %divide.34.clone.116.us, float 0x3E7AD7F2A0000000
  %.inv48.us = fcmp olt float %24, 0x3FEFFFFFC0000000
  %25 = select i1 %.inv48.us, float %24, float 0x3FEFFFFFC0000000
  %divide.33.clone.119.us = fdiv float 1.000000e+00, %25
  %param_3.16520.us = getelementptr inbounds [1024 x [10 x float]], [1024 x [10 x float]] addrspace(1)* %4, i64 0, i64 %10, i64 0
  %26 = bitcast float addrspace(1)* %param_3.16520.us to <2 x float> addrspace(1)*
  %27 = load <2 x float>, <2 x float> addrspace(1)* %26, align 8, !invariant.load !66
  %param_3.16521.us105 = extractelement <2 x float> %27, i32 0
  %param_3.16521.us.1106 = extractelement <2 x float> %27, i32 1
  %divide.32.clone.124.us = fdiv float %param_3.16521.us105, %param_4.1379.us
  %28 = icmp eq i64 %15, 0
  %29 = select i1 %28, float 1.000000e+00, float 0.000000e+00
  %add.42.clone.1.us = fadd float %19, %29
  %subtract.67.clone.1.us = fsub float %divide.32.clone.124.us, %add.42.clone.1.us
  %multiply.59.clone.1.us = fmul float %subtract.67.clone.1.us, 0x3F50000000000000
  %multiply.58.clone.1.us = fmul float %multiply.59.clone.1.us, %divide.33.clone.119.us
  %30 = and i1 %compare.40.clone.117.us, %compare.39.clone.118.us
  %31 = select i1 %30, float %multiply.58.clone.1.us, float 0.000000e+00
  %multiply.57.clone.1.us = fmul float %divide.34.clone.116.us, %31
  %add.173.i.us = fadd float %multiply.57.clone.1.us, 0.000000e+00
  %divide.34.clone.116.us.1 = fdiv float %param_0.16113.us.196, %param_1.2607.us
  %compare.40.clone.117.us.1 = fcmp ole float %divide.34.clone.116.us.1, 0x3FEFFFFFC0000000
  %32 = tail call float @llvm.minnum.f32(float %divide.34.clone.116.us.1, float 0x3FEFFFFFC0000000)
  %compare.39.clone.118.us.1 = fcmp oge float %32, 0x3E7AD7F2A0000000
  %.inv47.us.1 = fcmp ogt float %divide.34.clone.116.us.1, 0x3E7AD7F2A0000000
  %33 = select i1 %.inv47.us.1, float %divide.34.clone.116.us.1, float 0x3E7AD7F2A0000000
  %.inv48.us.1 = fcmp olt float %33, 0x3FEFFFFFC0000000
  %34 = select i1 %.inv48.us.1, float %33, float 0x3FEFFFFFC0000000
  %divide.33.clone.119.us.1 = fdiv float 1.000000e+00, %34
  %divide.32.clone.124.us.1 = fdiv float %param_3.16521.us.1106, %param_4.1379.us
  %35 = icmp eq i64 %15, 1
  %36 = select i1 %35, float 1.000000e+00, float 0.000000e+00
  %add.42.clone.1.us.1 = fadd float %19, %36
  %subtract.67.clone.1.us.1 = fsub float %divide.32.clone.124.us.1, %add.42.clone.1.us.1
  %multiply.59.clone.1.us.1 = fmul float %subtract.67.clone.1.us.1, 0x3F50000000000000
  %multiply.58.clone.1.us.1 = fmul float %multiply.59.clone.1.us.1, %divide.33.clone.119.us.1
  %37 = and i1 %compare.40.clone.117.us.1, %compare.39.clone.118.us.1
  %38 = select i1 %37, float %multiply.58.clone.1.us.1, float 0.000000e+00
  %multiply.57.clone.1.us.1 = fmul float %divide.34.clone.116.us.1, %38
  %add.173.i.us.1 = fadd float %add.173.i.us, %multiply.57.clone.1.us.1
  %param_0.16112.us.279 = getelementptr inbounds float, float addrspace(1)* %param_0.16112.us, i64 2
  %39 = bitcast float addrspace(1)* %param_0.16112.us.279 to <2 x float> addrspace(1)*
  %40 = load <2 x float>, <2 x float> addrspace(1)* %39, align 8, !invariant.load !66
  %param_0.16113.us.297 = extractelement <2 x float> %40, i32 0
  %param_0.16113.us.398 = extractelement <2 x float> %40, i32 1
  %divide.34.clone.116.us.2 = fdiv float %param_0.16113.us.297, %param_1.2607.us
  %compare.40.clone.117.us.2 = fcmp ole float %divide.34.clone.116.us.2, 0x3FEFFFFFC0000000
  %41 = tail call float @llvm.minnum.f32(float %divide.34.clone.116.us.2, float 0x3FEFFFFFC0000000)
  %compare.39.clone.118.us.2 = fcmp oge float %41, 0x3E7AD7F2A0000000
  %.inv47.us.2 = fcmp ogt float %divide.34.clone.116.us.2, 0x3E7AD7F2A0000000
  %42 = select i1 %.inv47.us.2, float %divide.34.clone.116.us.2, float 0x3E7AD7F2A0000000
  %.inv48.us.2 = fcmp olt float %42, 0x3FEFFFFFC0000000
  %43 = select i1 %.inv48.us.2, float %42, float 0x3FEFFFFFC0000000
  %divide.33.clone.119.us.2 = fdiv float 1.000000e+00, %43
  %param_3.16520.us.280 = getelementptr inbounds float, float addrspace(1)* %param_3.16520.us, i64 2
  %44 = bitcast float addrspace(1)* %param_3.16520.us.280 to <2 x float> addrspace(1)*
  %45 = load <2 x float>, <2 x float> addrspace(1)* %44, align 8, !invariant.load !66
  %param_3.16521.us.2107 = extractelement <2 x float> %45, i32 0
  %param_3.16521.us.3108 = extractelement <2 x float> %45, i32 1
  %divide.32.clone.124.us.2 = fdiv float %param_3.16521.us.2107, %param_4.1379.us
  %46 = icmp eq i64 %15, 2
  %47 = select i1 %46, float 1.000000e+00, float 0.000000e+00
  %add.42.clone.1.us.2 = fadd float %19, %47
  %subtract.67.clone.1.us.2 = fsub float %divide.32.clone.124.us.2, %add.42.clone.1.us.2
  %multiply.59.clone.1.us.2 = fmul float %subtract.67.clone.1.us.2, 0x3F50000000000000
  %multiply.58.clone.1.us.2 = fmul float %multiply.59.clone.1.us.2, %divide.33.clone.119.us.2
  %48 = and i1 %compare.40.clone.117.us.2, %compare.39.clone.118.us.2
  %49 = select i1 %48, float %multiply.58.clone.1.us.2, float 0.000000e+00
  %multiply.57.clone.1.us.2 = fmul float %divide.34.clone.116.us.2, %49
  %add.173.i.us.2 = fadd float %add.173.i.us.1, %multiply.57.clone.1.us.2
  %divide.34.clone.116.us.3 = fdiv float %param_0.16113.us.398, %param_1.2607.us
  %compare.40.clone.117.us.3 = fcmp ole float %divide.34.clone.116.us.3, 0x3FEFFFFFC0000000
  %50 = tail call float @llvm.minnum.f32(float %divide.34.clone.116.us.3, float 0x3FEFFFFFC0000000)
  %compare.39.clone.118.us.3 = fcmp oge float %50, 0x3E7AD7F2A0000000
  %.inv47.us.3 = fcmp ogt float %divide.34.clone.116.us.3, 0x3E7AD7F2A0000000
  %51 = select i1 %.inv47.us.3, float %divide.34.clone.116.us.3, float 0x3E7AD7F2A0000000
  %.inv48.us.3 = fcmp olt float %51, 0x3FEFFFFFC0000000
  %52 = select i1 %.inv48.us.3, float %51, float 0x3FEFFFFFC0000000
  %divide.33.clone.119.us.3 = fdiv float 1.000000e+00, %52
  %divide.32.clone.124.us.3 = fdiv float %param_3.16521.us.3108, %param_4.1379.us
  %53 = icmp eq i64 %15, 3
  %54 = select i1 %53, float 1.000000e+00, float 0.000000e+00
  %add.42.clone.1.us.3 = fadd float %19, %54
  %subtract.67.clone.1.us.3 = fsub float %divide.32.clone.124.us.3, %add.42.clone.1.us.3
  %multiply.59.clone.1.us.3 = fmul float %subtract.67.clone.1.us.3, 0x3F50000000000000
  %multiply.58.clone.1.us.3 = fmul float %multiply.59.clone.1.us.3, %divide.33.clone.119.us.3
  %55 = and i1 %compare.40.clone.117.us.3, %compare.39.clone.118.us.3
  %56 = select i1 %55, float %multiply.58.clone.1.us.3, float 0.000000e+00
  %multiply.57.clone.1.us.3 = fmul float %divide.34.clone.116.us.3, %56
  %add.173.i.us.3 = fadd float %add.173.i.us.2, %multiply.57.clone.1.us.3
  %param_0.16112.us.483 = getelementptr inbounds float, float addrspace(1)* %param_0.16112.us, i64 4
  %57 = bitcast float addrspace(1)* %param_0.16112.us.483 to <2 x float> addrspace(1)*
  %58 = load <2 x float>, <2 x float> addrspace(1)* %57, align 8, !invariant.load !66
  %param_0.16113.us.499 = extractelement <2 x float> %58, i32 0
  %param_0.16113.us.5100 = extractelement <2 x float> %58, i32 1
  %divide.34.clone.116.us.4 = fdiv float %param_0.16113.us.499, %param_1.2607.us
  %compare.40.clone.117.us.4 = fcmp ole float %divide.34.clone.116.us.4, 0x3FEFFFFFC0000000
  %59 = tail call float @llvm.minnum.f32(float %divide.34.clone.116.us.4, float 0x3FEFFFFFC0000000)
  %compare.39.clone.118.us.4 = fcmp oge float %59, 0x3E7AD7F2A0000000
  %.inv47.us.4 = fcmp ogt float %divide.34.clone.116.us.4, 0x3E7AD7F2A0000000
  %60 = select i1 %.inv47.us.4, float %divide.34.clone.116.us.4, float 0x3E7AD7F2A0000000
  %.inv48.us.4 = fcmp olt float %60, 0x3FEFFFFFC0000000
  %61 = select i1 %.inv48.us.4, float %60, float 0x3FEFFFFFC0000000
  %divide.33.clone.119.us.4 = fdiv float 1.000000e+00, %61
  %param_3.16520.us.484 = getelementptr inbounds float, float addrspace(1)* %param_3.16520.us, i64 4
  %62 = bitcast float addrspace(1)* %param_3.16520.us.484 to <2 x float> addrspace(1)*
  %63 = load <2 x float>, <2 x float> addrspace(1)* %62, align 8, !invariant.load !66
  %param_3.16521.us.4109 = extractelement <2 x float> %63, i32 0
  %param_3.16521.us.5110 = extractelement <2 x float> %63, i32 1
  %divide.32.clone.124.us.4 = fdiv float %param_3.16521.us.4109, %param_4.1379.us
  %64 = icmp eq i64 %15, 4
  %65 = select i1 %64, float 1.000000e+00, float 0.000000e+00
  %add.42.clone.1.us.4 = fadd float %19, %65
  %subtract.67.clone.1.us.4 = fsub float %divide.32.clone.124.us.4, %add.42.clone.1.us.4
  %multiply.59.clone.1.us.4 = fmul float %subtract.67.clone.1.us.4, 0x3F50000000000000
  %multiply.58.clone.1.us.4 = fmul float %multiply.59.clone.1.us.4, %divide.33.clone.119.us.4
  %66 = and i1 %compare.40.clone.117.us.4, %compare.39.clone.118.us.4
  %67 = select i1 %66, float %multiply.58.clone.1.us.4, float 0.000000e+00
  %multiply.57.clone.1.us.4 = fmul float %divide.34.clone.116.us.4, %67
  %add.173.i.us.4 = fadd float %add.173.i.us.3, %multiply.57.clone.1.us.4
  %divide.34.clone.116.us.5 = fdiv float %param_0.16113.us.5100, %param_1.2607.us
  %compare.40.clone.117.us.5 = fcmp ole float %divide.34.clone.116.us.5, 0x3FEFFFFFC0000000
  %68 = tail call float @llvm.minnum.f32(float %divide.34.clone.116.us.5, float 0x3FEFFFFFC0000000)
  %compare.39.clone.118.us.5 = fcmp oge float %68, 0x3E7AD7F2A0000000
  %.inv47.us.5 = fcmp ogt float %divide.34.clone.116.us.5, 0x3E7AD7F2A0000000
  %69 = select i1 %.inv47.us.5, float %divide.34.clone.116.us.5, float 0x3E7AD7F2A0000000
  %.inv48.us.5 = fcmp olt float %69, 0x3FEFFFFFC0000000
  %70 = select i1 %.inv48.us.5, float %69, float 0x3FEFFFFFC0000000
  %divide.33.clone.119.us.5 = fdiv float 1.000000e+00, %70
  %divide.32.clone.124.us.5 = fdiv float %param_3.16521.us.5110, %param_4.1379.us
  %71 = icmp eq i64 %15, 5
  %72 = select i1 %71, float 1.000000e+00, float 0.000000e+00
  %add.42.clone.1.us.5 = fadd float %19, %72
  %subtract.67.clone.1.us.5 = fsub float %divide.32.clone.124.us.5, %add.42.clone.1.us.5
  %multiply.59.clone.1.us.5 = fmul float %subtract.67.clone.1.us.5, 0x3F50000000000000
  %multiply.58.clone.1.us.5 = fmul float %multiply.59.clone.1.us.5, %divide.33.clone.119.us.5
  %73 = and i1 %compare.40.clone.117.us.5, %compare.39.clone.118.us.5
  %74 = select i1 %73, float %multiply.58.clone.1.us.5, float 0.000000e+00
  %multiply.57.clone.1.us.5 = fmul float %divide.34.clone.116.us.5, %74
  %add.173.i.us.5 = fadd float %add.173.i.us.4, %multiply.57.clone.1.us.5
  %param_0.16112.us.687 = getelementptr inbounds float, float addrspace(1)* %param_0.16112.us, i64 6
  %75 = bitcast float addrspace(1)* %param_0.16112.us.687 to <2 x float> addrspace(1)*
  %76 = load <2 x float>, <2 x float> addrspace(1)* %75, align 8, !invariant.load !66
  %param_0.16113.us.6101 = extractelement <2 x float> %76, i32 0
  %param_0.16113.us.7102 = extractelement <2 x float> %76, i32 1
  %divide.34.clone.116.us.6 = fdiv float %param_0.16113.us.6101, %param_1.2607.us
  %compare.40.clone.117.us.6 = fcmp ole float %divide.34.clone.116.us.6, 0x3FEFFFFFC0000000
  %77 = tail call float @llvm.minnum.f32(float %divide.34.clone.116.us.6, float 0x3FEFFFFFC0000000)
  %compare.39.clone.118.us.6 = fcmp oge float %77, 0x3E7AD7F2A0000000
  %.inv47.us.6 = fcmp ogt float %divide.34.clone.116.us.6, 0x3E7AD7F2A0000000
  %78 = select i1 %.inv47.us.6, float %divide.34.clone.116.us.6, float 0x3E7AD7F2A0000000
  %.inv48.us.6 = fcmp olt float %78, 0x3FEFFFFFC0000000
  %79 = select i1 %.inv48.us.6, float %78, float 0x3FEFFFFFC0000000
  %divide.33.clone.119.us.6 = fdiv float 1.000000e+00, %79
  %param_3.16520.us.688 = getelementptr inbounds float, float addrspace(1)* %param_3.16520.us, i64 6
  %80 = bitcast float addrspace(1)* %param_3.16520.us.688 to <2 x float> addrspace(1)*
  %81 = load <2 x float>, <2 x float> addrspace(1)* %80, align 8, !invariant.load !66
  %param_3.16521.us.6111 = extractelement <2 x float> %81, i32 0
  %param_3.16521.us.7112 = extractelement <2 x float> %81, i32 1
  %divide.32.clone.124.us.6 = fdiv float %param_3.16521.us.6111, %param_4.1379.us
  %82 = icmp eq i64 %15, 6
  %83 = select i1 %82, float 1.000000e+00, float 0.000000e+00
  %add.42.clone.1.us.6 = fadd float %19, %83
  %subtract.67.clone.1.us.6 = fsub float %divide.32.clone.124.us.6, %add.42.clone.1.us.6
  %multiply.59.clone.1.us.6 = fmul float %subtract.67.clone.1.us.6, 0x3F50000000000000
  %multiply.58.clone.1.us.6 = fmul float %multiply.59.clone.1.us.6, %divide.33.clone.119.us.6
  %84 = and i1 %compare.40.clone.117.us.6, %compare.39.clone.118.us.6
  %85 = select i1 %84, float %multiply.58.clone.1.us.6, float 0.000000e+00
  %multiply.57.clone.1.us.6 = fmul float %divide.34.clone.116.us.6, %85
  %add.173.i.us.6 = fadd float %add.173.i.us.5, %multiply.57.clone.1.us.6
  %divide.34.clone.116.us.7 = fdiv float %param_0.16113.us.7102, %param_1.2607.us
  %compare.40.clone.117.us.7 = fcmp ole float %divide.34.clone.116.us.7, 0x3FEFFFFFC0000000
  %86 = tail call float @llvm.minnum.f32(float %divide.34.clone.116.us.7, float 0x3FEFFFFFC0000000)
  %compare.39.clone.118.us.7 = fcmp oge float %86, 0x3E7AD7F2A0000000
  %.inv47.us.7 = fcmp ogt float %divide.34.clone.116.us.7, 0x3E7AD7F2A0000000
  %87 = select i1 %.inv47.us.7, float %divide.34.clone.116.us.7, float 0x3E7AD7F2A0000000
  %.inv48.us.7 = fcmp olt float %87, 0x3FEFFFFFC0000000
  %88 = select i1 %.inv48.us.7, float %87, float 0x3FEFFFFFC0000000
  %divide.33.clone.119.us.7 = fdiv float 1.000000e+00, %88
  %divide.32.clone.124.us.7 = fdiv float %param_3.16521.us.7112, %param_4.1379.us
  %89 = icmp eq i64 %15, 7
  %90 = select i1 %89, float 1.000000e+00, float 0.000000e+00
  %add.42.clone.1.us.7 = fadd float %19, %90
  %subtract.67.clone.1.us.7 = fsub float %divide.32.clone.124.us.7, %add.42.clone.1.us.7
  %multiply.59.clone.1.us.7 = fmul float %subtract.67.clone.1.us.7, 0x3F50000000000000
  %multiply.58.clone.1.us.7 = fmul float %multiply.59.clone.1.us.7, %divide.33.clone.119.us.7
  %91 = and i1 %compare.40.clone.117.us.7, %compare.39.clone.118.us.7
  %92 = select i1 %91, float %multiply.58.clone.1.us.7, float 0.000000e+00
  %multiply.57.clone.1.us.7 = fmul float %divide.34.clone.116.us.7, %92
  %add.173.i.us.7 = fadd float %add.173.i.us.6, %multiply.57.clone.1.us.7
  %param_0.16112.us.891 = getelementptr inbounds float, float addrspace(1)* %param_0.16112.us, i64 8
  %93 = bitcast float addrspace(1)* %param_0.16112.us.891 to <2 x float> addrspace(1)*
  %94 = load <2 x float>, <2 x float> addrspace(1)* %93, align 8, !invariant.load !66
  %param_0.16113.us.8103 = extractelement <2 x float> %94, i32 0
  %param_0.16113.us.9104 = extractelement <2 x float> %94, i32 1
  %divide.34.clone.116.us.8 = fdiv float %param_0.16113.us.8103, %param_1.2607.us
  %compare.40.clone.117.us.8 = fcmp ole float %divide.34.clone.116.us.8, 0x3FEFFFFFC0000000
  %95 = tail call float @llvm.minnum.f32(float %divide.34.clone.116.us.8, float 0x3FEFFFFFC0000000)
  %compare.39.clone.118.us.8 = fcmp oge float %95, 0x3E7AD7F2A0000000
  %.inv47.us.8 = fcmp ogt float %divide.34.clone.116.us.8, 0x3E7AD7F2A0000000
  %96 = select i1 %.inv47.us.8, float %divide.34.clone.116.us.8, float 0x3E7AD7F2A0000000
  %.inv48.us.8 = fcmp olt float %96, 0x3FEFFFFFC0000000
  %97 = select i1 %.inv48.us.8, float %96, float 0x3FEFFFFFC0000000
  %divide.33.clone.119.us.8 = fdiv float 1.000000e+00, %97
  %param_3.16520.us.892 = getelementptr inbounds float, float addrspace(1)* %param_3.16520.us, i64 8
  %98 = bitcast float addrspace(1)* %param_3.16520.us.892 to <2 x float> addrspace(1)*
  %99 = load <2 x float>, <2 x float> addrspace(1)* %98, align 8, !invariant.load !66
  %param_3.16521.us.8113 = extractelement <2 x float> %99, i32 0
  %param_3.16521.us.9114 = extractelement <2 x float> %99, i32 1
  %divide.32.clone.124.us.8 = fdiv float %param_3.16521.us.8113, %param_4.1379.us
  %100 = icmp eq i64 %15, 8
  %101 = select i1 %100, float 1.000000e+00, float 0.000000e+00
  %add.42.clone.1.us.8 = fadd float %19, %101
  %subtract.67.clone.1.us.8 = fsub float %divide.32.clone.124.us.8, %add.42.clone.1.us.8
  %multiply.59.clone.1.us.8 = fmul float %subtract.67.clone.1.us.8, 0x3F50000000000000
  %multiply.58.clone.1.us.8 = fmul float %multiply.59.clone.1.us.8, %divide.33.clone.119.us.8
  %102 = and i1 %compare.40.clone.117.us.8, %compare.39.clone.118.us.8
  %103 = select i1 %102, float %multiply.58.clone.1.us.8, float 0.000000e+00
  %multiply.57.clone.1.us.8 = fmul float %divide.34.clone.116.us.8, %103
  %add.173.i.us.8 = fadd float %add.173.i.us.7, %multiply.57.clone.1.us.8
  %divide.34.clone.116.us.9 = fdiv float %param_0.16113.us.9104, %param_1.2607.us
  %compare.40.clone.117.us.9 = fcmp ole float %divide.34.clone.116.us.9, 0x3FEFFFFFC0000000
  %104 = tail call float @llvm.minnum.f32(float %divide.34.clone.116.us.9, float 0x3FEFFFFFC0000000)
  %compare.39.clone.118.us.9 = fcmp oge float %104, 0x3E7AD7F2A0000000
  %.inv47.us.9 = fcmp ogt float %divide.34.clone.116.us.9, 0x3E7AD7F2A0000000
  %105 = select i1 %.inv47.us.9, float %divide.34.clone.116.us.9, float 0x3E7AD7F2A0000000
  %.inv48.us.9 = fcmp olt float %105, 0x3FEFFFFFC0000000
  %106 = select i1 %.inv48.us.9, float %105, float 0x3FEFFFFFC0000000
  %divide.33.clone.119.us.9 = fdiv float 1.000000e+00, %106
  %divide.32.clone.124.us.9 = fdiv float %param_3.16521.us.9114, %param_4.1379.us
  %107 = icmp eq i64 %15, 9
  %108 = select i1 %107, float 1.000000e+00, float 0.000000e+00
  %add.42.clone.1.us.9 = fadd float %19, %108
  %subtract.67.clone.1.us.9 = fsub float %divide.32.clone.124.us.9, %add.42.clone.1.us.9
  %multiply.59.clone.1.us.9 = fmul float %subtract.67.clone.1.us.9, 0x3F50000000000000
  %multiply.58.clone.1.us.9 = fmul float %multiply.59.clone.1.us.9, %divide.33.clone.119.us.9
  %109 = and i1 %compare.40.clone.117.us.9, %compare.39.clone.118.us.9
  %110 = select i1 %109, float %multiply.58.clone.1.us.9, float 0.000000e+00
  %multiply.57.clone.1.us.9 = fmul float %divide.34.clone.116.us.9, %110
  %add.173.i.us.9 = fadd float %add.173.i.us.8, %multiply.57.clone.1.us.9
  %divide.33.clone.1.us = fdiv float 1.000000e+00, %13
  %multiply.52.clone.1.us = fmul float %divide.33.clone.1.us, %multiply.53.clone.1.us
  %111 = select i1 %20, float %multiply.52.clone.1.us, float 0.000000e+00
  %subtract.33.clone.1.us = fsub float %111, %add.173.i.us.9
  %multiply.41.clone.1.us = fmul float %divide.34.clone.1.us, %subtract.33.clone.1.us
  %add.186.i53.us = fadd float %partial_reduction_result.0.060.us, %multiply.41.clone.1.us
  %112 = getelementptr inbounds [1024 x [10 x float]], [1024 x [10 x float]] addrspace(1)* %8, i64 0, i64 %10, i64 %2
  store float %multiply.41.clone.1.us, float addrspace(1)* %112, align 4
  %lsr.iv.next = add nuw nsw i32 %lsr.iv, 32
  %exitcond = icmp eq i32 %lsr.iv.next, 1024
  br i1 %exitcond, label %output_y_in_tile.loop_exit, label %output_y_in_tile.loop_body.us, !llvm.loop !77

reduce-group-0-after:                             ; preds = %reduction_atomic_update-true, %output_y_in_tile.loop_exit
  ret void

output_y_in_tile.loop_exit:                       ; preds = %output_y_in_tile.loop_body.us, %entry
  %partial_reduction_result.0.0.lcssa = phi float [ 0.000000e+00, %entry ], [ %add.186.i53.us, %output_y_in_tile.loop_body.us ]
  %113 = trunc i64 %2 to i32
  %114 = bitcast i8 addrspace(1)* %fusion.57.raw1 to [10 x float] addrspace(1)*
  %115 = zext i32 %thread_id.y to i64
  %116 = getelementptr inbounds [1 x [32 x [33 x float]]], [1 x [32 x [33 x float]]] addrspace(3)* @shared_cache_0, i64 0, i64 0, i64 %2, i64 %115
  store float %partial_reduction_result.0.0.lcssa, float addrspace(3)* %116, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [32 x [33 x float]]], [1 x [32 x [33 x float]]] addrspace(3)* @shared_cache_0, i64 0, i64 0, i64 %115, i64 %2
  %partial_reduction_result = load float, float addrspace(3)* %shmem_transposed_addr, align 4
  %117 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result, i32 16, i32 31)
  %add.186.i = fadd float %partial_reduction_result, %117
  %118 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.186.i, i32 8, i32 31)
  %add.186.i57 = fadd float %add.186.i, %118
  %119 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.186.i57, i32 4, i32 31)
  %add.186.i56 = fadd float %add.186.i57, %119
  %120 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.186.i56, i32 2, i32 31)
  %add.186.i55 = fadd float %add.186.i56, %120
  %121 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.186.i55, i32 1, i32 31)
  %add.186.i54 = fadd float %add.186.i55, %121
  store float %add.186.i54, float addrspace(3)* %shmem_transposed_addr, align 4
  %122 = icmp ult i32 %0, 320
  %123 = icmp eq i32 %113, 0
  %124 = and i1 %122, %123
  %output_element_address = getelementptr inbounds [10 x float], [10 x float] addrspace(1)* %114, i64 0, i64 %115
  br i1 %124, label %reduction_atomic_update-true, label %reduce-group-0-after

reduction_atomic_update-true:                     ; preds = %output_y_in_tile.loop_exit
  %125 = atomicrmw fadd float addrspace(1)* %output_element_address, float %add.186.i54 seq_cst
  br label %reduce-group-0-after
}

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.minnum.f32(float, float) #4

; Function Attrs: convergent nounwind
declare void @llvm.nvvm.barrier0() #5

; Function Attrs: convergent inaccessiblememonly nounwind
declare float @llvm.nvvm.shfl.sync.down.f32(i32, float, i32, i32) #6

; Function Attrs: nofree nounwind
define void @fusion_41(i8* noalias nocapture readonly align 64 dereferenceable(204800) %alloc13, i8* noalias nocapture readonly align 64 dereferenceable(5120) %alloc19, i8* noalias nocapture readonly align 64 dereferenceable(5120) %alloc21, i8* noalias nocapture align 64 dereferenceable(4096) %alloc25, i8* noalias nocapture readonly align 16 dereferenceable(4096) %alloc26, i8* noalias nocapture readnone align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #3 {
entry:
  %alloc26102 = addrspacecast i8* %alloc26 to i8 addrspace(1)*
  %alloc25100 = addrspacecast i8* %alloc25 to i8 addrspace(1)*
  %alloc2198 = addrspacecast i8* %alloc21 to i8 addrspace(1)*
  %alloc1996 = addrspacecast i8* %alloc19 to i8 addrspace(1)*
  %alloc1394 = addrspacecast i8* %alloc13 to i8 addrspace(1)*
  %get-tuple-element.118.typed = bitcast i8 addrspace(1)* %alloc1996 to [1024 x float] addrspace(1)*
  %fusion.47.typed = bitcast i8 addrspace(1)* %alloc1394 to [1024 x [10 x float]] addrspace(1)*
  %reduce.129.typed = bitcast i8 addrspace(1)* %alloc2198 to [1024 x float] addrspace(1)*
  %arg0.1.typed = bitcast i8 addrspace(1)* %alloc26102 to [1024 x i32] addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !72
  %linear_index_base = shl nuw nsw i32 %0, 2
  %1 = zext i32 %linear_index_base to i64
  %param_3.106 = getelementptr [1024 x i32], [1024 x i32] addrspace(1)* %arg0.1.typed, i64 0, i64 %1
  %2 = bitcast i32 addrspace(1)* %param_3.106 to <4 x i32> addrspace(1)*
  %3 = load <4 x i32>, <4 x i32> addrspace(1)* %2, align 16, !invariant.load !66
  %param_3.1064196 = extractelement <4 x i32> %3, i32 0
  %param_3.10617197 = extractelement <4 x i32> %3, i32 1
  %param_3.10639198 = extractelement <4 x i32> %3, i32 2
  %param_3.10661199 = extractelement <4 x i32> %3, i32 3
  %4 = sitofp i32 %param_3.1064196 to float
  %5 = fptosi float %4 to i64
  %6 = icmp ult i64 %5, 10
  %7 = select i1 %6, float 0.000000e+00, float 0x7FF8000000000000
  %param_2.216 = getelementptr [1024 x float], [1024 x float] addrspace(1)* %reduce.129.typed, i64 0, i64 %1
  %8 = bitcast float addrspace(1)* %param_2.216 to <4 x float> addrspace(1)*
  %9 = load <4 x float>, <4 x float> addrspace(1)* %8, align 16, !invariant.load !66
  %param_2.2166200 = extractelement <4 x float> %9, i32 0
  %param_2.21622201 = extractelement <4 x float> %9, i32 1
  %param_2.21644202 = extractelement <4 x float> %9, i32 2
  %param_2.21666203 = extractelement <4 x float> %9, i32 3
  %param_0.108 = getelementptr [1024 x float], [1024 x float] addrspace(1)* %get-tuple-element.118.typed, i64 0, i64 %1
  %10 = bitcast float addrspace(1)* %param_0.108 to <4 x float> addrspace(1)*
  %11 = load <4 x float>, <4 x float> addrspace(1)* %10, align 16, !invariant.load !66
  %param_0.1087204 = extractelement <4 x float> %11, i32 0
  %param_0.10825205 = extractelement <4 x float> %11, i32 1
  %param_0.10847206 = extractelement <4 x float> %11, i32 2
  %param_0.10869207 = extractelement <4 x float> %11, i32 3
  %12 = icmp eq i64 %5, 0
  %13 = select i1 %12, float 1.000000e+00, float 0.000000e+00
  %add.34 = fadd float %13, %7
  %param_1.195 = getelementptr inbounds [1024 x [10 x float]], [1024 x [10 x float]] addrspace(1)* %fusion.47.typed, i64 0, i64 %1, i64 0
  %14 = bitcast float addrspace(1)* %param_1.195 to <4 x float> addrspace(1)*
  %15 = load <4 x float>, <4 x float> addrspace(1)* %14, align 32, !invariant.load !66
  %param_1.1955208 = extractelement <4 x float> %15, i32 0
  %param_1.1955.1209 = extractelement <4 x float> %15, i32 1
  %param_1.1955.2210 = extractelement <4 x float> %15, i32 2
  %param_1.1955.3211 = extractelement <4 x float> %15, i32 3
  %subtract.61 = fsub float %param_1.1955208, %param_2.2166200
  %subtract.35 = fsub float %subtract.61, %param_0.1087204
  %16 = fmul float %subtract.35, %add.34
  %add.151.i = fsub float 0.000000e+00, %16
  %17 = icmp eq i64 %5, 1
  %18 = select i1 %17, float 1.000000e+00, float 0.000000e+00
  %add.34.1 = fadd float %18, %7
  %subtract.61.1 = fsub float %param_1.1955.1209, %param_2.2166200
  %subtract.35.1 = fsub float %subtract.61.1, %param_0.1087204
  %19 = fmul float %subtract.35.1, %add.34.1
  %add.151.i.1 = fsub float %add.151.i, %19
  %20 = icmp eq i64 %5, 2
  %21 = select i1 %20, float 1.000000e+00, float 0.000000e+00
  %add.34.2 = fadd float %21, %7
  %subtract.61.2 = fsub float %param_1.1955.2210, %param_2.2166200
  %subtract.35.2 = fsub float %subtract.61.2, %param_0.1087204
  %22 = fmul float %subtract.35.2, %add.34.2
  %add.151.i.2 = fsub float %add.151.i.1, %22
  %23 = icmp eq i64 %5, 3
  %24 = select i1 %23, float 1.000000e+00, float 0.000000e+00
  %add.34.3 = fadd float %24, %7
  %subtract.61.3 = fsub float %param_1.1955.3211, %param_2.2166200
  %subtract.35.3 = fsub float %subtract.61.3, %param_0.1087204
  %25 = fmul float %subtract.35.3, %add.34.3
  %add.151.i.3 = fsub float %add.151.i.2, %25
  %26 = icmp eq i64 %5, 4
  %27 = select i1 %26, float 1.000000e+00, float 0.000000e+00
  %add.34.4 = fadd float %27, %7
  %param_1.195.4109 = getelementptr inbounds float, float addrspace(1)* %param_1.195, i64 4
  %28 = bitcast float addrspace(1)* %param_1.195.4109 to <4 x float> addrspace(1)*
  %29 = load <4 x float>, <4 x float> addrspace(1)* %28, align 16, !invariant.load !66
  %param_1.1955.4212 = extractelement <4 x float> %29, i32 0
  %param_1.1955.5213 = extractelement <4 x float> %29, i32 1
  %param_1.1955.6214 = extractelement <4 x float> %29, i32 2
  %param_1.1955.7215 = extractelement <4 x float> %29, i32 3
  %subtract.61.4 = fsub float %param_1.1955.4212, %param_2.2166200
  %subtract.35.4 = fsub float %subtract.61.4, %param_0.1087204
  %30 = fmul float %subtract.35.4, %add.34.4
  %add.151.i.4 = fsub float %add.151.i.3, %30
  %31 = icmp eq i64 %5, 5
  %32 = select i1 %31, float 1.000000e+00, float 0.000000e+00
  %add.34.5 = fadd float %32, %7
  %subtract.61.5 = fsub float %param_1.1955.5213, %param_2.2166200
  %subtract.35.5 = fsub float %subtract.61.5, %param_0.1087204
  %33 = fmul float %subtract.35.5, %add.34.5
  %add.151.i.5 = fsub float %add.151.i.4, %33
  %34 = icmp eq i64 %5, 6
  %35 = select i1 %34, float 1.000000e+00, float 0.000000e+00
  %add.34.6 = fadd float %35, %7
  %subtract.61.6 = fsub float %param_1.1955.6214, %param_2.2166200
  %subtract.35.6 = fsub float %subtract.61.6, %param_0.1087204
  %36 = fmul float %subtract.35.6, %add.34.6
  %add.151.i.6 = fsub float %add.151.i.5, %36
  %37 = icmp eq i64 %5, 7
  %38 = select i1 %37, float 1.000000e+00, float 0.000000e+00
  %add.34.7 = fadd float %38, %7
  %subtract.61.7 = fsub float %param_1.1955.7215, %param_2.2166200
  %subtract.35.7 = fsub float %subtract.61.7, %param_0.1087204
  %39 = fmul float %subtract.35.7, %add.34.7
  %add.151.i.7 = fsub float %add.151.i.6, %39
  %40 = icmp eq i64 %5, 8
  %41 = select i1 %40, float 1.000000e+00, float 0.000000e+00
  %add.34.8 = fadd float %41, %7
  %param_1.195.8113 = getelementptr inbounds float, float addrspace(1)* %param_1.195, i64 8
  %42 = bitcast float addrspace(1)* %param_1.195.8113 to <4 x float> addrspace(1)*
  %43 = load <4 x float>, <4 x float> addrspace(1)* %42, align 32, !invariant.load !66
  %param_1.1955.8216 = extractelement <4 x float> %43, i32 0
  %param_1.1955.9217 = extractelement <4 x float> %43, i32 1
  %param_1.19520218 = extractelement <4 x float> %43, i32 2
  %param_1.19520.1219 = extractelement <4 x float> %43, i32 3
  %subtract.61.8 = fsub float %param_1.1955.8216, %param_2.2166200
  %subtract.35.8 = fsub float %subtract.61.8, %param_0.1087204
  %44 = fmul float %subtract.35.8, %add.34.8
  %add.151.i.8 = fsub float %add.151.i.7, %44
  %45 = icmp eq i64 %5, 9
  %46 = select i1 %45, float 1.000000e+00, float 0.000000e+00
  %add.34.9 = fadd float %46, %7
  %subtract.61.9 = fsub float %param_1.1955.9217, %param_2.2166200
  %subtract.35.9 = fsub float %subtract.61.9, %param_0.1087204
  %47 = fmul float %subtract.35.9, %add.34.9
  %add.151.i.9 = fsub float %add.151.i.8, %47
  %48 = bitcast i8 addrspace(1)* %alloc25100 to float addrspace(1)*
  %49 = getelementptr float, float addrspace(1)* %48, i64 %1
  %50 = sitofp i32 %param_3.10617197 to float
  %51 = fptosi float %50 to i64
  %52 = icmp ult i64 %51, 10
  %53 = select i1 %52, float 0.000000e+00, float 0x7FF8000000000000
  %54 = icmp eq i64 %51, 0
  %55 = select i1 %54, float 1.000000e+00, float 0.000000e+00
  %add.3418 = fadd float %55, %53
  %subtract.6123 = fsub float %param_1.19520218, %param_2.21622201
  %subtract.3526 = fsub float %subtract.6123, %param_0.10825205
  %56 = fmul float %subtract.3526, %add.3418
  %add.151.i85 = fsub float 0.000000e+00, %56
  %57 = icmp eq i64 %51, 1
  %58 = select i1 %57, float 1.000000e+00, float 0.000000e+00
  %add.3418.1 = fadd float %58, %53
  %subtract.6123.1 = fsub float %param_1.19520.1219, %param_2.21622201
  %subtract.3526.1 = fsub float %subtract.6123.1, %param_0.10825205
  %59 = fmul float %subtract.3526.1, %add.3418.1
  %add.151.i85.1 = fsub float %add.151.i85, %59
  %60 = icmp eq i64 %51, 2
  %61 = select i1 %60, float 1.000000e+00, float 0.000000e+00
  %add.3418.2 = fadd float %61, %53
  %param_1.19519.2126 = getelementptr inbounds float, float addrspace(1)* %param_1.195, i64 12
  %62 = bitcast float addrspace(1)* %param_1.19519.2126 to <2 x float> addrspace(1)*
  %63 = load <2 x float>, <2 x float> addrspace(1)* %62, align 8, !invariant.load !66
  %param_1.19520.2220 = extractelement <2 x float> %63, i32 0
  %param_1.19520.3221 = extractelement <2 x float> %63, i32 1
  %subtract.6123.2 = fsub float %param_1.19520.2220, %param_2.21622201
  %subtract.3526.2 = fsub float %subtract.6123.2, %param_0.10825205
  %64 = fmul float %subtract.3526.2, %add.3418.2
  %add.151.i85.2 = fsub float %add.151.i85.1, %64
  %65 = icmp eq i64 %51, 3
  %66 = select i1 %65, float 1.000000e+00, float 0.000000e+00
  %add.3418.3 = fadd float %66, %53
  %subtract.6123.3 = fsub float %param_1.19520.3221, %param_2.21622201
  %subtract.3526.3 = fsub float %subtract.6123.3, %param_0.10825205
  %67 = fmul float %subtract.3526.3, %add.3418.3
  %add.151.i85.3 = fsub float %add.151.i85.2, %67
  %68 = icmp eq i64 %51, 4
  %69 = select i1 %68, float 1.000000e+00, float 0.000000e+00
  %add.3418.4 = fadd float %69, %53
  %param_1.19519.4130 = getelementptr inbounds float, float addrspace(1)* %param_1.195, i64 14
  %70 = bitcast float addrspace(1)* %param_1.19519.4130 to <2 x float> addrspace(1)*
  %71 = load <2 x float>, <2 x float> addrspace(1)* %70, align 8, !invariant.load !66
  %param_1.19520.4222 = extractelement <2 x float> %71, i32 0
  %param_1.19520.5223 = extractelement <2 x float> %71, i32 1
  %subtract.6123.4 = fsub float %param_1.19520.4222, %param_2.21622201
  %subtract.3526.4 = fsub float %subtract.6123.4, %param_0.10825205
  %72 = fmul float %subtract.3526.4, %add.3418.4
  %add.151.i85.4 = fsub float %add.151.i85.3, %72
  %73 = icmp eq i64 %51, 5
  %74 = select i1 %73, float 1.000000e+00, float 0.000000e+00
  %add.3418.5 = fadd float %74, %53
  %subtract.6123.5 = fsub float %param_1.19520.5223, %param_2.21622201
  %subtract.3526.5 = fsub float %subtract.6123.5, %param_0.10825205
  %75 = fmul float %subtract.3526.5, %add.3418.5
  %add.151.i85.5 = fsub float %add.151.i85.4, %75
  %76 = icmp eq i64 %51, 6
  %77 = select i1 %76, float 1.000000e+00, float 0.000000e+00
  %add.3418.6 = fadd float %77, %53
  %param_1.19519.6134 = getelementptr inbounds float, float addrspace(1)* %param_1.195, i64 16
  %78 = bitcast float addrspace(1)* %param_1.19519.6134 to <2 x float> addrspace(1)*
  %79 = load <2 x float>, <2 x float> addrspace(1)* %78, align 8, !invariant.load !66
  %param_1.19520.6224 = extractelement <2 x float> %79, i32 0
  %param_1.19520.7225 = extractelement <2 x float> %79, i32 1
  %subtract.6123.6 = fsub float %param_1.19520.6224, %param_2.21622201
  %subtract.3526.6 = fsub float %subtract.6123.6, %param_0.10825205
  %80 = fmul float %subtract.3526.6, %add.3418.6
  %add.151.i85.6 = fsub float %add.151.i85.5, %80
  %81 = icmp eq i64 %51, 7
  %82 = select i1 %81, float 1.000000e+00, float 0.000000e+00
  %add.3418.7 = fadd float %82, %53
  %subtract.6123.7 = fsub float %param_1.19520.7225, %param_2.21622201
  %subtract.3526.7 = fsub float %subtract.6123.7, %param_0.10825205
  %83 = fmul float %subtract.3526.7, %add.3418.7
  %add.151.i85.7 = fsub float %add.151.i85.6, %83
  %84 = icmp eq i64 %51, 8
  %85 = select i1 %84, float 1.000000e+00, float 0.000000e+00
  %add.3418.8 = fadd float %85, %53
  %param_1.19519.8138 = getelementptr inbounds float, float addrspace(1)* %param_1.195, i64 18
  %86 = bitcast float addrspace(1)* %param_1.19519.8138 to <2 x float> addrspace(1)*
  %87 = load <2 x float>, <2 x float> addrspace(1)* %86, align 8, !invariant.load !66
  %param_1.19520.8226 = extractelement <2 x float> %87, i32 0
  %param_1.19520.9227 = extractelement <2 x float> %87, i32 1
  %subtract.6123.8 = fsub float %param_1.19520.8226, %param_2.21622201
  %subtract.3526.8 = fsub float %subtract.6123.8, %param_0.10825205
  %88 = fmul float %subtract.3526.8, %add.3418.8
  %add.151.i85.8 = fsub float %add.151.i85.7, %88
  %89 = icmp eq i64 %51, 9
  %90 = select i1 %89, float 1.000000e+00, float 0.000000e+00
  %add.3418.9 = fadd float %90, %53
  %subtract.6123.9 = fsub float %param_1.19520.9227, %param_2.21622201
  %subtract.3526.9 = fsub float %subtract.6123.9, %param_0.10825205
  %91 = fmul float %subtract.3526.9, %add.3418.9
  %add.151.i85.9 = fsub float %add.151.i85.8, %91
  %92 = sitofp i32 %param_3.10639198 to float
  %93 = fptosi float %92 to i64
  %94 = icmp ult i64 %93, 10
  %95 = select i1 %94, float 0.000000e+00, float 0x7FF8000000000000
  %96 = icmp eq i64 %93, 0
  %97 = select i1 %96, float 1.000000e+00, float 0.000000e+00
  %add.3440 = fadd float %97, %95
  %param_1.19541149 = getelementptr inbounds float, float addrspace(1)* %param_1.195, i64 20
  %98 = bitcast float addrspace(1)* %param_1.19541149 to <4 x float> addrspace(1)*
  %99 = load <4 x float>, <4 x float> addrspace(1)* %98, align 16, !invariant.load !66
  %param_1.19542228 = extractelement <4 x float> %99, i32 0
  %param_1.19542.1229 = extractelement <4 x float> %99, i32 1
  %param_1.19542.2230 = extractelement <4 x float> %99, i32 2
  %param_1.19542.3231 = extractelement <4 x float> %99, i32 3
  %subtract.6145 = fsub float %param_1.19542228, %param_2.21644202
  %subtract.3548 = fsub float %subtract.6145, %param_0.10847206
  %100 = fmul float %subtract.3548, %add.3440
  %add.151.i84 = fsub float 0.000000e+00, %100
  %101 = icmp eq i64 %93, 1
  %102 = select i1 %101, float 1.000000e+00, float 0.000000e+00
  %add.3440.1 = fadd float %102, %95
  %subtract.6145.1 = fsub float %param_1.19542.1229, %param_2.21644202
  %subtract.3548.1 = fsub float %subtract.6145.1, %param_0.10847206
  %103 = fmul float %subtract.3548.1, %add.3440.1
  %add.151.i84.1 = fsub float %add.151.i84, %103
  %104 = icmp eq i64 %93, 2
  %105 = select i1 %104, float 1.000000e+00, float 0.000000e+00
  %add.3440.2 = fadd float %105, %95
  %subtract.6145.2 = fsub float %param_1.19542.2230, %param_2.21644202
  %subtract.3548.2 = fsub float %subtract.6145.2, %param_0.10847206
  %106 = fmul float %subtract.3548.2, %add.3440.2
  %add.151.i84.2 = fsub float %add.151.i84.1, %106
  %107 = icmp eq i64 %93, 3
  %108 = select i1 %107, float 1.000000e+00, float 0.000000e+00
  %add.3440.3 = fadd float %108, %95
  %subtract.6145.3 = fsub float %param_1.19542.3231, %param_2.21644202
  %subtract.3548.3 = fsub float %subtract.6145.3, %param_0.10847206
  %109 = fmul float %subtract.3548.3, %add.3440.3
  %add.151.i84.3 = fsub float %add.151.i84.2, %109
  %110 = icmp eq i64 %93, 4
  %111 = select i1 %110, float 1.000000e+00, float 0.000000e+00
  %add.3440.4 = fadd float %111, %95
  %param_1.19541.4157 = getelementptr inbounds float, float addrspace(1)* %param_1.195, i64 24
  %112 = bitcast float addrspace(1)* %param_1.19541.4157 to <4 x float> addrspace(1)*
  %113 = load <4 x float>, <4 x float> addrspace(1)* %112, align 16, !invariant.load !66
  %param_1.19542.4232 = extractelement <4 x float> %113, i32 0
  %param_1.19542.5233 = extractelement <4 x float> %113, i32 1
  %param_1.19542.6234 = extractelement <4 x float> %113, i32 2
  %param_1.19542.7235 = extractelement <4 x float> %113, i32 3
  %subtract.6145.4 = fsub float %param_1.19542.4232, %param_2.21644202
  %subtract.3548.4 = fsub float %subtract.6145.4, %param_0.10847206
  %114 = fmul float %subtract.3548.4, %add.3440.4
  %add.151.i84.4 = fsub float %add.151.i84.3, %114
  %115 = icmp eq i64 %93, 5
  %116 = select i1 %115, float 1.000000e+00, float 0.000000e+00
  %add.3440.5 = fadd float %116, %95
  %subtract.6145.5 = fsub float %param_1.19542.5233, %param_2.21644202
  %subtract.3548.5 = fsub float %subtract.6145.5, %param_0.10847206
  %117 = fmul float %subtract.3548.5, %add.3440.5
  %add.151.i84.5 = fsub float %add.151.i84.4, %117
  %118 = icmp eq i64 %93, 6
  %119 = select i1 %118, float 1.000000e+00, float 0.000000e+00
  %add.3440.6 = fadd float %119, %95
  %subtract.6145.6 = fsub float %param_1.19542.6234, %param_2.21644202
  %subtract.3548.6 = fsub float %subtract.6145.6, %param_0.10847206
  %120 = fmul float %subtract.3548.6, %add.3440.6
  %add.151.i84.6 = fsub float %add.151.i84.5, %120
  %121 = icmp eq i64 %93, 7
  %122 = select i1 %121, float 1.000000e+00, float 0.000000e+00
  %add.3440.7 = fadd float %122, %95
  %subtract.6145.7 = fsub float %param_1.19542.7235, %param_2.21644202
  %subtract.3548.7 = fsub float %subtract.6145.7, %param_0.10847206
  %123 = fmul float %subtract.3548.7, %add.3440.7
  %add.151.i84.7 = fsub float %add.151.i84.6, %123
  %124 = icmp eq i64 %93, 8
  %125 = select i1 %124, float 1.000000e+00, float 0.000000e+00
  %add.3440.8 = fadd float %125, %95
  %param_1.19541.8165 = getelementptr inbounds float, float addrspace(1)* %param_1.195, i64 28
  %126 = bitcast float addrspace(1)* %param_1.19541.8165 to <4 x float> addrspace(1)*
  %127 = load <4 x float>, <4 x float> addrspace(1)* %126, align 16, !invariant.load !66
  %param_1.19542.8236 = extractelement <4 x float> %127, i32 0
  %param_1.19542.9237 = extractelement <4 x float> %127, i32 1
  %param_1.19564238 = extractelement <4 x float> %127, i32 2
  %param_1.19564.1239 = extractelement <4 x float> %127, i32 3
  %subtract.6145.8 = fsub float %param_1.19542.8236, %param_2.21644202
  %subtract.3548.8 = fsub float %subtract.6145.8, %param_0.10847206
  %128 = fmul float %subtract.3548.8, %add.3440.8
  %add.151.i84.8 = fsub float %add.151.i84.7, %128
  %129 = icmp eq i64 %93, 9
  %130 = select i1 %129, float 1.000000e+00, float 0.000000e+00
  %add.3440.9 = fadd float %130, %95
  %subtract.6145.9 = fsub float %param_1.19542.9237, %param_2.21644202
  %subtract.3548.9 = fsub float %subtract.6145.9, %param_0.10847206
  %131 = fmul float %subtract.3548.9, %add.3440.9
  %add.151.i84.9 = fsub float %add.151.i84.8, %131
  %132 = sitofp i32 %param_3.10661199 to float
  %133 = fptosi float %132 to i64
  %134 = icmp ult i64 %133, 10
  %135 = select i1 %134, float 0.000000e+00, float 0x7FF8000000000000
  %136 = icmp eq i64 %133, 0
  %137 = select i1 %136, float 1.000000e+00, float 0.000000e+00
  %add.3462 = fadd float %137, %135
  %subtract.6167 = fsub float %param_1.19564238, %param_2.21666203
  %subtract.3570 = fsub float %subtract.6167, %param_0.10869207
  %138 = fmul float %subtract.3570, %add.3462
  %add.151.i83 = fsub float 0.000000e+00, %138
  %139 = icmp eq i64 %133, 1
  %140 = select i1 %139, float 1.000000e+00, float 0.000000e+00
  %add.3462.1 = fadd float %140, %135
  %subtract.6167.1 = fsub float %param_1.19564.1239, %param_2.21666203
  %subtract.3570.1 = fsub float %subtract.6167.1, %param_0.10869207
  %141 = fmul float %subtract.3570.1, %add.3462.1
  %add.151.i83.1 = fsub float %add.151.i83, %141
  %142 = icmp eq i64 %133, 2
  %143 = select i1 %142, float 1.000000e+00, float 0.000000e+00
  %add.3462.2 = fadd float %143, %135
  %param_1.19563.2180 = getelementptr inbounds float, float addrspace(1)* %param_1.195, i64 32
  %144 = bitcast float addrspace(1)* %param_1.19563.2180 to <2 x float> addrspace(1)*
  %145 = load <2 x float>, <2 x float> addrspace(1)* %144, align 8, !invariant.load !66
  %param_1.19564.2240 = extractelement <2 x float> %145, i32 0
  %param_1.19564.3241 = extractelement <2 x float> %145, i32 1
  %subtract.6167.2 = fsub float %param_1.19564.2240, %param_2.21666203
  %subtract.3570.2 = fsub float %subtract.6167.2, %param_0.10869207
  %146 = fmul float %subtract.3570.2, %add.3462.2
  %add.151.i83.2 = fsub float %add.151.i83.1, %146
  %147 = icmp eq i64 %133, 3
  %148 = select i1 %147, float 1.000000e+00, float 0.000000e+00
  %add.3462.3 = fadd float %148, %135
  %subtract.6167.3 = fsub float %param_1.19564.3241, %param_2.21666203
  %subtract.3570.3 = fsub float %subtract.6167.3, %param_0.10869207
  %149 = fmul float %subtract.3570.3, %add.3462.3
  %add.151.i83.3 = fsub float %add.151.i83.2, %149
  %150 = icmp eq i64 %133, 4
  %151 = select i1 %150, float 1.000000e+00, float 0.000000e+00
  %add.3462.4 = fadd float %151, %135
  %param_1.19563.4184 = getelementptr inbounds float, float addrspace(1)* %param_1.195, i64 34
  %152 = bitcast float addrspace(1)* %param_1.19563.4184 to <2 x float> addrspace(1)*
  %153 = load <2 x float>, <2 x float> addrspace(1)* %152, align 8, !invariant.load !66
  %param_1.19564.4242 = extractelement <2 x float> %153, i32 0
  %param_1.19564.5243 = extractelement <2 x float> %153, i32 1
  %subtract.6167.4 = fsub float %param_1.19564.4242, %param_2.21666203
  %subtract.3570.4 = fsub float %subtract.6167.4, %param_0.10869207
  %154 = fmul float %subtract.3570.4, %add.3462.4
  %add.151.i83.4 = fsub float %add.151.i83.3, %154
  %155 = icmp eq i64 %133, 5
  %156 = select i1 %155, float 1.000000e+00, float 0.000000e+00
  %add.3462.5 = fadd float %156, %135
  %subtract.6167.5 = fsub float %param_1.19564.5243, %param_2.21666203
  %subtract.3570.5 = fsub float %subtract.6167.5, %param_0.10869207
  %157 = fmul float %subtract.3570.5, %add.3462.5
  %add.151.i83.5 = fsub float %add.151.i83.4, %157
  %158 = icmp eq i64 %133, 6
  %159 = select i1 %158, float 1.000000e+00, float 0.000000e+00
  %add.3462.6 = fadd float %159, %135
  %param_1.19563.6188 = getelementptr inbounds float, float addrspace(1)* %param_1.195, i64 36
  %160 = bitcast float addrspace(1)* %param_1.19563.6188 to <2 x float> addrspace(1)*
  %161 = load <2 x float>, <2 x float> addrspace(1)* %160, align 8, !invariant.load !66
  %param_1.19564.6244 = extractelement <2 x float> %161, i32 0
  %param_1.19564.7245 = extractelement <2 x float> %161, i32 1
  %subtract.6167.6 = fsub float %param_1.19564.6244, %param_2.21666203
  %subtract.3570.6 = fsub float %subtract.6167.6, %param_0.10869207
  %162 = fmul float %subtract.3570.6, %add.3462.6
  %add.151.i83.6 = fsub float %add.151.i83.5, %162
  %163 = icmp eq i64 %133, 7
  %164 = select i1 %163, float 1.000000e+00, float 0.000000e+00
  %add.3462.7 = fadd float %164, %135
  %subtract.6167.7 = fsub float %param_1.19564.7245, %param_2.21666203
  %subtract.3570.7 = fsub float %subtract.6167.7, %param_0.10869207
  %165 = fmul float %subtract.3570.7, %add.3462.7
  %add.151.i83.7 = fsub float %add.151.i83.6, %165
  %166 = icmp eq i64 %133, 8
  %167 = select i1 %166, float 1.000000e+00, float 0.000000e+00
  %add.3462.8 = fadd float %167, %135
  %param_1.19563.8192 = getelementptr inbounds float, float addrspace(1)* %param_1.195, i64 38
  %168 = bitcast float addrspace(1)* %param_1.19563.8192 to <2 x float> addrspace(1)*
  %169 = load <2 x float>, <2 x float> addrspace(1)* %168, align 8, !invariant.load !66
  %param_1.19564.8246 = extractelement <2 x float> %169, i32 0
  %param_1.19564.9247 = extractelement <2 x float> %169, i32 1
  %subtract.6167.8 = fsub float %param_1.19564.8246, %param_2.21666203
  %subtract.3570.8 = fsub float %subtract.6167.8, %param_0.10869207
  %170 = fmul float %subtract.3570.8, %add.3462.8
  %add.151.i83.8 = fsub float %add.151.i83.7, %170
  %171 = icmp eq i64 %133, 9
  %172 = select i1 %171, float 1.000000e+00, float 0.000000e+00
  %add.3462.9 = fadd float %172, %135
  %subtract.6167.9 = fsub float %param_1.19564.9247, %param_2.21666203
  %subtract.3570.9 = fsub float %subtract.6167.9, %param_0.10869207
  %173 = fmul float %subtract.3570.9, %add.3462.9
  %add.151.i83.9 = fsub float %add.151.i83.8, %173
  %174 = insertelement <4 x float> undef, float %add.151.i.9, i32 0
  %175 = insertelement <4 x float> %174, float %add.151.i85.9, i32 1
  %176 = insertelement <4 x float> %175, float %add.151.i84.9, i32 2
  %177 = insertelement <4 x float> %176, float %add.151.i83.9, i32 3
  %178 = bitcast float addrspace(1)* %49 to <4 x float> addrspace(1)*
  store <4 x float> %177, <4 x float> addrspace(1)* %178, align 16
  ret void
}

; Function Attrs: nounwind
define void @fusion_56(i8* noalias nocapture align 64 dereferenceable(819200) %alloc7, i8* noalias nocapture readonly align 64 dereferenceable(819200) %alloc8, i8* noalias nocapture readonly align 64 dereferenceable(819200) %alloc9, i8* noalias nocapture align 64 dereferenceable(3200) %alloc29, i8* noalias nocapture readnone align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #0 {
entry:
  %alloc2976 = addrspacecast i8* %alloc29 to i8 addrspace(1)*
  %alloc974 = addrspacecast i8* %alloc9 to i8 addrspace(1)*
  %alloc872 = addrspacecast i8* %alloc8 to i8 addrspace(1)*
  %alloc770 = addrspacecast i8* %alloc7 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !70
  %thread_id.x = and i32 %0, 31
  %thread_id.y = lshr i32 %0, 5
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !79
  %tile_origin.2 = shl nuw nsw i32 %1, 6
  %2 = shl nuw nsw i32 %thread_id.x, 1
  %3 = or i32 %tile_origin.2, %2
  %4 = zext i32 %3 to i64
  br label %output_y_in_tile.loop_body

reduce-group-0-after:                             ; preds = %reduction_atomic_update-true41, %reduction_atomic_update-after
  ret void

output_y_in_tile.loop_body:                       ; preds = %output_y_in_tile.loop_body, %entry
  %lsr.iv = phi i32 [ %lsr.iv.next, %output_y_in_tile.loop_body ], [ 0, %entry ]
  %partial_reduction_result.044.sroa.4.068 = phi float [ 0.000000e+00, %entry ], [ %add.225.i66.1, %output_y_in_tile.loop_body ]
  %partial_reduction_result.044.sroa.0.067 = phi float [ 0.000000e+00, %entry ], [ %add.225.i.1, %output_y_in_tile.loop_body ]
  %5 = bitcast i8 addrspace(1)* %alloc974 to [1024 x [128 x float]] addrspace(1)*
  %6 = bitcast i8 addrspace(1)* %alloc872 to [1024 x [128 x float]] addrspace(1)*
  %7 = bitcast i8 addrspace(1)* %alloc770 to [1024 x [128 x float]] addrspace(1)*
  %8 = or i32 %lsr.iv, %thread_id.y
  %9 = zext i32 %8 to i64
  %param_1.259 = getelementptr [1024 x [128 x float]], [1024 x [128 x float]] addrspace(1)* %5, i64 0, i64 %9, i64 %4
  %10 = bitcast float addrspace(1)* %param_1.259 to <2 x float> addrspace(1)*
  %11 = load <2 x float>, <2 x float> addrspace(1)* %10, align 8, !invariant.load !66
  %param_1.259688 = extractelement <2 x float> %11, i32 0
  %param_1.2591289 = extractelement <2 x float> %11, i32 1
  %12 = tail call float @llvm.maxnum.f32(float %param_1.259688, float 0.000000e+00)
  %compare.3.clone.1 = fcmp ogt float %12, 0.000000e+00
  %param_0.160 = getelementptr [1024 x [128 x float]], [1024 x [128 x float]] addrspace(1)* %6, i64 0, i64 %9, i64 %4
  %13 = bitcast float addrspace(1)* %param_0.160 to <2 x float> addrspace(1)*
  %14 = load <2 x float>, <2 x float> addrspace(1)* %13, align 8, !invariant.load !66
  %param_0.160792 = extractelement <2 x float> %14, i32 0
  %param_0.1601593 = extractelement <2 x float> %14, i32 1
  %15 = select i1 %compare.3.clone.1, float %param_0.160792, float 0.000000e+00
  %add.225.i = fadd float %partial_reduction_result.044.sroa.0.067, %15
  %16 = getelementptr [1024 x [128 x float]], [1024 x [128 x float]] addrspace(1)* %7, i64 0, i64 %9, i64 %4
  %17 = tail call float @llvm.maxnum.f32(float %param_1.2591289, float 0.000000e+00)
  %compare.3.clone.113 = fcmp ogt float %17, 0.000000e+00
  %18 = select i1 %compare.3.clone.113, float %param_0.1601593, float 0.000000e+00
  %add.225.i66 = fadd float %partial_reduction_result.044.sroa.4.068, %18
  %19 = insertelement <2 x float> undef, float %15, i32 0
  %20 = insertelement <2 x float> %19, float %18, i32 1
  %21 = bitcast float addrspace(1)* %16 to <2 x float> addrspace(1)*
  store <2 x float> %20, <2 x float> addrspace(1)* %21, align 8
  %param_1.259.182 = getelementptr inbounds float, float addrspace(1)* %param_1.259, i64 4096
  %22 = bitcast float addrspace(1)* %param_1.259.182 to <2 x float> addrspace(1)*
  %23 = load <2 x float>, <2 x float> addrspace(1)* %22, align 8, !invariant.load !66
  %param_1.2596.190 = extractelement <2 x float> %23, i32 0
  %param_1.25912.191 = extractelement <2 x float> %23, i32 1
  %24 = tail call float @llvm.maxnum.f32(float %param_1.2596.190, float 0.000000e+00)
  %compare.3.clone.1.1 = fcmp ogt float %24, 0.000000e+00
  %param_0.160.183 = getelementptr inbounds float, float addrspace(1)* %param_0.160, i64 4096
  %25 = bitcast float addrspace(1)* %param_0.160.183 to <2 x float> addrspace(1)*
  %26 = load <2 x float>, <2 x float> addrspace(1)* %25, align 8, !invariant.load !66
  %param_0.1607.194 = extractelement <2 x float> %26, i32 0
  %param_0.16015.195 = extractelement <2 x float> %26, i32 1
  %27 = select i1 %compare.3.clone.1.1, float %param_0.1607.194, float 0.000000e+00
  %add.225.i.1 = fadd float %add.225.i, %27
  %28 = getelementptr inbounds float, float addrspace(1)* %16, i64 4096
  %29 = tail call float @llvm.maxnum.f32(float %param_1.25912.191, float 0.000000e+00)
  %compare.3.clone.113.1 = fcmp ogt float %29, 0.000000e+00
  %30 = select i1 %compare.3.clone.113.1, float %param_0.16015.195, float 0.000000e+00
  %add.225.i66.1 = fadd float %add.225.i66, %30
  %31 = insertelement <2 x float> undef, float %27, i32 0
  %32 = insertelement <2 x float> %31, float %30, i32 1
  %33 = bitcast float addrspace(1)* %28 to <2 x float> addrspace(1)*
  store <2 x float> %32, <2 x float> addrspace(1)* %33, align 8
  %lsr.iv.next = add nuw nsw i32 %lsr.iv, 64
  %exitcond.1 = icmp eq i32 %lsr.iv.next, 1024
  br i1 %exitcond.1, label %output_y_in_tile.loop_exit, label %output_y_in_tile.loop_body, !llvm.loop !80

output_y_in_tile.loop_exit:                       ; preds = %output_y_in_tile.loop_body
  %fusion.56.typed2 = bitcast i8 addrspace(1)* %alloc2976 to [128 x float] addrspace(1)*
  %34 = shl nuw nsw i32 %thread_id.y, 1
  %35 = or i32 %tile_origin.2, %34
  %36 = zext i32 %thread_id.x to i64
  %37 = zext i32 %thread_id.y to i64
  %38 = getelementptr inbounds [2 x [32 x [33 x float]]], [2 x [32 x [33 x float]]] addrspace(3)* @shared_cache_01, i64 0, i64 0, i64 %36, i64 %37
  store float %add.225.i.1, float addrspace(3)* %38, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [2 x [32 x [33 x float]]], [2 x [32 x [33 x float]]] addrspace(3)* @shared_cache_01, i64 0, i64 0, i64 %37, i64 %36
  %partial_reduction_result = load float, float addrspace(3)* %shmem_transposed_addr, align 4
  %39 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result, i32 16, i32 31)
  %add.225.i65 = fadd float %partial_reduction_result, %39
  %40 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.225.i65, i32 8, i32 31)
  %add.225.i64 = fadd float %add.225.i65, %40
  %41 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.225.i64, i32 4, i32 31)
  %add.225.i63 = fadd float %add.225.i64, %41
  %42 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.225.i63, i32 2, i32 31)
  %add.225.i62 = fadd float %add.225.i63, %42
  %43 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.225.i62, i32 1, i32 31)
  %add.225.i61 = fadd float %add.225.i62, %43
  store float %add.225.i61, float addrspace(3)* %shmem_transposed_addr, align 4
  %44 = icmp eq i32 %thread_id.x, 0
  %45 = zext i32 %35 to i64
  %output_element_address = getelementptr inbounds [128 x float], [128 x float] addrspace(1)* %fusion.56.typed2, i64 0, i64 %45
  br i1 %44, label %reduction_atomic_update-true, label %reduction_atomic_update-after

reduction_atomic_update-after:                    ; preds = %reduction_atomic_update-true, %output_y_in_tile.loop_exit
  %46 = icmp eq i32 %thread_id.x, 0
  %47 = getelementptr inbounds float, float addrspace(3)* %38, i64 1056
  store float %add.225.i66.1, float addrspace(3)* %47, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr3086 = getelementptr inbounds float, float addrspace(3)* %shmem_transposed_addr, i64 1056
  %partial_reduction_result32 = load float, float addrspace(3)* %shmem_transposed_addr3086, align 4
  %48 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result32, i32 16, i32 31)
  %add.225.i60 = fadd float %partial_reduction_result32, %48
  %49 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.225.i60, i32 8, i32 31)
  %add.225.i59 = fadd float %add.225.i60, %49
  %50 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.225.i59, i32 4, i32 31)
  %add.225.i58 = fadd float %add.225.i59, %50
  %51 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.225.i58, i32 2, i32 31)
  %add.225.i57 = fadd float %add.225.i58, %51
  %52 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.225.i57, i32 1, i32 31)
  %add.225.i56 = fadd float %add.225.i57, %52
  store float %add.225.i56, float addrspace(3)* %shmem_transposed_addr3086, align 4
  br i1 %46, label %reduction_atomic_update-true41, label %reduce-group-0-after

reduction_atomic_update-true:                     ; preds = %output_y_in_tile.loop_exit
  %53 = atomicrmw fadd float addrspace(1)* %output_element_address, float %add.225.i61 seq_cst
  br label %reduction_atomic_update-after

reduction_atomic_update-true41:                   ; preds = %reduction_atomic_update-after
  %54 = bitcast float addrspace(1)* %output_element_address to i8 addrspace(1)*
  %sunkaddr = getelementptr inbounds i8, i8 addrspace(1)* %54, i64 4
  %55 = bitcast i8 addrspace(1)* %sunkaddr to float addrspace(1)*
  %56 = atomicrmw fadd float addrspace(1)* %55, float %add.225.i56 seq_cst
  br label %reduce-group-0-after
}

; Function Attrs: nounwind
define void @fusion_6(i8* noalias align 64 dereferenceable(2359296) %alloc1, i8* noalias align 64 dereferenceable(2359296) %alloc2, i8* noalias align 64 dereferenceable(2359296) %alloc3, i8* noalias nocapture readonly align 16 dereferenceable(2359296) %alloc4, i8* noalias nocapture readonly align 16 dereferenceable(2359296) %alloc5, i8* noalias nocapture readonly align 16 dereferenceable(2359296) %alloc6, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc84, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc86, i8* noalias nocapture align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #0 {
entry:
  %temp_buf122 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc86120 = addrspacecast i8* %alloc86 to i8 addrspace(1)*
  %alloc84118 = addrspacecast i8* %alloc84 to i8 addrspace(1)*
  %alloc6116 = addrspacecast i8* %alloc6 to i8 addrspace(1)*
  %alloc5114 = addrspacecast i8* %alloc5 to i8 addrspace(1)*
  %alloc4112 = addrspacecast i8* %alloc4 to i8 addrspace(1)*
  %alloc3110 = addrspacecast i8* %alloc3 to i8 addrspace(1)*
  %alloc2108 = addrspacecast i8* %alloc2 to i8 addrspace(1)*
  %alloc1106 = addrspacecast i8* %alloc1 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !76
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !70
  %2 = or i32 %1, %0
  %3 = icmp eq i32 %2, 0
  %4 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf122, i64 1141056264
  br i1 %3, label %emit_mof_tuple-true, label %emit_mof_tuple-after

emit_mof_tuple-after:                             ; preds = %emit_mof_tuple-true, %entry
  %arg5.6.typed = bitcast i8 addrspace(1)* %alloc86120 to float addrspace(1)*
  %arg4.5.typed = bitcast i8 addrspace(1)* %alloc84118 to float addrspace(1)*
  %fusion.31.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf122, i64 1141055488
  %fusion.31.typed = bitcast i8 addrspace(1)* %fusion.31.raw to float addrspace(1)*
  %5 = shl nuw nsw i32 %0, 8
  %linear_index = add nuw nsw i32 %5, %1
  %linear_index_base = shl nuw nsw i32 %linear_index, 2
  %6 = bitcast i8 addrspace(1)* %alloc4112 to float addrspace(1)*
  %7 = zext i32 %linear_index_base to i64
  %param_0.6 = getelementptr float, float addrspace(1)* %6, i64 %7
  %8 = bitcast float addrspace(1)* %param_0.6 to <4 x float> addrspace(1)*
  %9 = load <4 x float>, <4 x float> addrspace(1)* %8, align 16, !invariant.load !66
  %param_0.610154 = extractelement <4 x float> %9, i32 0
  %param_0.623155 = extractelement <4 x float> %9, i32 1
  %param_0.651156 = extractelement <4 x float> %9, i32 2
  %param_0.679157 = extractelement <4 x float> %9, i32 3
  %10 = bitcast i8 addrspace(1)* %alloc5114 to float addrspace(1)*
  %param_2.287 = getelementptr float, float addrspace(1)* %10, i64 %7
  %11 = bitcast float addrspace(1)* %param_2.287 to <4 x float> addrspace(1)*
  %12 = load <4 x float>, <4 x float> addrspace(1)* %11, align 16, !invariant.load !66
  %param_2.28711158 = extractelement <4 x float> %12, i32 0
  %param_2.28725159 = extractelement <4 x float> %12, i32 1
  %param_2.28753160 = extractelement <4 x float> %12, i32 2
  %param_2.28781161 = extractelement <4 x float> %12, i32 3
  %13 = bitcast i8 addrspace(1)* %alloc3110 to float addrspace(1)*
  %param_4.101 = getelementptr float, float addrspace(1)* %13, i64 %7
  %14 = bitcast float addrspace(1)* %param_4.101 to <4 x float> addrspace(1)*
  %15 = load <4 x float>, <4 x float> addrspace(1)* %14, align 16
  %param_4.10112162 = extractelement <4 x float> %15, i32 0
  %param_4.10127163 = extractelement <4 x float> %15, i32 1
  %param_4.10155164 = extractelement <4 x float> %15, i32 2
  %param_4.10183165 = extractelement <4 x float> %15, i32 3
  %subtract.9.clone.1 = fsub float %param_4.10112162, %param_2.28711158
  %param_3.139 = load float, float addrspace(1)* %arg4.5.typed, align 16, !invariant.load !66
  %subtract.42.clone.1 = fsub float 1.000000e+00, %param_3.139
  %multiply.11.clone.1 = fmul float %subtract.9.clone.1, %subtract.42.clone.1
  %add.9.clone.1 = fadd float %param_2.28711158, %multiply.11.clone.1
  %param_1.247 = load float, float addrspace(1)* %fusion.31.typed, align 64, !invariant.load !66
  %multiply.8 = fmul float %param_1.247, %add.9.clone.1
  %16 = bitcast i8 addrspace(1)* %alloc6116 to float addrspace(1)*
  %param_5.94 = getelementptr float, float addrspace(1)* %16, i64 %7
  %17 = bitcast float addrspace(1)* %param_5.94 to <4 x float> addrspace(1)*
  %18 = load <4 x float>, <4 x float> addrspace(1)* %17, align 16, !invariant.load !66
  %param_5.9415166 = extractelement <4 x float> %18, i32 0
  %param_5.9436167 = extractelement <4 x float> %18, i32 1
  %param_5.9464168 = extractelement <4 x float> %18, i32 2
  %param_5.9492169 = extractelement <4 x float> %18, i32 3
  %multiply.10.clone.1 = fmul float %param_4.10112162, %param_4.10112162
  %subtract.8.clone.1 = fsub float %multiply.10.clone.1, %param_5.9415166
  %param_6.79 = load float, float addrspace(1)* %arg5.6.typed, align 16, !invariant.load !66
  %subtract.43.clone.1 = fsub float 1.000000e+00, %param_6.79
  %multiply.9.clone.1 = fmul float %subtract.8.clone.1, %subtract.43.clone.1
  %add.8.clone.1 = fadd float %param_5.9415166, %multiply.9.clone.1
  %19 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.8.clone.1) #0
  %add.7 = fadd float %19, 0x3E7AD7F2A0000000
  %divide.3 = fdiv float %multiply.8, %add.7
  %subtract.7 = fsub float %param_0.610154, %divide.3
  %20 = bitcast i8 addrspace(1)* %alloc2108 to float addrspace(1)*
  %21 = getelementptr float, float addrspace(1)* %20, i64 %7
  %22 = bitcast i8 addrspace(1)* %alloc1106 to float addrspace(1)*
  %23 = getelementptr float, float addrspace(1)* %22, i64 %7
  %subtract.9.clone.130 = fsub float %param_4.10127163, %param_2.28725159
  %multiply.11.clone.131 = fmul float %subtract.42.clone.1, %subtract.9.clone.130
  %add.9.clone.132 = fadd float %param_2.28725159, %multiply.11.clone.131
  %multiply.834 = fmul float %param_1.247, %add.9.clone.132
  %multiply.10.clone.141 = fmul float %param_4.10127163, %param_4.10127163
  %subtract.8.clone.144 = fsub float %multiply.10.clone.141, %param_5.9436167
  %multiply.9.clone.145 = fmul float %subtract.43.clone.1, %subtract.8.clone.144
  %add.8.clone.146 = fadd float %param_5.9436167, %multiply.9.clone.145
  %24 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.8.clone.146) #0
  %add.747 = fadd float %24, 0x3E7AD7F2A0000000
  %divide.348 = fdiv float %multiply.834, %add.747
  %subtract.749 = fsub float %param_0.623155, %divide.348
  %subtract.9.clone.158 = fsub float %param_4.10155164, %param_2.28753160
  %multiply.11.clone.159 = fmul float %subtract.42.clone.1, %subtract.9.clone.158
  %add.9.clone.160 = fadd float %param_2.28753160, %multiply.11.clone.159
  %multiply.862 = fmul float %param_1.247, %add.9.clone.160
  %multiply.10.clone.169 = fmul float %param_4.10155164, %param_4.10155164
  %subtract.8.clone.172 = fsub float %multiply.10.clone.169, %param_5.9464168
  %multiply.9.clone.173 = fmul float %subtract.43.clone.1, %subtract.8.clone.172
  %add.8.clone.174 = fadd float %param_5.9464168, %multiply.9.clone.173
  %25 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.8.clone.174) #0
  %add.775 = fadd float %25, 0x3E7AD7F2A0000000
  %divide.376 = fdiv float %multiply.862, %add.775
  %subtract.777 = fsub float %param_0.651156, %divide.376
  %subtract.9.clone.186 = fsub float %param_4.10183165, %param_2.28781161
  %multiply.11.clone.187 = fmul float %subtract.42.clone.1, %subtract.9.clone.186
  %add.9.clone.188 = fadd float %param_2.28781161, %multiply.11.clone.187
  %multiply.890 = fmul float %param_1.247, %add.9.clone.188
  %multiply.10.clone.197 = fmul float %param_4.10183165, %param_4.10183165
  %subtract.8.clone.1100 = fsub float %multiply.10.clone.197, %param_5.9492169
  %multiply.9.clone.1101 = fmul float %subtract.43.clone.1, %subtract.8.clone.1100
  %add.8.clone.1102 = fadd float %param_5.9492169, %multiply.9.clone.1101
  %26 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.8.clone.1102) #0
  %add.7103 = fadd float %26, 0x3E7AD7F2A0000000
  %divide.3104 = fdiv float %multiply.890, %add.7103
  %subtract.7105 = fsub float %param_0.679157, %divide.3104
  %27 = insertelement <4 x float> undef, float %subtract.7, i32 0
  %28 = insertelement <4 x float> %27, float %subtract.749, i32 1
  %29 = insertelement <4 x float> %28, float %subtract.777, i32 2
  %30 = insertelement <4 x float> %29, float %subtract.7105, i32 3
  %31 = bitcast float addrspace(1)* %param_4.101 to <4 x float> addrspace(1)*
  store <4 x float> %30, <4 x float> addrspace(1)* %31, align 16
  %32 = insertelement <4 x float> undef, float %add.9.clone.1, i32 0
  %33 = insertelement <4 x float> %32, float %add.9.clone.132, i32 1
  %34 = insertelement <4 x float> %33, float %add.9.clone.160, i32 2
  %35 = insertelement <4 x float> %34, float %add.9.clone.188, i32 3
  %36 = bitcast float addrspace(1)* %21 to <4 x float> addrspace(1)*
  store <4 x float> %35, <4 x float> addrspace(1)* %36, align 16
  %37 = insertelement <4 x float> undef, float %add.8.clone.1, i32 0
  %38 = insertelement <4 x float> %37, float %add.8.clone.146, i32 1
  %39 = insertelement <4 x float> %38, float %add.8.clone.174, i32 2
  %40 = insertelement <4 x float> %39, float %add.8.clone.1102, i32 3
  %41 = bitcast float addrspace(1)* %23 to <4 x float> addrspace(1)*
  store <4 x float> %40, <4 x float> addrspace(1)* %41, align 16
  ret void

emit_mof_tuple-true:                              ; preds = %entry
  %42 = ptrtoint i8* %alloc3 to i64
  %43 = insertelement <2 x i64> undef, i64 %42, i32 0
  %44 = ptrtoint i8* %alloc2 to i64
  %45 = insertelement <2 x i64> %43, i64 %44, i32 1
  %sunkaddr = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf122, i64 1141056256
  %46 = bitcast i8 addrspace(1)* %sunkaddr to <2 x i64> addrspace(1)*
  store <2 x i64> %45, <2 x i64> addrspace(1)* %46, align 64
  %sunkaddr170 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf122, i64 1141056272
  %47 = bitcast i8 addrspace(1)* %sunkaddr170 to i8* addrspace(1)*
  store i8* %alloc1, i8* addrspace(1)* %47, align 16
  br label %emit_mof_tuple-after
}

; Function Attrs: nofree nounwind
define void @fusion_36(i8* noalias nocapture align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #3 {
entry:
  %temp_buf23 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %custom-call.16.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf23, i64 104857600
  %custom-call.16.typed = bitcast i8 addrspace(1)* %custom-call.16.raw to [1024 x [4608 x float]] addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !75
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !72
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %3, %2
  %linear_index1 = or i32 %linear_index_base, 1
  %linear_index2 = or i32 %linear_index_base, 2
  %linear_index3 = or i32 %linear_index_base, 3
  %4 = udiv i32 %linear_index_base, 4608
  %5 = udiv i32 %linear_index_base, 36
  %6 = and i32 %5, 127
  %linear_index3.frozen = freeze i32 %linear_index3
  %7 = udiv i32 %linear_index3.frozen, 6
  %8 = urem i32 %7, 6
  %9 = mul i32 %7, 6
  %.decomposed = sub i32 %linear_index3.frozen, %9
  %linear_index2.frozen = freeze i32 %linear_index2
  %10 = udiv i32 %linear_index2.frozen, 6
  %11 = urem i32 %10, 6
  %12 = mul i32 %10, 6
  %.decomposed21 = sub i32 %linear_index2.frozen, %12
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %13 = udiv i32 %linear_index_base.frozen, 6
  %14 = urem i32 %13, 6
  %15 = urem i32 %linear_index1, 6
  %16 = mul i32 %13, 6
  %.decomposed22 = sub i32 %linear_index_base.frozen, %16
  %get-tuple-element.80.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf23, i64 214732096
  %fusion.36.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf23, i64 195857728
  %17 = bitcast i8 addrspace(1)* %get-tuple-element.80.raw to float addrspace(1)*
  %18 = zext i32 %linear_index_base to i64
  %param_1.114 = getelementptr float, float addrspace(1)* %17, i64 %18
  %19 = bitcast float addrspace(1)* %param_1.114 to <4 x float> addrspace(1)*
  %20 = load <4 x float>, <4 x float> addrspace(1)* %19, align 16, !invariant.load !66
  %param_1.114434 = extractelement <4 x float> %20, i32 0
  %param_1.114735 = extractelement <4 x float> %20, i32 1
  %param_1.1141236 = extractelement <4 x float> %20, i32 2
  %param_1.1141737 = extractelement <4 x float> %20, i32 3
  %compare.2 = fcmp ogt float %param_1.114434, 0.000000e+00
  %21 = shl nuw nsw i32 %.decomposed22, 7
  %22 = or i32 %6, %21
  %23 = mul nuw nsw i32 %14, 768
  %24 = add nuw nsw i32 %22, %23
  %25 = zext i32 %4 to i64
  %26 = zext i32 %24 to i64
  %param_0.53 = getelementptr inbounds [1024 x [4608 x float]], [1024 x [4608 x float]] addrspace(1)* %custom-call.16.typed, i64 0, i64 %25, i64 %26
  %param_0.535 = load float, float addrspace(1)* %param_0.53, align 4, !invariant.load !66
  %27 = select i1 %compare.2, float %param_0.535, float 0.000000e+00
  %28 = bitcast i8 addrspace(1)* %fusion.36.raw to float addrspace(1)*
  %29 = getelementptr float, float addrspace(1)* %28, i64 %18
  %compare.28 = fcmp ogt float %param_1.114735, 0.000000e+00
  %30 = shl nuw nsw i32 %15, 7
  %31 = or i32 %30, %6
  %32 = add nuw nsw i32 %31, %23
  %33 = zext i32 %32 to i64
  %param_0.539 = getelementptr inbounds [1024 x [4608 x float]], [1024 x [4608 x float]] addrspace(1)* %custom-call.16.typed, i64 0, i64 %25, i64 %33
  %param_0.5310 = load float, float addrspace(1)* %param_0.539, align 4, !invariant.load !66
  %34 = select i1 %compare.28, float %param_0.5310, float 0.000000e+00
  %compare.213 = fcmp ogt float %param_1.1141236, 0.000000e+00
  %35 = shl nuw nsw i32 %.decomposed21, 7
  %36 = or i32 %35, %6
  %37 = mul nuw nsw i32 %11, 768
  %38 = add nuw nsw i32 %36, %37
  %39 = zext i32 %38 to i64
  %param_0.5314 = getelementptr inbounds [1024 x [4608 x float]], [1024 x [4608 x float]] addrspace(1)* %custom-call.16.typed, i64 0, i64 %25, i64 %39
  %param_0.5315 = load float, float addrspace(1)* %param_0.5314, align 4, !invariant.load !66
  %40 = select i1 %compare.213, float %param_0.5315, float 0.000000e+00
  %compare.218 = fcmp ogt float %param_1.1141737, 0.000000e+00
  %41 = shl nuw nsw i32 %.decomposed, 7
  %42 = or i32 %41, %6
  %43 = mul nuw nsw i32 %8, 768
  %44 = add nuw nsw i32 %42, %43
  %45 = zext i32 %44 to i64
  %param_0.5319 = getelementptr inbounds [1024 x [4608 x float]], [1024 x [4608 x float]] addrspace(1)* %custom-call.16.typed, i64 0, i64 %25, i64 %45
  %param_0.5320 = load float, float addrspace(1)* %param_0.5319, align 4, !invariant.load !66
  %46 = select i1 %compare.218, float %param_0.5320, float 0.000000e+00
  %47 = insertelement <4 x float> undef, float %27, i32 0
  %48 = insertelement <4 x float> %47, float %34, i32 1
  %49 = insertelement <4 x float> %48, float %40, i32 2
  %50 = insertelement <4 x float> %49, float %46, i32 3
  %51 = bitcast float addrspace(1)* %29 to <4 x float> addrspace(1)*
  store <4 x float> %50, <4 x float> addrspace(1)* %51, align 16
  ret void
}

; Function Attrs: nounwind
define void @fusion_18(i8* noalias nocapture align 64 dereferenceable(512) %alloc38, i8* noalias nocapture readonly align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #0 {
entry:
  %temp_buf128 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc38126 = addrspacecast i8* %alloc38 to i8 addrspace(1)*
  %initial_value_addr = alloca float, align 4
  %0 = addrspacecast float* %initial_value_addr to float addrspace(5)*
  %fusion.36.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf128, i64 195857728
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !81
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !82
  %3 = and i32 %2, 127
  %4 = lshr i32 %2, 7
  %block_origin.z = shl nuw nsw i32 %4, 3
  %5 = shl nuw nsw i32 %1, 1
  %6 = icmp ult i32 %1, 18
  %7 = mul nuw nsw i32 %3, 36
  %8 = add nuw nsw i32 %7, %5
  %x_loc28 = or i32 %5, 1
  br i1 %6, label %loop_z.loop_body.us.preheader, label %entry.split

loop_z.loop_body.us.preheader:                    ; preds = %entry
  %9 = icmp ult i32 %x_loc28, 36
  %10 = bitcast i8 addrspace(1)* %fusion.36.raw to float addrspace(1)*
  %11 = mul nuw nsw i32 %4, 36864
  %12 = add nuw nsw i32 %8, %11
  %13 = zext i32 %12 to i64
  %param_0.7726.us = getelementptr inbounds float, float addrspace(1)* %10, i64 %13
  %param_0.7727.us = load float, float addrspace(1)* %param_0.7726.us, align 8, !invariant.load !66
  %add.266.i96.us = fadd float %param_0.7727.us, 0.000000e+00
  br i1 %9, label %output_x_in_tile-true29.us, label %loop_z.loop_header.critedge.us

output_x_in_tile-true29.us:                       ; preds = %loop_z.loop_body.us.preheader
  %14 = bitcast i8 addrspace(1)* %fusion.36.raw to float addrspace(1)*
  %15 = zext i32 %11 to i64
  %16 = zext i32 %7 to i64
  %17 = zext i32 %5 to i64
  %18 = add i64 %16, %17
  %19 = add i64 %18, %15
  %20 = getelementptr float, float addrspace(1)* %14, i64 %19
  %param_0.7731.us131 = getelementptr inbounds float, float addrspace(1)* %20, i64 1
  %param_0.7732.us = load float, float addrspace(1)* %param_0.7731.us131, align 4, !invariant.load !66
  %add.266.i95.us = fadd float %add.266.i96.us, %param_0.7732.us
  br label %loop_z.loop_header.critedge.us

loop_z.loop_header.critedge.us:                   ; preds = %output_x_in_tile-true29.us, %loop_z.loop_body.us.preheader
  %partial_reduction_result.0.0.us = phi float [ %add.266.i95.us, %output_x_in_tile-true29.us ], [ %add.266.i96.us, %loop_z.loop_body.us.preheader ]
  %21 = icmp ult i32 %x_loc28, 36
  %22 = bitcast i8 addrspace(1)* %fusion.36.raw to float addrspace(1)*
  %23 = or i32 %block_origin.z, 1
  %24 = mul nuw nsw i32 %23, 4608
  %25 = add nuw nsw i32 %8, %24
  %26 = zext i32 %25 to i64
  %param_0.7726.us.1 = getelementptr inbounds float, float addrspace(1)* %22, i64 %26
  %param_0.7727.us.1 = load float, float addrspace(1)* %param_0.7726.us.1, align 8, !invariant.load !66
  %add.266.i96.us.1 = fadd float %partial_reduction_result.0.0.us, %param_0.7727.us.1
  br i1 %21, label %output_x_in_tile-true29.us.1, label %loop_z.loop_header.critedge.us.1

entry.split:                                      ; preds = %entry
  %27 = icmp ult i32 %x_loc28, 36
  br i1 %27, label %loop_z.loop_body.us108.preheader, label %loop_z.loop_exit

loop_z.loop_body.us108.preheader:                 ; preds = %entry.split
  %28 = bitcast i8 addrspace(1)* %fusion.36.raw to float addrspace(1)*
  %29 = mul nuw nsw i32 %4, 36864
  %30 = zext i32 %29 to i64
  %31 = zext i32 %7 to i64
  %32 = zext i32 %5 to i64
  %33 = add i64 %31, %32
  %34 = add i64 %33, %30
  %35 = getelementptr float, float addrspace(1)* %28, i64 %34
  %param_0.7731.us119133 = getelementptr inbounds float, float addrspace(1)* %35, i64 1
  %param_0.7732.us120 = load float, float addrspace(1)* %param_0.7731.us119133, align 4, !invariant.load !66
  %add.266.i95.us121 = fadd float %param_0.7732.us120, 0.000000e+00
  %36 = or i32 %block_origin.z, 1
  %37 = mul nuw nsw i32 %36, 4608
  %38 = zext i32 %37 to i64
  %39 = add i64 %33, %38
  %40 = getelementptr float, float addrspace(1)* %28, i64 %39
  %param_0.7731.us119.1135 = getelementptr inbounds float, float addrspace(1)* %40, i64 1
  %param_0.7732.us120.1 = load float, float addrspace(1)* %param_0.7731.us119.1135, align 4, !invariant.load !66
  %add.266.i95.us121.1 = fadd float %add.266.i95.us121, %param_0.7732.us120.1
  %41 = add i32 %37, 4608
  %42 = zext i32 %41 to i64
  %43 = add i64 %33, %42
  %44 = getelementptr float, float addrspace(1)* %28, i64 %43
  %param_0.7731.us119.2137 = getelementptr inbounds float, float addrspace(1)* %44, i64 1
  %param_0.7732.us120.2 = load float, float addrspace(1)* %param_0.7731.us119.2137, align 4, !invariant.load !66
  %add.266.i95.us121.2 = fadd float %add.266.i95.us121.1, %param_0.7732.us120.2
  %45 = add i32 %41, 4608
  %46 = zext i32 %45 to i64
  %47 = add i64 %33, %46
  %48 = getelementptr float, float addrspace(1)* %28, i64 %47
  %param_0.7731.us119.3139 = getelementptr inbounds float, float addrspace(1)* %48, i64 1
  %param_0.7732.us120.3 = load float, float addrspace(1)* %param_0.7731.us119.3139, align 4, !invariant.load !66
  %add.266.i95.us121.3 = fadd float %add.266.i95.us121.2, %param_0.7732.us120.3
  %49 = add i32 %45, 4608
  %50 = zext i32 %49 to i64
  %51 = add i64 %33, %50
  %52 = getelementptr float, float addrspace(1)* %28, i64 %51
  %param_0.7731.us119.4141 = getelementptr inbounds float, float addrspace(1)* %52, i64 1
  %param_0.7732.us120.4 = load float, float addrspace(1)* %param_0.7731.us119.4141, align 4, !invariant.load !66
  %add.266.i95.us121.4 = fadd float %add.266.i95.us121.3, %param_0.7732.us120.4
  %53 = add i32 %49, 4608
  %54 = zext i32 %53 to i64
  %55 = add i64 %33, %54
  %56 = getelementptr float, float addrspace(1)* %28, i64 %55
  %param_0.7731.us119.5143 = getelementptr inbounds float, float addrspace(1)* %56, i64 1
  %param_0.7732.us120.5 = load float, float addrspace(1)* %param_0.7731.us119.5143, align 4, !invariant.load !66
  %add.266.i95.us121.5 = fadd float %add.266.i95.us121.4, %param_0.7732.us120.5
  %57 = add i32 %53, 4608
  %58 = zext i32 %57 to i64
  %59 = add i64 %33, %58
  %60 = getelementptr float, float addrspace(1)* %28, i64 %59
  %param_0.7731.us119.6145 = getelementptr inbounds float, float addrspace(1)* %60, i64 1
  %param_0.7732.us120.6 = load float, float addrspace(1)* %param_0.7731.us119.6145, align 4, !invariant.load !66
  %add.266.i95.us121.6 = fadd float %add.266.i95.us121.5, %param_0.7732.us120.6
  %61 = add i32 %57, 4608
  %62 = zext i32 %61 to i64
  %63 = add i64 %33, %62
  %64 = getelementptr float, float addrspace(1)* %28, i64 %63
  %param_0.7731.us119.7147 = getelementptr inbounds float, float addrspace(1)* %64, i64 1
  %param_0.7732.us120.7 = load float, float addrspace(1)* %param_0.7731.us119.7147, align 4, !invariant.load !66
  %add.266.i95.us121.7 = fadd float %add.266.i95.us121.6, %param_0.7732.us120.7
  br label %loop_z.loop_exit

reduce-group-0-after:                             ; preds = %reduction_atomic_update-true, %intra_warp_reduce_write-after
  ret void

loop_z.loop_exit:                                 ; preds = %output_x_in_tile-true29.us.7, %loop_z.loop_header.critedge.us.6, %loop_z.loop_body.us108.preheader, %entry.split
  %partial_reduction_result.0.1.lcssa = phi float [ %add.266.i95.us121.7, %loop_z.loop_body.us108.preheader ], [ 0.000000e+00, %entry.split ], [ %add.266.i95.us.7, %output_x_in_tile-true29.us.7 ], [ %add.266.i96.us.7, %loop_z.loop_header.critedge.us.6 ]
  %65 = bitcast i8 addrspace(1)* %alloc38126 to [128 x float] addrspace(1)*
  %66 = zext i32 %3 to i64
  %output_element_address = getelementptr inbounds [128 x float], [128 x float] addrspace(1)* %65, i64 0, i64 %66
  %67 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result.0.1.lcssa, i32 16, i32 31)
  %add.266.i = fadd float %partial_reduction_result.0.1.lcssa, %67
  %68 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.266.i, i32 8, i32 31)
  %add.266.i105 = fadd float %add.266.i, %68
  %69 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.266.i105, i32 4, i32 31)
  %add.266.i104 = fadd float %add.266.i105, %69
  %70 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.266.i104, i32 2, i32 31)
  %add.266.i103 = fadd float %add.266.i104, %70
  %71 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.266.i103, i32 1, i32 31)
  %72 = icmp eq i32 %1, 0
  %add.266.i102 = fadd float %add.266.i103, %71
  br i1 %72, label %intra_warp_reduce_write-true, label %intra_warp_reduce_write-after

intra_warp_reduce_write-after:                    ; preds = %intra_warp_reduce_write-true, %loop_z.loop_exit
  %73 = icmp eq i32 %1, 0
  tail call void @llvm.nvvm.barrier0()
  %74 = zext i32 %1 to i64
  %75 = getelementptr inbounds [1 x [32 x float]], [1 x [32 x float]] addrspace(3)* @shared_cache_02, i64 0, i64 0, i64 %74
  %76 = addrspacecast float addrspace(3)* %75 to float*
  store float 0.000000e+00, float addrspace(5)* %0, align 4
  %77 = select i1 %73, float* %76, float* %initial_value_addr
  %partial_reduction_result75 = load float, float* %77, align 4
  %78 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result75, i32 16, i32 31)
  %add.266.i101 = fadd float %partial_reduction_result75, %78
  %79 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.266.i101, i32 8, i32 31)
  %add.266.i100 = fadd float %add.266.i101, %79
  %80 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.266.i100, i32 4, i32 31)
  %add.266.i99 = fadd float %add.266.i100, %80
  %81 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.266.i99, i32 2, i32 31)
  %add.266.i98 = fadd float %add.266.i99, %81
  %82 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.266.i98, i32 1, i32 31)
  %add.266.i97 = fadd float %add.266.i98, %82
  store float %add.266.i97, float* %77, align 4
  br i1 %73, label %reduction_atomic_update-true, label %reduce-group-0-after

intra_warp_reduce_write-true:                     ; preds = %loop_z.loop_exit
  store float %add.266.i102, float addrspace(3)* getelementptr inbounds ([1 x [32 x float]], [1 x [32 x float]] addrspace(3)* @shared_cache_02, i64 0, i64 0, i64 0), align 16
  br label %intra_warp_reduce_write-after

reduction_atomic_update-true:                     ; preds = %intra_warp_reduce_write-after
  %source = load float, float addrspace(3)* %75, align 4
  %83 = atomicrmw fadd float addrspace(1)* %output_element_address, float %source seq_cst
  br label %reduce-group-0-after

output_x_in_tile-true29.us.1:                     ; preds = %loop_z.loop_header.critedge.us
  %84 = bitcast i8 addrspace(1)* %fusion.36.raw to float addrspace(1)*
  %85 = zext i32 %24 to i64
  %86 = zext i32 %7 to i64
  %87 = zext i32 %5 to i64
  %88 = add i64 %86, %87
  %89 = add i64 %88, %85
  %90 = getelementptr float, float addrspace(1)* %84, i64 %89
  %param_0.7731.us.1149 = getelementptr inbounds float, float addrspace(1)* %90, i64 1
  %param_0.7732.us.1 = load float, float addrspace(1)* %param_0.7731.us.1149, align 4, !invariant.load !66
  %add.266.i95.us.1 = fadd float %add.266.i96.us.1, %param_0.7732.us.1
  br label %loop_z.loop_header.critedge.us.1

loop_z.loop_header.critedge.us.1:                 ; preds = %output_x_in_tile-true29.us.1, %loop_z.loop_header.critedge.us
  %partial_reduction_result.0.0.us.1 = phi float [ %add.266.i95.us.1, %output_x_in_tile-true29.us.1 ], [ %add.266.i96.us.1, %loop_z.loop_header.critedge.us ]
  %91 = icmp ult i32 %x_loc28, 36
  %92 = bitcast i8 addrspace(1)* %fusion.36.raw to float addrspace(1)*
  %93 = add i32 %24, 4608
  %94 = add nuw nsw i32 %8, %93
  %95 = zext i32 %94 to i64
  %param_0.7726.us.2 = getelementptr inbounds float, float addrspace(1)* %92, i64 %95
  %param_0.7727.us.2 = load float, float addrspace(1)* %param_0.7726.us.2, align 8, !invariant.load !66
  %add.266.i96.us.2 = fadd float %partial_reduction_result.0.0.us.1, %param_0.7727.us.2
  br i1 %91, label %output_x_in_tile-true29.us.2, label %loop_z.loop_header.critedge.us.2

output_x_in_tile-true29.us.2:                     ; preds = %loop_z.loop_header.critedge.us.1
  %96 = bitcast i8 addrspace(1)* %fusion.36.raw to float addrspace(1)*
  %97 = zext i32 %93 to i64
  %98 = zext i32 %7 to i64
  %99 = zext i32 %5 to i64
  %100 = add i64 %98, %99
  %101 = add i64 %100, %97
  %102 = getelementptr float, float addrspace(1)* %96, i64 %101
  %param_0.7731.us.2151 = getelementptr inbounds float, float addrspace(1)* %102, i64 1
  %param_0.7732.us.2 = load float, float addrspace(1)* %param_0.7731.us.2151, align 4, !invariant.load !66
  %add.266.i95.us.2 = fadd float %add.266.i96.us.2, %param_0.7732.us.2
  br label %loop_z.loop_header.critedge.us.2

loop_z.loop_header.critedge.us.2:                 ; preds = %output_x_in_tile-true29.us.2, %loop_z.loop_header.critedge.us.1
  %partial_reduction_result.0.0.us.2 = phi float [ %add.266.i95.us.2, %output_x_in_tile-true29.us.2 ], [ %add.266.i96.us.2, %loop_z.loop_header.critedge.us.1 ]
  %103 = icmp ult i32 %x_loc28, 36
  %104 = bitcast i8 addrspace(1)* %fusion.36.raw to float addrspace(1)*
  %105 = add i32 %93, 4608
  %106 = add nuw nsw i32 %8, %105
  %107 = zext i32 %106 to i64
  %param_0.7726.us.3 = getelementptr inbounds float, float addrspace(1)* %104, i64 %107
  %param_0.7727.us.3 = load float, float addrspace(1)* %param_0.7726.us.3, align 8, !invariant.load !66
  %add.266.i96.us.3 = fadd float %partial_reduction_result.0.0.us.2, %param_0.7727.us.3
  br i1 %103, label %output_x_in_tile-true29.us.3, label %loop_z.loop_header.critedge.us.3

output_x_in_tile-true29.us.3:                     ; preds = %loop_z.loop_header.critedge.us.2
  %108 = bitcast i8 addrspace(1)* %fusion.36.raw to float addrspace(1)*
  %109 = zext i32 %105 to i64
  %110 = zext i32 %7 to i64
  %111 = zext i32 %5 to i64
  %112 = add i64 %110, %111
  %113 = add i64 %112, %109
  %114 = getelementptr float, float addrspace(1)* %108, i64 %113
  %param_0.7731.us.3153 = getelementptr inbounds float, float addrspace(1)* %114, i64 1
  %param_0.7732.us.3 = load float, float addrspace(1)* %param_0.7731.us.3153, align 4, !invariant.load !66
  %add.266.i95.us.3 = fadd float %add.266.i96.us.3, %param_0.7732.us.3
  br label %loop_z.loop_header.critedge.us.3

loop_z.loop_header.critedge.us.3:                 ; preds = %output_x_in_tile-true29.us.3, %loop_z.loop_header.critedge.us.2
  %partial_reduction_result.0.0.us.3 = phi float [ %add.266.i95.us.3, %output_x_in_tile-true29.us.3 ], [ %add.266.i96.us.3, %loop_z.loop_header.critedge.us.2 ]
  %115 = icmp ult i32 %x_loc28, 36
  %116 = bitcast i8 addrspace(1)* %fusion.36.raw to float addrspace(1)*
  %117 = add i32 %105, 4608
  %118 = add nuw nsw i32 %8, %117
  %119 = zext i32 %118 to i64
  %param_0.7726.us.4 = getelementptr inbounds float, float addrspace(1)* %116, i64 %119
  %param_0.7727.us.4 = load float, float addrspace(1)* %param_0.7726.us.4, align 8, !invariant.load !66
  %add.266.i96.us.4 = fadd float %partial_reduction_result.0.0.us.3, %param_0.7727.us.4
  br i1 %115, label %output_x_in_tile-true29.us.4, label %loop_z.loop_header.critedge.us.4

output_x_in_tile-true29.us.4:                     ; preds = %loop_z.loop_header.critedge.us.3
  %120 = bitcast i8 addrspace(1)* %fusion.36.raw to float addrspace(1)*
  %121 = zext i32 %117 to i64
  %122 = zext i32 %7 to i64
  %123 = zext i32 %5 to i64
  %124 = add i64 %122, %123
  %125 = add i64 %124, %121
  %126 = getelementptr float, float addrspace(1)* %120, i64 %125
  %param_0.7731.us.4155 = getelementptr inbounds float, float addrspace(1)* %126, i64 1
  %param_0.7732.us.4 = load float, float addrspace(1)* %param_0.7731.us.4155, align 4, !invariant.load !66
  %add.266.i95.us.4 = fadd float %add.266.i96.us.4, %param_0.7732.us.4
  br label %loop_z.loop_header.critedge.us.4

loop_z.loop_header.critedge.us.4:                 ; preds = %output_x_in_tile-true29.us.4, %loop_z.loop_header.critedge.us.3
  %partial_reduction_result.0.0.us.4 = phi float [ %add.266.i95.us.4, %output_x_in_tile-true29.us.4 ], [ %add.266.i96.us.4, %loop_z.loop_header.critedge.us.3 ]
  %127 = icmp ult i32 %x_loc28, 36
  %128 = bitcast i8 addrspace(1)* %fusion.36.raw to float addrspace(1)*
  %129 = add i32 %117, 4608
  %130 = add nuw nsw i32 %8, %129
  %131 = zext i32 %130 to i64
  %param_0.7726.us.5 = getelementptr inbounds float, float addrspace(1)* %128, i64 %131
  %param_0.7727.us.5 = load float, float addrspace(1)* %param_0.7726.us.5, align 8, !invariant.load !66
  %add.266.i96.us.5 = fadd float %partial_reduction_result.0.0.us.4, %param_0.7727.us.5
  br i1 %127, label %output_x_in_tile-true29.us.5, label %loop_z.loop_header.critedge.us.5

output_x_in_tile-true29.us.5:                     ; preds = %loop_z.loop_header.critedge.us.4
  %132 = bitcast i8 addrspace(1)* %fusion.36.raw to float addrspace(1)*
  %133 = zext i32 %129 to i64
  %134 = zext i32 %7 to i64
  %135 = zext i32 %5 to i64
  %136 = add i64 %134, %135
  %137 = add i64 %136, %133
  %138 = getelementptr float, float addrspace(1)* %132, i64 %137
  %param_0.7731.us.5157 = getelementptr inbounds float, float addrspace(1)* %138, i64 1
  %param_0.7732.us.5 = load float, float addrspace(1)* %param_0.7731.us.5157, align 4, !invariant.load !66
  %add.266.i95.us.5 = fadd float %add.266.i96.us.5, %param_0.7732.us.5
  br label %loop_z.loop_header.critedge.us.5

loop_z.loop_header.critedge.us.5:                 ; preds = %output_x_in_tile-true29.us.5, %loop_z.loop_header.critedge.us.4
  %partial_reduction_result.0.0.us.5 = phi float [ %add.266.i95.us.5, %output_x_in_tile-true29.us.5 ], [ %add.266.i96.us.5, %loop_z.loop_header.critedge.us.4 ]
  %139 = icmp ult i32 %x_loc28, 36
  %140 = bitcast i8 addrspace(1)* %fusion.36.raw to float addrspace(1)*
  %141 = add i32 %129, 4608
  %142 = add nuw nsw i32 %8, %141
  %143 = zext i32 %142 to i64
  %param_0.7726.us.6 = getelementptr inbounds float, float addrspace(1)* %140, i64 %143
  %param_0.7727.us.6 = load float, float addrspace(1)* %param_0.7726.us.6, align 8, !invariant.load !66
  %add.266.i96.us.6 = fadd float %partial_reduction_result.0.0.us.5, %param_0.7727.us.6
  br i1 %139, label %output_x_in_tile-true29.us.6, label %loop_z.loop_header.critedge.us.6

output_x_in_tile-true29.us.6:                     ; preds = %loop_z.loop_header.critedge.us.5
  %144 = bitcast i8 addrspace(1)* %fusion.36.raw to float addrspace(1)*
  %145 = zext i32 %141 to i64
  %146 = zext i32 %7 to i64
  %147 = zext i32 %5 to i64
  %148 = add i64 %146, %147
  %149 = add i64 %148, %145
  %150 = getelementptr float, float addrspace(1)* %144, i64 %149
  %param_0.7731.us.6159 = getelementptr inbounds float, float addrspace(1)* %150, i64 1
  %param_0.7732.us.6 = load float, float addrspace(1)* %param_0.7731.us.6159, align 4, !invariant.load !66
  %add.266.i95.us.6 = fadd float %add.266.i96.us.6, %param_0.7732.us.6
  br label %loop_z.loop_header.critedge.us.6

loop_z.loop_header.critedge.us.6:                 ; preds = %output_x_in_tile-true29.us.6, %loop_z.loop_header.critedge.us.5
  %partial_reduction_result.0.0.us.6 = phi float [ %add.266.i95.us.6, %output_x_in_tile-true29.us.6 ], [ %add.266.i96.us.6, %loop_z.loop_header.critedge.us.5 ]
  %151 = icmp ult i32 %x_loc28, 36
  %152 = bitcast i8 addrspace(1)* %fusion.36.raw to float addrspace(1)*
  %153 = add i32 %141, 4608
  %154 = add nuw nsw i32 %8, %153
  %155 = zext i32 %154 to i64
  %param_0.7726.us.7 = getelementptr inbounds float, float addrspace(1)* %152, i64 %155
  %param_0.7727.us.7 = load float, float addrspace(1)* %param_0.7726.us.7, align 8, !invariant.load !66
  %add.266.i96.us.7 = fadd float %partial_reduction_result.0.0.us.6, %param_0.7727.us.7
  br i1 %151, label %output_x_in_tile-true29.us.7, label %loop_z.loop_exit

output_x_in_tile-true29.us.7:                     ; preds = %loop_z.loop_header.critedge.us.6
  %156 = bitcast i8 addrspace(1)* %fusion.36.raw to float addrspace(1)*
  %157 = zext i32 %153 to i64
  %158 = zext i32 %7 to i64
  %159 = zext i32 %5 to i64
  %160 = add i64 %158, %159
  %161 = add i64 %160, %157
  %162 = getelementptr float, float addrspace(1)* %156, i64 %161
  %param_0.7731.us.7161 = getelementptr inbounds float, float addrspace(1)* %162, i64 1
  %param_0.7732.us.7 = load float, float addrspace(1)* %param_0.7731.us.7161, align 4, !invariant.load !66
  %add.266.i95.us.7 = fadd float %add.266.i96.us.7, %param_0.7732.us.7
  br label %loop_z.loop_exit
}

; Function Attrs: nounwind
define void @fusion_15(i8* noalias nocapture readonly align 64 dereferenceable(3200) %alloc29, i8* noalias align 64 dereferenceable(512) %alloc33, i8* noalias align 64 dereferenceable(512) %alloc34, i8* noalias align 64 dereferenceable(512) %alloc35, i8* noalias align 64 dereferenceable(512) %alloc36, i8* noalias align 64 dereferenceable(512) %alloc37, i8* noalias align 64 dereferenceable(512) %alloc38, i8* noalias nocapture readonly align 16 dereferenceable(512) %alloc39, i8* noalias nocapture readonly align 16 dereferenceable(512) %alloc40, i8* noalias nocapture readonly align 16 dereferenceable(512) %alloc41, i8* noalias nocapture readonly align 16 dereferenceable(512) %alloc42, i8* noalias nocapture readonly align 16 dereferenceable(512) %alloc43, i8* noalias nocapture readonly align 16 dereferenceable(512) %alloc44, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc84, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc86, i8* noalias nocapture align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #0 {
entry:
  %temp_buf235 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc86233 = addrspacecast i8* %alloc86 to i8 addrspace(1)*
  %alloc84231 = addrspacecast i8* %alloc84 to i8 addrspace(1)*
  %alloc44229 = addrspacecast i8* %alloc44 to i8 addrspace(1)*
  %alloc43227 = addrspacecast i8* %alloc43 to i8 addrspace(1)*
  %alloc42225 = addrspacecast i8* %alloc42 to i8 addrspace(1)*
  %alloc41223 = addrspacecast i8* %alloc41 to i8 addrspace(1)*
  %alloc40221 = addrspacecast i8* %alloc40 to i8 addrspace(1)*
  %alloc39219 = addrspacecast i8* %alloc39 to i8 addrspace(1)*
  %alloc38217 = addrspacecast i8* %alloc38 to i8 addrspace(1)*
  %alloc37215 = addrspacecast i8* %alloc37 to i8 addrspace(1)*
  %alloc36213 = addrspacecast i8* %alloc36 to i8 addrspace(1)*
  %alloc35211 = addrspacecast i8* %alloc35 to i8 addrspace(1)*
  %alloc34209 = addrspacecast i8* %alloc34 to i8 addrspace(1)*
  %alloc33207 = addrspacecast i8* %alloc33 to i8 addrspace(1)*
  %alloc29205 = addrspacecast i8* %alloc29 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !76
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !70
  %2 = or i32 %1, %0
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %emit_mof_tuple-true, label %emit_mof_tuple-after

emit_mof_tuple-after:                             ; preds = %emit_mof_tuple-true, %entry
  %arg5.6.typed = bitcast i8 addrspace(1)* %alloc86233 to float addrspace(1)*
  %arg4.5.typed = bitcast i8 addrspace(1)* %alloc84231 to float addrspace(1)*
  %fusion.31.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf235, i64 1141055488
  %fusion.31.typed = bitcast i8 addrspace(1)* %fusion.31.raw to float addrspace(1)*
  %4 = shl nuw nsw i32 %0, 5
  %linear_index = add nuw nsw i32 %4, %1
  %linear_index_base = shl nuw nsw i32 %linear_index, 2
  %5 = bitcast i8 addrspace(1)* %alloc39219 to float addrspace(1)*
  %6 = zext i32 %linear_index_base to i64
  %param_0.18 = getelementptr float, float addrspace(1)* %5, i64 %6
  %7 = bitcast float addrspace(1)* %param_0.18 to <4 x float> addrspace(1)*
  %8 = load <4 x float>, <4 x float> addrspace(1)* %7, align 16, !invariant.load !66
  %param_0.1816300 = extractelement <4 x float> %8, i32 0
  %param_0.1841301 = extractelement <4 x float> %8, i32 1
  %param_0.1896302 = extractelement <4 x float> %8, i32 2
  %param_0.18151303 = extractelement <4 x float> %8, i32 3
  %9 = bitcast i8 addrspace(1)* %alloc41223 to float addrspace(1)*
  %param_2.291 = getelementptr float, float addrspace(1)* %9, i64 %6
  %10 = bitcast float addrspace(1)* %param_2.291 to <4 x float> addrspace(1)*
  %11 = load <4 x float>, <4 x float> addrspace(1)* %10, align 16, !invariant.load !66
  %param_2.29117304 = extractelement <4 x float> %11, i32 0
  %param_2.29143305 = extractelement <4 x float> %11, i32 1
  %param_2.29198306 = extractelement <4 x float> %11, i32 2
  %param_2.291153307 = extractelement <4 x float> %11, i32 3
  %12 = bitcast i8 addrspace(1)* %alloc38217 to float addrspace(1)*
  %param_4.113 = getelementptr float, float addrspace(1)* %12, i64 %6
  %13 = bitcast float addrspace(1)* %param_4.113 to <4 x float> addrspace(1)*
  %14 = load <4 x float>, <4 x float> addrspace(1)* %13, align 16
  %param_4.11318308 = extractelement <4 x float> %14, i32 0
  %param_4.11345309 = extractelement <4 x float> %14, i32 1
  %param_4.113100310 = extractelement <4 x float> %14, i32 2
  %param_4.113155311 = extractelement <4 x float> %14, i32 3
  %subtract.18.clone.1 = fsub float %param_4.11318308, %param_2.29117304
  %param_3.146 = load float, float addrspace(1)* %arg4.5.typed, align 16, !invariant.load !66
  %subtract.48.clone.1 = fsub float 1.000000e+00, %param_3.146
  %multiply.23.clone.1 = fmul float %subtract.18.clone.1, %subtract.48.clone.1
  %add.18.clone.1 = fadd float %param_2.29117304, %multiply.23.clone.1
  %param_1.249 = load float, float addrspace(1)* %fusion.31.typed, align 64, !invariant.load !66
  %multiply.20 = fmul float %param_1.249, %add.18.clone.1
  %15 = bitcast i8 addrspace(1)* %alloc42225 to float addrspace(1)*
  %param_5.113 = getelementptr float, float addrspace(1)* %15, i64 %6
  %16 = bitcast float addrspace(1)* %param_5.113 to <4 x float> addrspace(1)*
  %17 = load <4 x float>, <4 x float> addrspace(1)* %16, align 16, !invariant.load !66
  %param_5.11321312 = extractelement <4 x float> %17, i32 0
  %param_5.11354313 = extractelement <4 x float> %17, i32 1
  %param_5.113109314 = extractelement <4 x float> %17, i32 2
  %param_5.113164315 = extractelement <4 x float> %17, i32 3
  %multiply.22.clone.1 = fmul float %param_4.11318308, %param_4.11318308
  %subtract.17.clone.1 = fsub float %multiply.22.clone.1, %param_5.11321312
  %param_6.96 = load float, float addrspace(1)* %arg5.6.typed, align 16, !invariant.load !66
  %subtract.49.clone.1 = fsub float 1.000000e+00, %param_6.96
  %multiply.21.clone.1 = fmul float %subtract.17.clone.1, %subtract.49.clone.1
  %add.17.clone.1 = fadd float %param_5.11321312, %multiply.21.clone.1
  %18 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.17.clone.1) #0
  %add.16 = fadd float %18, 0x3E7AD7F2A0000000
  %divide.6 = fdiv float %multiply.20, %add.16
  %subtract.16 = fsub float %param_0.1816300, %divide.6
  %19 = bitcast i8 addrspace(1)* %alloc40221 to float addrspace(1)*
  %param_7.122 = getelementptr float, float addrspace(1)* %19, i64 %6
  %20 = bitcast float addrspace(1)* %param_7.122 to <4 x float> addrspace(1)*
  %21 = load <4 x float>, <4 x float> addrspace(1)* %20, align 16, !invariant.load !66
  %param_7.12228316 = extractelement <4 x float> %21, i32 0
  %param_7.12269317 = extractelement <4 x float> %21, i32 1
  %param_7.122124318 = extractelement <4 x float> %21, i32 2
  %param_7.122179319 = extractelement <4 x float> %21, i32 3
  %22 = bitcast i8 addrspace(1)* %alloc44229 to float addrspace(1)*
  %param_10.32 = getelementptr float, float addrspace(1)* %22, i64 %6
  %23 = bitcast float addrspace(1)* %param_10.32 to <4 x float> addrspace(1)*
  %24 = load <4 x float>, <4 x float> addrspace(1)* %23, align 16, !invariant.load !66
  %param_10.3229320 = extractelement <4 x float> %24, i32 0
  %param_10.3271321 = extractelement <4 x float> %24, i32 1
  %param_10.32126322 = extractelement <4 x float> %24, i32 2
  %param_10.32181323 = extractelement <4 x float> %24, i32 3
  %25 = bitcast i8 addrspace(1)* %alloc29205 to float addrspace(1)*
  %param_9.57 = getelementptr float, float addrspace(1)* %25, i64 %6
  %26 = bitcast float addrspace(1)* %param_9.57 to <4 x float> addrspace(1)*
  %27 = load <4 x float>, <4 x float> addrspace(1)* %26, align 16, !invariant.load !66
  %param_9.5730324 = extractelement <4 x float> %27, i32 0
  %param_9.5773325 = extractelement <4 x float> %27, i32 1
  %param_9.57128326 = extractelement <4 x float> %27, i32 2
  %param_9.57183327 = extractelement <4 x float> %27, i32 3
  %subtract.12.clone.1.clone.1 = fsub float %param_9.5730324, %param_10.3229320
  %multiply.15.clone.1.clone.1 = fmul float %subtract.48.clone.1, %subtract.12.clone.1.clone.1
  %add.12.clone.1.clone.1 = fadd float %param_10.3229320, %multiply.15.clone.1.clone.1
  %multiply.12.clone.1 = fmul float %param_1.249, %add.12.clone.1.clone.1
  %28 = bitcast i8 addrspace(1)* %alloc43227 to float addrspace(1)*
  %param_8.75 = getelementptr float, float addrspace(1)* %28, i64 %6
  %29 = bitcast float addrspace(1)* %param_8.75 to <4 x float> addrspace(1)*
  %30 = load <4 x float>, <4 x float> addrspace(1)* %29, align 16, !invariant.load !66
  %param_8.7533328 = extractelement <4 x float> %30, i32 0
  %param_8.7581329 = extractelement <4 x float> %30, i32 1
  %param_8.75136330 = extractelement <4 x float> %30, i32 2
  %param_8.75191331 = extractelement <4 x float> %30, i32 3
  %multiply.14.clone.1.clone.1 = fmul float %param_9.5730324, %param_9.5730324
  %subtract.11.clone.1.clone.1 = fsub float %multiply.14.clone.1.clone.1, %param_8.7533328
  %multiply.13.clone.1.clone.1 = fmul float %subtract.49.clone.1, %subtract.11.clone.1.clone.1
  %add.11.clone.1.clone.1 = fadd float %param_8.7533328, %multiply.13.clone.1.clone.1
  %31 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.11.clone.1.clone.1) #0
  %add.10.clone.1 = fadd float %31, 0x3E7AD7F2A0000000
  %divide.4.clone.1 = fdiv float %multiply.12.clone.1, %add.10.clone.1
  %subtract.10.clone.1 = fsub float %param_7.12228316, %divide.4.clone.1
  %32 = bitcast i8 addrspace(1)* %alloc37215 to float addrspace(1)*
  %33 = getelementptr float, float addrspace(1)* %32, i64 %6
  %34 = bitcast i8 addrspace(1)* %alloc36213 to float addrspace(1)*
  %35 = getelementptr float, float addrspace(1)* %34, i64 %6
  %36 = bitcast i8 addrspace(1)* %alloc35211 to float addrspace(1)*
  %37 = getelementptr float, float addrspace(1)* %36, i64 %6
  %38 = bitcast i8 addrspace(1)* %alloc34209 to float addrspace(1)*
  %39 = getelementptr float, float addrspace(1)* %38, i64 %6
  %40 = bitcast i8 addrspace(1)* %alloc33207 to float addrspace(1)*
  %41 = getelementptr float, float addrspace(1)* %40, i64 %6
  %subtract.18.clone.148 = fsub float %param_4.11345309, %param_2.29143305
  %multiply.23.clone.149 = fmul float %subtract.48.clone.1, %subtract.18.clone.148
  %add.18.clone.150 = fadd float %param_2.29143305, %multiply.23.clone.149
  %multiply.2052 = fmul float %param_1.249, %add.18.clone.150
  %multiply.22.clone.159 = fmul float %param_4.11345309, %param_4.11345309
  %subtract.17.clone.162 = fsub float %multiply.22.clone.159, %param_5.11354313
  %multiply.21.clone.163 = fmul float %subtract.49.clone.1, %subtract.17.clone.162
  %add.17.clone.164 = fadd float %param_5.11354313, %multiply.21.clone.163
  %42 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.17.clone.164) #0
  %add.1665 = fadd float %42, 0x3E7AD7F2A0000000
  %divide.666 = fdiv float %multiply.2052, %add.1665
  %subtract.1667 = fsub float %param_0.1841301, %divide.666
  %subtract.12.clone.1.clone.176 = fsub float %param_9.5773325, %param_10.3271321
  %multiply.15.clone.1.clone.177 = fmul float %subtract.48.clone.1, %subtract.12.clone.1.clone.176
  %add.12.clone.1.clone.178 = fadd float %param_10.3271321, %multiply.15.clone.1.clone.177
  %multiply.12.clone.179 = fmul float %param_1.249, %add.12.clone.1.clone.178
  %multiply.14.clone.1.clone.186 = fmul float %param_9.5773325, %param_9.5773325
  %subtract.11.clone.1.clone.189 = fsub float %multiply.14.clone.1.clone.186, %param_8.7581329
  %multiply.13.clone.1.clone.190 = fmul float %subtract.49.clone.1, %subtract.11.clone.1.clone.189
  %add.11.clone.1.clone.191 = fadd float %param_8.7581329, %multiply.13.clone.1.clone.190
  %43 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.11.clone.1.clone.191) #0
  %add.10.clone.192 = fadd float %43, 0x3E7AD7F2A0000000
  %divide.4.clone.193 = fdiv float %multiply.12.clone.179, %add.10.clone.192
  %subtract.10.clone.194 = fsub float %param_7.12269317, %divide.4.clone.193
  %subtract.18.clone.1103 = fsub float %param_4.113100310, %param_2.29198306
  %multiply.23.clone.1104 = fmul float %subtract.48.clone.1, %subtract.18.clone.1103
  %add.18.clone.1105 = fadd float %param_2.29198306, %multiply.23.clone.1104
  %multiply.20107 = fmul float %param_1.249, %add.18.clone.1105
  %multiply.22.clone.1114 = fmul float %param_4.113100310, %param_4.113100310
  %subtract.17.clone.1117 = fsub float %multiply.22.clone.1114, %param_5.113109314
  %multiply.21.clone.1118 = fmul float %subtract.49.clone.1, %subtract.17.clone.1117
  %add.17.clone.1119 = fadd float %param_5.113109314, %multiply.21.clone.1118
  %44 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.17.clone.1119) #0
  %add.16120 = fadd float %44, 0x3E7AD7F2A0000000
  %divide.6121 = fdiv float %multiply.20107, %add.16120
  %subtract.16122 = fsub float %param_0.1896302, %divide.6121
  %subtract.12.clone.1.clone.1131 = fsub float %param_9.57128326, %param_10.32126322
  %multiply.15.clone.1.clone.1132 = fmul float %subtract.48.clone.1, %subtract.12.clone.1.clone.1131
  %add.12.clone.1.clone.1133 = fadd float %param_10.32126322, %multiply.15.clone.1.clone.1132
  %multiply.12.clone.1134 = fmul float %param_1.249, %add.12.clone.1.clone.1133
  %multiply.14.clone.1.clone.1141 = fmul float %param_9.57128326, %param_9.57128326
  %subtract.11.clone.1.clone.1144 = fsub float %multiply.14.clone.1.clone.1141, %param_8.75136330
  %multiply.13.clone.1.clone.1145 = fmul float %subtract.49.clone.1, %subtract.11.clone.1.clone.1144
  %add.11.clone.1.clone.1146 = fadd float %param_8.75136330, %multiply.13.clone.1.clone.1145
  %45 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.11.clone.1.clone.1146) #0
  %add.10.clone.1147 = fadd float %45, 0x3E7AD7F2A0000000
  %divide.4.clone.1148 = fdiv float %multiply.12.clone.1134, %add.10.clone.1147
  %subtract.10.clone.1149 = fsub float %param_7.122124318, %divide.4.clone.1148
  %subtract.18.clone.1158 = fsub float %param_4.113155311, %param_2.291153307
  %multiply.23.clone.1159 = fmul float %subtract.48.clone.1, %subtract.18.clone.1158
  %add.18.clone.1160 = fadd float %param_2.291153307, %multiply.23.clone.1159
  %multiply.20162 = fmul float %param_1.249, %add.18.clone.1160
  %multiply.22.clone.1169 = fmul float %param_4.113155311, %param_4.113155311
  %subtract.17.clone.1172 = fsub float %multiply.22.clone.1169, %param_5.113164315
  %multiply.21.clone.1173 = fmul float %subtract.49.clone.1, %subtract.17.clone.1172
  %add.17.clone.1174 = fadd float %param_5.113164315, %multiply.21.clone.1173
  %46 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.17.clone.1174) #0
  %add.16175 = fadd float %46, 0x3E7AD7F2A0000000
  %divide.6176 = fdiv float %multiply.20162, %add.16175
  %subtract.16177 = fsub float %param_0.18151303, %divide.6176
  %subtract.12.clone.1.clone.1186 = fsub float %param_9.57183327, %param_10.32181323
  %multiply.15.clone.1.clone.1187 = fmul float %subtract.48.clone.1, %subtract.12.clone.1.clone.1186
  %add.12.clone.1.clone.1188 = fadd float %param_10.32181323, %multiply.15.clone.1.clone.1187
  %multiply.12.clone.1189 = fmul float %param_1.249, %add.12.clone.1.clone.1188
  %multiply.14.clone.1.clone.1196 = fmul float %param_9.57183327, %param_9.57183327
  %subtract.11.clone.1.clone.1199 = fsub float %multiply.14.clone.1.clone.1196, %param_8.75191331
  %multiply.13.clone.1.clone.1200 = fmul float %subtract.49.clone.1, %subtract.11.clone.1.clone.1199
  %add.11.clone.1.clone.1201 = fadd float %param_8.75191331, %multiply.13.clone.1.clone.1200
  %47 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.11.clone.1.clone.1201) #0
  %add.10.clone.1202 = fadd float %47, 0x3E7AD7F2A0000000
  %divide.4.clone.1203 = fdiv float %multiply.12.clone.1189, %add.10.clone.1202
  %subtract.10.clone.1204 = fsub float %param_7.122179319, %divide.4.clone.1203
  %48 = insertelement <4 x float> undef, float %subtract.16, i32 0
  %49 = insertelement <4 x float> %48, float %subtract.1667, i32 1
  %50 = insertelement <4 x float> %49, float %subtract.16122, i32 2
  %51 = insertelement <4 x float> %50, float %subtract.16177, i32 3
  %52 = bitcast float addrspace(1)* %param_4.113 to <4 x float> addrspace(1)*
  store <4 x float> %51, <4 x float> addrspace(1)* %52, align 16
  %53 = insertelement <4 x float> undef, float %add.18.clone.1, i32 0
  %54 = insertelement <4 x float> %53, float %add.18.clone.150, i32 1
  %55 = insertelement <4 x float> %54, float %add.18.clone.1105, i32 2
  %56 = insertelement <4 x float> %55, float %add.18.clone.1160, i32 3
  %57 = bitcast float addrspace(1)* %33 to <4 x float> addrspace(1)*
  store <4 x float> %56, <4 x float> addrspace(1)* %57, align 16
  %58 = insertelement <4 x float> undef, float %add.17.clone.1, i32 0
  %59 = insertelement <4 x float> %58, float %add.17.clone.164, i32 1
  %60 = insertelement <4 x float> %59, float %add.17.clone.1119, i32 2
  %61 = insertelement <4 x float> %60, float %add.17.clone.1174, i32 3
  %62 = bitcast float addrspace(1)* %35 to <4 x float> addrspace(1)*
  store <4 x float> %61, <4 x float> addrspace(1)* %62, align 16
  %63 = insertelement <4 x float> undef, float %subtract.10.clone.1, i32 0
  %64 = insertelement <4 x float> %63, float %subtract.10.clone.194, i32 1
  %65 = insertelement <4 x float> %64, float %subtract.10.clone.1149, i32 2
  %66 = insertelement <4 x float> %65, float %subtract.10.clone.1204, i32 3
  %67 = bitcast float addrspace(1)* %37 to <4 x float> addrspace(1)*
  store <4 x float> %66, <4 x float> addrspace(1)* %67, align 16
  %68 = insertelement <4 x float> undef, float %add.12.clone.1.clone.1, i32 0
  %69 = insertelement <4 x float> %68, float %add.12.clone.1.clone.178, i32 1
  %70 = insertelement <4 x float> %69, float %add.12.clone.1.clone.1133, i32 2
  %71 = insertelement <4 x float> %70, float %add.12.clone.1.clone.1188, i32 3
  %72 = bitcast float addrspace(1)* %39 to <4 x float> addrspace(1)*
  store <4 x float> %71, <4 x float> addrspace(1)* %72, align 16
  %73 = insertelement <4 x float> undef, float %add.11.clone.1.clone.1, i32 0
  %74 = insertelement <4 x float> %73, float %add.11.clone.1.clone.191, i32 1
  %75 = insertelement <4 x float> %74, float %add.11.clone.1.clone.1146, i32 2
  %76 = insertelement <4 x float> %75, float %add.11.clone.1.clone.1201, i32 3
  %77 = bitcast float addrspace(1)* %41 to <4 x float> addrspace(1)*
  store <4 x float> %76, <4 x float> addrspace(1)* %77, align 16
  ret void

emit_mof_tuple-true:                              ; preds = %entry
  %fusion.15.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf235, i64 1141056512
  %78 = bitcast i8 addrspace(1)* %fusion.15.raw to i8* addrspace(1)*
  %79 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf235, i64 1141056520
  %80 = ptrtoint i8* %alloc38 to i64
  %81 = insertelement <2 x i64> undef, i64 %80, i32 0
  %82 = ptrtoint i8* %alloc37 to i64
  %83 = insertelement <2 x i64> %81, i64 %82, i32 1
  %84 = bitcast i8* addrspace(1)* %78 to <2 x i64> addrspace(1)*
  store <2 x i64> %83, <2 x i64> addrspace(1)* %84, align 64
  %85 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf235, i64 1141056528
  %86 = bitcast i8 addrspace(1)* %85 to i8* addrspace(1)*
  %87 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf235, i64 1141056536
  %88 = ptrtoint i8* %alloc36 to i64
  %89 = insertelement <2 x i64> undef, i64 %88, i32 0
  %90 = ptrtoint i8* %alloc35 to i64
  %91 = insertelement <2 x i64> %89, i64 %90, i32 1
  %92 = bitcast i8* addrspace(1)* %86 to <2 x i64> addrspace(1)*
  store <2 x i64> %91, <2 x i64> addrspace(1)* %92, align 16
  %93 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf235, i64 1141056544
  %94 = bitcast i8 addrspace(1)* %93 to i8* addrspace(1)*
  %95 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf235, i64 1141056552
  %96 = ptrtoint i8* %alloc34 to i64
  %97 = insertelement <2 x i64> undef, i64 %96, i32 0
  %98 = ptrtoint i8* %alloc33 to i64
  %99 = insertelement <2 x i64> %97, i64 %98, i32 1
  %100 = bitcast i8* addrspace(1)* %94 to <2 x i64> addrspace(1)*
  store <2 x i64> %99, <2 x i64> addrspace(1)* %100, align 32
  br label %emit_mof_tuple-after
}

; Function Attrs: nounwind
define void @fusion_55(i8* noalias align 64 dereferenceable(819200) %alloc7, i8* noalias align 64 dereferenceable(819200) %alloc8, i8* noalias align 64 dereferenceable(819200) %alloc9, i8* noalias nocapture readonly align 16 dereferenceable(819200) %alloc10, i8* noalias nocapture readonly align 16 dereferenceable(819200) %alloc11, i8* noalias nocapture readonly align 16 dereferenceable(819200) %alloc12, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc84, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc86, i8* noalias nocapture align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #0 {
entry:
  %temp_buf108 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc86106 = addrspacecast i8* %alloc86 to i8 addrspace(1)*
  %alloc84104 = addrspacecast i8* %alloc84 to i8 addrspace(1)*
  %alloc12102 = addrspacecast i8* %alloc12 to i8 addrspace(1)*
  %alloc11100 = addrspacecast i8* %alloc11 to i8 addrspace(1)*
  %alloc1098 = addrspacecast i8* %alloc10 to i8 addrspace(1)*
  %alloc996 = addrspacecast i8* %alloc9 to i8 addrspace(1)*
  %alloc894 = addrspacecast i8* %alloc8 to i8 addrspace(1)*
  %alloc792 = addrspacecast i8* %alloc7 to i8 addrspace(1)*
  %get-tuple-element.73.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf108, i64 167149632
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !76
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !70
  %2 = or i32 %1, %0
  %3 = icmp eq i32 %2, 0
  %4 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf108, i64 1141056328
  br i1 %3, label %emit_mof_tuple-true, label %emit_mof_tuple-after

emit_mof_tuple-after:                             ; preds = %emit_mof_tuple-true, %entry
  %5 = bitcast i8 addrspace(1)* %alloc1098 to [5 x [5 x [64 x [128 x float]]]] addrspace(1)*
  %6 = bitcast i8 addrspace(1)* %alloc12102 to [5 x [5 x [64 x [128 x float]]]] addrspace(1)*
  %7 = bitcast i8 addrspace(1)* %alloc11100 to [5 x [5 x [64 x [128 x float]]]] addrspace(1)*
  %8 = bitcast i8 addrspace(1)* %get-tuple-element.73.raw to [128 x [64 x [5 x [5 x float]]]] addrspace(1)*
  %fusion.31.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf108, i64 1141055488
  %fusion.31.typed = bitcast i8 addrspace(1)* %fusion.31.raw to float addrspace(1)*
  %arg5.6.typed = bitcast i8 addrspace(1)* %alloc86106 to float addrspace(1)*
  %arg4.5.typed = bitcast i8 addrspace(1)* %alloc84104 to float addrspace(1)*
  %9 = shl nuw nsw i32 %0, 8
  %linear_index = add nuw nsw i32 %9, %1
  %linear_index_base = shl nuw nsw i32 %linear_index, 2
  %10 = and i32 %linear_index_base, 124
  %11 = lshr i32 %linear_index, 5
  %12 = and i32 %11, 63
  %13 = lshr i32 %linear_index, 11
  %.lhs.trunc = trunc i32 %13 to i8
  %14 = urem i8 %.lhs.trunc, 5
  %.lhs.trunc90 = trunc i32 %linear_index to i16
  %15 = udiv i16 %.lhs.trunc90, 10240
  %linear_index7 = or i32 %linear_index_base, 1
  %16 = and i32 %linear_index7, 125
  %linear_index8 = or i32 %linear_index_base, 2
  %17 = and i32 %linear_index8, 126
  %linear_index9 = or i32 %linear_index_base, 3
  %18 = and i32 %linear_index9, 127
  %19 = zext i16 %15 to i64
  %20 = zext i8 %14 to i64
  %21 = zext i32 %12 to i64
  %22 = zext i32 %10 to i64
  %param_2.281 = getelementptr inbounds [5 x [5 x [64 x [128 x float]]]], [5 x [5 x [64 x [128 x float]]]] addrspace(1)* %7, i64 0, i64 %19, i64 %20, i64 %21, i64 %22
  %param_2.28110 = load float, float addrspace(1)* %param_2.281, align 16, !invariant.load !66
  %param_1.244 = getelementptr inbounds [128 x [64 x [5 x [5 x float]]]], [128 x [64 x [5 x [5 x float]]]] addrspace(1)* %8, i64 0, i64 %22, i64 %21, i64 %19, i64 %20
  %param_1.24411 = load float, float addrspace(1)* %param_1.244, align 4, !invariant.load !66
  %subtract.115 = fsub float %param_1.24411, %param_2.28110
  %param_0.153 = load float, float addrspace(1)* %arg4.5.typed, align 16, !invariant.load !66
  %subtract.114 = fsub float 1.000000e+00, %param_0.153
  %multiply.95 = fmul float %subtract.115, %subtract.114
  %add.70 = fadd float %param_2.28110, %multiply.95
  %param_6.92 = getelementptr inbounds [5 x [5 x [64 x [128 x float]]]], [5 x [5 x [64 x [128 x float]]]] addrspace(1)* %5, i64 0, i64 %19, i64 %20, i64 %21, i64 %22
  %param_6.9212 = load float, float addrspace(1)* %param_6.92, align 16, !invariant.load !66
  %param_5.107 = load float, float addrspace(1)* %fusion.31.typed, align 64, !invariant.load !66
  %multiply.16.clone.1 = fmul float %param_5.107, %add.70
  %param_4.109 = getelementptr inbounds [5 x [5 x [64 x [128 x float]]]], [5 x [5 x [64 x [128 x float]]]] addrspace(1)* %6, i64 0, i64 %19, i64 %20, i64 %21, i64 %22
  %param_4.10913 = load float, float addrspace(1)* %param_4.109, align 16, !invariant.load !66
  %multiply.87.clone.1 = fmul float %param_1.24411, %param_1.24411
  %subtract.103.clone.1 = fsub float %multiply.87.clone.1, %param_4.10913
  %param_3.144 = load float, float addrspace(1)* %arg5.6.typed, align 16, !invariant.load !66
  %subtract.102.clone.1 = fsub float 1.000000e+00, %param_3.144
  %multiply.86.clone.1 = fmul float %subtract.103.clone.1, %subtract.102.clone.1
  %add.63.clone.1 = fadd float %param_4.10913, %multiply.86.clone.1
  %23 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.63.clone.1) #0
  %add.13.clone.1 = fadd float %23, 0x3E7AD7F2A0000000
  %divide.5.clone.1 = fdiv float %multiply.16.clone.1, %add.13.clone.1
  %subtract.13.clone.1 = fsub float %param_6.9212, %divide.5.clone.1
  %24 = bitcast i8 addrspace(1)* %alloc792 to float addrspace(1)*
  %25 = zext i32 %linear_index_base to i64
  %26 = getelementptr float, float addrspace(1)* %24, i64 %25
  %27 = bitcast i8 addrspace(1)* %alloc894 to float addrspace(1)*
  %28 = getelementptr float, float addrspace(1)* %27, i64 %25
  %29 = bitcast i8 addrspace(1)* %alloc996 to float addrspace(1)*
  %30 = getelementptr float, float addrspace(1)* %29, i64 %25
  %31 = zext i32 %16 to i64
  %param_2.28118 = getelementptr inbounds [5 x [5 x [64 x [128 x float]]]], [5 x [5 x [64 x [128 x float]]]] addrspace(1)* %7, i64 0, i64 %19, i64 %20, i64 %21, i64 %31
  %param_2.28119 = load float, float addrspace(1)* %param_2.28118, align 4, !invariant.load !66
  %param_1.24420 = getelementptr inbounds [128 x [64 x [5 x [5 x float]]]], [128 x [64 x [5 x [5 x float]]]] addrspace(1)* %8, i64 0, i64 %31, i64 %21, i64 %19, i64 %20
  %param_1.24421 = load float, float addrspace(1)* %param_1.24420, align 4, !invariant.load !66
  %subtract.11522 = fsub float %param_1.24421, %param_2.28119
  %multiply.9523 = fmul float %subtract.114, %subtract.11522
  %add.7024 = fadd float %param_2.28119, %multiply.9523
  %param_6.9225 = getelementptr inbounds [5 x [5 x [64 x [128 x float]]]], [5 x [5 x [64 x [128 x float]]]] addrspace(1)* %5, i64 0, i64 %19, i64 %20, i64 %21, i64 %31
  %param_6.9226 = load float, float addrspace(1)* %param_6.9225, align 4, !invariant.load !66
  %multiply.16.clone.128 = fmul float %param_5.107, %add.7024
  %param_4.10929 = getelementptr inbounds [5 x [5 x [64 x [128 x float]]]], [5 x [5 x [64 x [128 x float]]]] addrspace(1)* %6, i64 0, i64 %19, i64 %20, i64 %21, i64 %31
  %param_4.10930 = load float, float addrspace(1)* %param_4.10929, align 4, !invariant.load !66
  %multiply.87.clone.135 = fmul float %param_1.24421, %param_1.24421
  %subtract.103.clone.136 = fsub float %multiply.87.clone.135, %param_4.10930
  %multiply.86.clone.137 = fmul float %subtract.102.clone.1, %subtract.103.clone.136
  %add.63.clone.138 = fadd float %param_4.10930, %multiply.86.clone.137
  %32 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.63.clone.138) #0
  %add.13.clone.139 = fadd float %32, 0x3E7AD7F2A0000000
  %divide.5.clone.140 = fdiv float %multiply.16.clone.128, %add.13.clone.139
  %subtract.13.clone.141 = fsub float %param_6.9226, %divide.5.clone.140
  %33 = zext i32 %17 to i64
  %param_2.28142 = getelementptr inbounds [5 x [5 x [64 x [128 x float]]]], [5 x [5 x [64 x [128 x float]]]] addrspace(1)* %7, i64 0, i64 %19, i64 %20, i64 %21, i64 %33
  %param_2.28143 = load float, float addrspace(1)* %param_2.28142, align 8, !invariant.load !66
  %param_1.24444 = getelementptr inbounds [128 x [64 x [5 x [5 x float]]]], [128 x [64 x [5 x [5 x float]]]] addrspace(1)* %8, i64 0, i64 %33, i64 %21, i64 %19, i64 %20
  %param_1.24445 = load float, float addrspace(1)* %param_1.24444, align 4, !invariant.load !66
  %subtract.11546 = fsub float %param_1.24445, %param_2.28143
  %multiply.9547 = fmul float %subtract.114, %subtract.11546
  %add.7048 = fadd float %param_2.28143, %multiply.9547
  %param_6.9249 = getelementptr inbounds [5 x [5 x [64 x [128 x float]]]], [5 x [5 x [64 x [128 x float]]]] addrspace(1)* %5, i64 0, i64 %19, i64 %20, i64 %21, i64 %33
  %param_6.9250 = load float, float addrspace(1)* %param_6.9249, align 8, !invariant.load !66
  %multiply.16.clone.152 = fmul float %param_5.107, %add.7048
  %param_4.10953 = getelementptr inbounds [5 x [5 x [64 x [128 x float]]]], [5 x [5 x [64 x [128 x float]]]] addrspace(1)* %6, i64 0, i64 %19, i64 %20, i64 %21, i64 %33
  %param_4.10954 = load float, float addrspace(1)* %param_4.10953, align 8, !invariant.load !66
  %multiply.87.clone.159 = fmul float %param_1.24445, %param_1.24445
  %subtract.103.clone.160 = fsub float %multiply.87.clone.159, %param_4.10954
  %multiply.86.clone.161 = fmul float %subtract.102.clone.1, %subtract.103.clone.160
  %add.63.clone.162 = fadd float %param_4.10954, %multiply.86.clone.161
  %34 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.63.clone.162) #0
  %add.13.clone.163 = fadd float %34, 0x3E7AD7F2A0000000
  %divide.5.clone.164 = fdiv float %multiply.16.clone.152, %add.13.clone.163
  %subtract.13.clone.165 = fsub float %param_6.9250, %divide.5.clone.164
  %35 = zext i32 %18 to i64
  %param_2.28166 = getelementptr inbounds [5 x [5 x [64 x [128 x float]]]], [5 x [5 x [64 x [128 x float]]]] addrspace(1)* %7, i64 0, i64 %19, i64 %20, i64 %21, i64 %35
  %param_2.28167 = load float, float addrspace(1)* %param_2.28166, align 4, !invariant.load !66
  %param_1.24468 = getelementptr inbounds [128 x [64 x [5 x [5 x float]]]], [128 x [64 x [5 x [5 x float]]]] addrspace(1)* %8, i64 0, i64 %35, i64 %21, i64 %19, i64 %20
  %param_1.24469 = load float, float addrspace(1)* %param_1.24468, align 4, !invariant.load !66
  %subtract.11570 = fsub float %param_1.24469, %param_2.28167
  %multiply.9571 = fmul float %subtract.114, %subtract.11570
  %add.7072 = fadd float %param_2.28167, %multiply.9571
  %param_6.9273 = getelementptr inbounds [5 x [5 x [64 x [128 x float]]]], [5 x [5 x [64 x [128 x float]]]] addrspace(1)* %5, i64 0, i64 %19, i64 %20, i64 %21, i64 %35
  %param_6.9274 = load float, float addrspace(1)* %param_6.9273, align 4, !invariant.load !66
  %multiply.16.clone.176 = fmul float %param_5.107, %add.7072
  %param_4.10977 = getelementptr inbounds [5 x [5 x [64 x [128 x float]]]], [5 x [5 x [64 x [128 x float]]]] addrspace(1)* %6, i64 0, i64 %19, i64 %20, i64 %21, i64 %35
  %param_4.10978 = load float, float addrspace(1)* %param_4.10977, align 4, !invariant.load !66
  %multiply.87.clone.183 = fmul float %param_1.24469, %param_1.24469
  %subtract.103.clone.184 = fsub float %multiply.87.clone.183, %param_4.10978
  %multiply.86.clone.185 = fmul float %subtract.102.clone.1, %subtract.103.clone.184
  %add.63.clone.186 = fadd float %param_4.10978, %multiply.86.clone.185
  %36 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.63.clone.186) #0
  %add.13.clone.187 = fadd float %36, 0x3E7AD7F2A0000000
  %divide.5.clone.188 = fdiv float %multiply.16.clone.176, %add.13.clone.187
  %subtract.13.clone.189 = fsub float %param_6.9274, %divide.5.clone.188
  %37 = insertelement <4 x float> undef, float %add.70, i32 0
  %38 = insertelement <4 x float> %37, float %add.7024, i32 1
  %39 = insertelement <4 x float> %38, float %add.7048, i32 2
  %40 = insertelement <4 x float> %39, float %add.7072, i32 3
  %41 = bitcast float addrspace(1)* %26 to <4 x float> addrspace(1)*
  store <4 x float> %40, <4 x float> addrspace(1)* %41, align 16
  %42 = insertelement <4 x float> undef, float %subtract.13.clone.1, i32 0
  %43 = insertelement <4 x float> %42, float %subtract.13.clone.141, i32 1
  %44 = insertelement <4 x float> %43, float %subtract.13.clone.165, i32 2
  %45 = insertelement <4 x float> %44, float %subtract.13.clone.189, i32 3
  %46 = bitcast float addrspace(1)* %28 to <4 x float> addrspace(1)*
  store <4 x float> %45, <4 x float> addrspace(1)* %46, align 16
  %47 = insertelement <4 x float> undef, float %add.63.clone.1, i32 0
  %48 = insertelement <4 x float> %47, float %add.63.clone.138, i32 1
  %49 = insertelement <4 x float> %48, float %add.63.clone.162, i32 2
  %50 = insertelement <4 x float> %49, float %add.63.clone.186, i32 3
  %51 = bitcast float addrspace(1)* %30 to <4 x float> addrspace(1)*
  store <4 x float> %50, <4 x float> addrspace(1)* %51, align 16
  ret void

emit_mof_tuple-true:                              ; preds = %entry
  %52 = ptrtoint i8* %alloc7 to i64
  %53 = insertelement <2 x i64> undef, i64 %52, i32 0
  %54 = ptrtoint i8* %alloc8 to i64
  %55 = insertelement <2 x i64> %53, i64 %54, i32 1
  %sunkaddr = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf108, i64 1141056320
  %56 = bitcast i8 addrspace(1)* %sunkaddr to <2 x i64> addrspace(1)*
  store <2 x i64> %55, <2 x i64> addrspace(1)* %56, align 64
  %sunkaddr119 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf108, i64 1141056336
  %57 = bitcast i8 addrspace(1)* %sunkaddr119 to i8* addrspace(1)*
  store i8* %alloc9, i8* addrspace(1)* %57, align 16
  br label %emit_mof_tuple-after
}

; Function Attrs: nofree nounwind
define void @select_and_scatter_337(i8* noalias nocapture align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #3 {
initialized-true.1:
  %temp_buf43 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %get-tuple-element.79.typed = bitcast i8 addrspace(1)* %temp_buf43 to [1024 x [64 x [20 x [20 x float]]]] addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !74
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !70
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %linear_index.frozen = freeze i32 %linear_index
  %3 = udiv i32 %linear_index.frozen, 10
  %4 = mul i32 %3, 10
  %.decomposed = sub i32 %linear_index.frozen, %4
  %5 = urem i32 %3, 10
  %6 = udiv i32 %linear_index, 100
  %7 = and i32 %6, 63
  %8 = udiv i32 %linear_index, 6400
  %9 = shl nuw nsw i32 %5, 1
  %10 = shl nuw nsw i32 %.decomposed, 1
  %11 = zext i32 %8 to i64
  %12 = zext i32 %7 to i64
  %13 = zext i32 %9 to i64
  %14 = zext i32 %10 to i64
  %15 = getelementptr inbounds [1024 x [64 x [20 x [20 x float]]]], [1024 x [64 x [20 x [20 x float]]]] addrspace(1)* %get-tuple-element.79.typed, i64 0, i64 %11, i64 %12, i64 %13, i64 %14
  %16 = bitcast float addrspace(1)* %15 to <2 x float> addrspace(1)*
  %17 = load <2 x float>, <2 x float> addrspace(1)* %16, align 8
  %18 = extractelement <2 x float> %17, i32 0
  %.val.145 = extractelement <2 x float> %17, i32 1
  %19 = or i32 %10, 1
  %compare.332.i.1 = fcmp ult float %18, %.val.145
  %selected_index_address4.sroa.9.4.1 = select i1 %compare.332.i.1, i32 %19, i32 %10
  %selected_value_address.4.1 = select i1 %compare.332.i.1, float %.val.145, float %18
  %20 = or i32 %9, 1
  %21 = getelementptr inbounds float, float addrspace(1)* %15, i64 20
  %22 = bitcast float addrspace(1)* %21 to <2 x float> addrspace(1)*
  %23 = load <2 x float>, <2 x float> addrspace(1)* %22, align 8
  %.val.13346 = extractelement <2 x float> %23, i32 0
  %.val.1.147 = extractelement <2 x float> %23, i32 1
  %compare.332.i.134 = fcmp ult float %selected_value_address.4.1, %.val.13346
  %selected_index_address4.sroa.9.4.137 = select i1 %compare.332.i.134, i32 %10, i32 %selected_index_address4.sroa.9.4.1
  %selected_value_address.4.141 = select i1 %compare.332.i.134, float %.val.13346, float %selected_value_address.4.1
  %compare.332.i.1.1 = fcmp ult float %selected_value_address.4.141, %.val.1.147
  %selected_index_address4.sroa.9.4.1.1 = select i1 %compare.332.i.1.1, i32 %19, i32 %selected_index_address4.sroa.9.4.137
  %24 = or i1 %compare.332.i.1.1, %compare.332.i.134
  %selected_index_address4.sroa.6.4.1.1 = select i1 %24, i32 %20, i32 %9
  %get-tuple-element.74.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf43, i64 150765632
  %select-and-scatter.337.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf43, i64 960495616
  %select-and-scatter.337.typed = bitcast i8 addrspace(1)* %select-and-scatter.337.raw to [1024 x [64 x [20 x [20 x float]]]] addrspace(1)*
  %25 = bitcast i8 addrspace(1)* %get-tuple-element.74.raw to float addrspace(1)*
  %26 = zext i32 %linear_index to i64
  %27 = getelementptr inbounds float, float addrspace(1)* %25, i64 %26
  %28 = zext i32 %selected_index_address4.sroa.6.4.1.1 to i64
  %29 = zext i32 %selected_index_address4.sroa.9.4.1.1 to i64
  %30 = getelementptr inbounds [1024 x [64 x [20 x [20 x float]]]], [1024 x [64 x [20 x [20 x float]]]] addrspace(1)* %select-and-scatter.337.typed, i64 0, i64 %11, i64 %12, i64 %28, i64 %29
  %source = load float, float addrspace(1)* %27, align 4
  %31 = atomicrmw fadd float addrspace(1)* %30, float %source seq_cst
  ret void
}

; Function Attrs: nofree nounwind
define void @fusion_35(i8* noalias nocapture align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #3 {
entry:
  %temp_buf22 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !83
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !73
  %2 = shl nuw nsw i32 %0, 9
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %3, %2
  %4 = zext i32 %linear_index_base to i64
  %5 = shl nuw nsw i64 %4, 2
  %6 = add nuw nsw i64 %5, 960495628
  %scevgep = getelementptr i8, i8 addrspace(1)* %temp_buf22, i64 %6
  br label %loop.loop_body

loop.loop_body:                                   ; preds = %fusion.35.in_bounds-after, %entry
  %lsr.iv36 = phi i8 addrspace(1)* [ %scevgep, %entry ], [ %scevgep37, %fusion.35.in_bounds-after ]
  %lsr.iv = phi i32 [ -442368, %entry ], [ %lsr.iv.next, %fusion.35.in_bounds-after ]
  %7 = add i32 %linear_index_base, %lsr.iv
  %8 = add i32 %7, 442368
  %9 = icmp ult i32 %8, 26214400
  br i1 %9, label %fusion.35.in_bounds-true, label %fusion.35.in_bounds-after

fusion.35.in_bounds-after:                        ; preds = %fusion.35.in_bounds-true, %loop.loop_body
  %lsr.iv.next = add nsw i32 %lsr.iv, 442368
  %scevgep37 = getelementptr i8, i8 addrspace(1)* %lsr.iv36, i64 1769472
  %10 = icmp ugt i32 %lsr.iv.next, 25772031
  br i1 %10, label %loop.loop_exit, label %loop.loop_body, !llvm.loop !84

loop.loop_exit:                                   ; preds = %fusion.35.in_bounds-after
  ret void

fusion.35.in_bounds-true:                         ; preds = %loop.loop_body
  %11 = bitcast i8 addrspace(1)* %lsr.iv36 to float addrspace(1)*
  %scevgep39 = getelementptr float, float addrspace(1)* %11, i64 -240123907
  %12 = bitcast float addrspace(1)* %scevgep39 to <4 x float> addrspace(1)*
  %13 = load <4 x float>, <4 x float> addrspace(1)* %12, align 16, !invariant.load !66
  %param_1.110446 = extractelement <4 x float> %13, i32 0
  %param_1.110747 = extractelement <4 x float> %13, i32 1
  %param_1.1101248 = extractelement <4 x float> %13, i32 2
  %param_1.1101749 = extractelement <4 x float> %13, i32 3
  %compare.1 = fcmp ogt float %param_1.110446, 0.000000e+00
  %scevgep42 = getelementptr float, float addrspace(1)* %11, i64 -3
  %14 = bitcast float addrspace(1)* %scevgep42 to <4 x float> addrspace(1)*
  %15 = load <4 x float>, <4 x float> addrspace(1)* %14, align 16
  %param_0.50550 = extractelement <4 x float> %15, i32 0
  %param_0.501051 = extractelement <4 x float> %15, i32 1
  %param_0.501552 = extractelement <4 x float> %15, i32 2
  %param_0.502053 = extractelement <4 x float> %15, i32 3
  %16 = select i1 %compare.1, float %param_0.50550, float 0.000000e+00
  %compare.18 = fcmp ogt float %param_1.110747, 0.000000e+00
  %17 = select i1 %compare.18, float %param_0.501051, float 0.000000e+00
  %compare.113 = fcmp ogt float %param_1.1101248, 0.000000e+00
  %18 = select i1 %compare.113, float %param_0.501552, float 0.000000e+00
  %compare.118 = fcmp ogt float %param_1.1101749, 0.000000e+00
  %19 = select i1 %compare.118, float %param_0.502053, float 0.000000e+00
  %20 = insertelement <4 x float> undef, float %16, i32 0
  %21 = insertelement <4 x float> %20, float %17, i32 1
  %22 = insertelement <4 x float> %21, float %18, i32 2
  %23 = insertelement <4 x float> %22, float %19, i32 3
  %24 = bitcast float addrspace(1)* %scevgep42 to <4 x float> addrspace(1)*
  store <4 x float> %23, <4 x float> addrspace(1)* %24, align 16
  br label %fusion.35.in_bounds-after
}

; Function Attrs: nounwind
define void @fusion_25(i8* noalias nocapture align 64 dereferenceable(204800) %alloc13, i8* noalias nocapture readonly align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #0 {
entry:
  %temp_buf133 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc13131 = addrspacecast i8* %alloc13 to i8 addrspace(1)*
  %initial_value_addr = alloca float, align 4
  %0 = addrspacecast float* %initial_value_addr to float addrspace(5)*
  %fusion.35.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf133, i64 960495616
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !85
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !86
  %3 = and i32 %2, 63
  %4 = lshr i32 %2, 6
  %block_origin.z = shl nuw nsw i32 %4, 3
  %5 = shl nuw nsw i32 %1, 1
  %6 = mul nuw nsw i32 %3, 400
  %x_loc33 = or i32 %5, 128
  %x_loc38 = or i32 %5, 129
  %x_loc43 = or i32 %5, 256
  %x_loc48 = or i32 %5, 257
  %x_loc53 = or i32 %5, 384
  %7 = icmp ult i32 %x_loc53, 400
  %x_loc58 = or i32 %5, 385
  br i1 %7, label %loop_z.loop_body.us.preheader, label %loop_z.loop_body

loop_z.loop_body.us.preheader:                    ; preds = %entry
  %8 = mul i32 %4, 204800
  %9 = add i32 %x_loc53, %8
  %10 = add i32 %9, %6
  %11 = sext i32 %10 to i64
  %12 = shl nuw nsw i64 %11, 2
  %13 = add nuw nsw i64 %12, 960495616
  %scevgep = getelementptr i8, i8 addrspace(1)* %temp_buf133, i64 %13
  %14 = add i32 %x_loc48, %8
  %15 = add i32 %14, %6
  %16 = sext i32 %15 to i64
  %17 = shl nuw nsw i64 %16, 2
  %18 = add nuw nsw i64 %17, 960495616
  %scevgep233 = getelementptr i8, i8 addrspace(1)* %temp_buf133, i64 %18
  %19 = add i32 %x_loc43, %8
  %20 = add i32 %19, %6
  %21 = sext i32 %20 to i64
  %22 = shl nuw nsw i64 %21, 2
  %23 = add nuw nsw i64 %22, 960495616
  %scevgep236 = getelementptr i8, i8 addrspace(1)* %temp_buf133, i64 %23
  %24 = add i32 %x_loc38, %8
  %25 = add i32 %24, %6
  %26 = sext i32 %25 to i64
  %27 = shl nuw nsw i64 %26, 2
  %28 = add nuw nsw i64 %27, 960495616
  %scevgep239 = getelementptr i8, i8 addrspace(1)* %temp_buf133, i64 %28
  %29 = add i32 %x_loc33, %8
  %30 = add i32 %29, %6
  %31 = sext i32 %30 to i64
  %32 = shl nuw nsw i64 %31, 2
  %33 = add nuw nsw i64 %32, 960495616
  %scevgep242 = getelementptr i8, i8 addrspace(1)* %temp_buf133, i64 %33
  %34 = add i32 %x_loc58, %8
  %35 = add i32 %34, %6
  %36 = sext i32 %35 to i64
  %37 = shl nuw nsw i64 %36, 2
  %38 = add nuw nsw i64 %37, 960495616
  %scevgep245 = getelementptr i8, i8 addrspace(1)* %temp_buf133, i64 %38
  %39 = add i32 %8, %6
  %40 = add i32 %39, %5
  %41 = zext i32 %40 to i64
  %42 = shl nuw nsw i64 %41, 2
  %43 = add nuw nsw i64 %42, 960495616
  %scevgep248 = getelementptr i8, i8 addrspace(1)* %temp_buf133, i64 %43
  br label %loop_z.loop_body.us

loop_z.loop_body.us:                              ; preds = %loop_z.loop_header.critedge.us, %loop_z.loop_body.us.preheader
  %lsr.iv = phi i64 [ 0, %loop_z.loop_body.us.preheader ], [ %lsr.iv.next, %loop_z.loop_header.critedge.us ]
  %partial_reduction_result.0.1124.us = phi float [ %partial_reduction_result.0.0.us, %loop_z.loop_header.critedge.us ], [ 0.000000e+00, %loop_z.loop_body.us.preheader ]
  %44 = icmp ult i32 %x_loc58, 400
  %scevgep249 = getelementptr i8, i8 addrspace(1)* %scevgep248, i64 %lsr.iv
  %scevgep249250 = bitcast i8 addrspace(1)* %scevgep249 to float addrspace(1)*
  %45 = bitcast float addrspace(1)* %scevgep249250 to <2 x float> addrspace(1)*
  %46 = load <2 x float>, <2 x float> addrspace(1)* %45, align 8, !invariant.load !66
  %param_0.8227.us254 = extractelement <2 x float> %46, i32 0
  %param_0.8232.us255 = extractelement <2 x float> %46, i32 1
  %add.347.i.us = fadd float %partial_reduction_result.0.1124.us, %param_0.8227.us254
  %add.347.i123.us = fadd float %add.347.i.us, %param_0.8232.us255
  %scevgep243 = getelementptr i8, i8 addrspace(1)* %scevgep242, i64 %lsr.iv
  %scevgep243244 = bitcast i8 addrspace(1)* %scevgep243 to float addrspace(1)*
  %param_0.8237.us = load float, float addrspace(1)* %scevgep243244, align 8, !invariant.load !66
  %add.347.i122.us = fadd float %add.347.i123.us, %param_0.8237.us
  %scevgep240 = getelementptr i8, i8 addrspace(1)* %scevgep239, i64 %lsr.iv
  %scevgep240241 = bitcast i8 addrspace(1)* %scevgep240 to float addrspace(1)*
  %param_0.8242.us = load float, float addrspace(1)* %scevgep240241, align 4, !invariant.load !66
  %add.347.i121.us = fadd float %add.347.i122.us, %param_0.8242.us
  %scevgep237 = getelementptr i8, i8 addrspace(1)* %scevgep236, i64 %lsr.iv
  %scevgep237238 = bitcast i8 addrspace(1)* %scevgep237 to float addrspace(1)*
  %param_0.8247.us = load float, float addrspace(1)* %scevgep237238, align 8, !invariant.load !66
  %add.347.i120.us = fadd float %add.347.i121.us, %param_0.8247.us
  %scevgep234 = getelementptr i8, i8 addrspace(1)* %scevgep233, i64 %lsr.iv
  %scevgep234235 = bitcast i8 addrspace(1)* %scevgep234 to float addrspace(1)*
  %param_0.8252.us = load float, float addrspace(1)* %scevgep234235, align 4, !invariant.load !66
  %add.347.i119.us = fadd float %add.347.i120.us, %param_0.8252.us
  %scevgep231 = getelementptr i8, i8 addrspace(1)* %scevgep, i64 %lsr.iv
  %scevgep231232 = bitcast i8 addrspace(1)* %scevgep231 to float addrspace(1)*
  %param_0.8257.us = load float, float addrspace(1)* %scevgep231232, align 8, !invariant.load !66
  %add.347.i113.us = fadd float %add.347.i119.us, %param_0.8257.us
  %scevgep246 = getelementptr i8, i8 addrspace(1)* %scevgep245, i64 %lsr.iv
  br i1 %44, label %output_x_in_tile-true59.us, label %loop_z.loop_header.critedge.us

output_x_in_tile-true59.us:                       ; preds = %loop_z.loop_body.us
  %47 = bitcast i8 addrspace(1)* %scevgep246 to float addrspace(1)*
  %param_0.8262.us = load float, float addrspace(1)* %47, align 4, !invariant.load !66
  %add.347.i112.us = fadd float %add.347.i113.us, %param_0.8262.us
  br label %loop_z.loop_header.critedge.us

loop_z.loop_header.critedge.us:                   ; preds = %output_x_in_tile-true59.us, %loop_z.loop_body.us
  %partial_reduction_result.0.0.us = phi float [ %add.347.i112.us, %output_x_in_tile-true59.us ], [ %add.347.i113.us, %loop_z.loop_body.us ]
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 102400
  %tmp = trunc i64 %lsr.iv.next to i32
  %exitcond = icmp eq i32 %tmp, 819200
  br i1 %exitcond, label %loop_z.loop_exit, label %loop_z.loop_body.us

reduce-group-0-after:                             ; preds = %reduction_atomic_update-true, %inter_warp_reduce-true, %intra_warp_reduce_write-after
  ret void

loop_z.loop_header.critedge:                      ; preds = %output_x_in_tile-true59, %loop_z.loop_body
  %partial_reduction_result.0.0 = phi float [ %add.347.i112, %output_x_in_tile-true59 ], [ %add.347.i119, %loop_z.loop_body ]
  %48 = icmp ult i32 %x_loc58, 400
  %49 = bitcast i8 addrspace(1)* %fusion.35.raw to float addrspace(1)*
  %50 = or i32 %block_origin.z, 1
  %51 = mul nuw nsw i32 %50, 25600
  %52 = add nuw nsw i32 %51, %6
  %53 = add nuw nsw i32 %52, %5
  %54 = zext i32 %53 to i64
  %param_0.8226.1 = getelementptr inbounds float, float addrspace(1)* %49, i64 %54
  %param_0.8227.1 = load float, float addrspace(1)* %param_0.8226.1, align 8, !invariant.load !66
  %add.347.i.1 = fadd float %partial_reduction_result.0.0, %param_0.8227.1
  %55 = zext i32 %52 to i64
  %56 = add i64 %55, %69
  %57 = getelementptr float, float addrspace(1)* %49, i64 %56
  %param_0.8231.1136 = getelementptr inbounds float, float addrspace(1)* %57, i64 1
  %param_0.8232.1 = load float, float addrspace(1)* %param_0.8231.1136, align 4, !invariant.load !66
  %add.347.i123.1 = fadd float %add.347.i.1, %param_0.8232.1
  %param_0.8236.1138 = getelementptr inbounds float, float addrspace(1)* %57, i64 128
  %58 = bitcast float addrspace(1)* %param_0.8236.1138 to <2 x float> addrspace(1)*
  %59 = load <2 x float>, <2 x float> addrspace(1)* %58, align 8, !invariant.load !66
  %param_0.8237.1280 = extractelement <2 x float> %59, i32 0
  %param_0.8242.1281 = extractelement <2 x float> %59, i32 1
  %add.347.i122.1 = fadd float %add.347.i123.1, %param_0.8237.1280
  %add.347.i121.1 = fadd float %add.347.i122.1, %param_0.8242.1281
  %param_0.8246.1142 = getelementptr inbounds float, float addrspace(1)* %57, i64 256
  %60 = bitcast float addrspace(1)* %param_0.8246.1142 to <2 x float> addrspace(1)*
  %61 = load <2 x float>, <2 x float> addrspace(1)* %60, align 8, !invariant.load !66
  %param_0.8247.1282 = extractelement <2 x float> %61, i32 0
  %param_0.8252.1283 = extractelement <2 x float> %61, i32 1
  %add.347.i120.1 = fadd float %add.347.i121.1, %param_0.8247.1282
  %add.347.i119.1 = fadd float %add.347.i120.1, %param_0.8252.1283
  br i1 %48, label %output_x_in_tile-true59.1, label %loop_z.loop_header.critedge.1

loop_z.loop_body:                                 ; preds = %entry
  %62 = icmp ult i32 %x_loc58, 400
  %63 = bitcast i8 addrspace(1)* %fusion.35.raw to float addrspace(1)*
  %64 = mul nuw nsw i32 %4, 204800
  %65 = add nuw nsw i32 %64, %6
  %66 = add nuw nsw i32 %65, %5
  %67 = zext i32 %66 to i64
  %param_0.8226 = getelementptr inbounds float, float addrspace(1)* %63, i64 %67
  %param_0.8227 = load float, float addrspace(1)* %param_0.8226, align 8, !invariant.load !66
  %add.347.i = fadd float %param_0.8227, 0.000000e+00
  %68 = zext i32 %65 to i64
  %69 = zext i32 %5 to i64
  %70 = add i64 %68, %69
  %71 = getelementptr float, float addrspace(1)* %63, i64 %70
  %param_0.8231146 = getelementptr inbounds float, float addrspace(1)* %71, i64 1
  %param_0.8232 = load float, float addrspace(1)* %param_0.8231146, align 4, !invariant.load !66
  %add.347.i123 = fadd float %add.347.i, %param_0.8232
  %param_0.8236148 = getelementptr inbounds float, float addrspace(1)* %71, i64 128
  %72 = bitcast float addrspace(1)* %param_0.8236148 to <2 x float> addrspace(1)*
  %73 = load <2 x float>, <2 x float> addrspace(1)* %72, align 8, !invariant.load !66
  %param_0.8237284 = extractelement <2 x float> %73, i32 0
  %param_0.8242285 = extractelement <2 x float> %73, i32 1
  %add.347.i122 = fadd float %add.347.i123, %param_0.8237284
  %add.347.i121 = fadd float %add.347.i122, %param_0.8242285
  %param_0.8246152 = getelementptr inbounds float, float addrspace(1)* %71, i64 256
  %74 = bitcast float addrspace(1)* %param_0.8246152 to <2 x float> addrspace(1)*
  %75 = load <2 x float>, <2 x float> addrspace(1)* %74, align 8, !invariant.load !66
  %param_0.8247286 = extractelement <2 x float> %75, i32 0
  %param_0.8252287 = extractelement <2 x float> %75, i32 1
  %add.347.i120 = fadd float %add.347.i121, %param_0.8247286
  %add.347.i119 = fadd float %add.347.i120, %param_0.8252287
  br i1 %62, label %output_x_in_tile-true59, label %loop_z.loop_header.critedge

loop_z.loop_exit:                                 ; preds = %output_x_in_tile-true59.7, %loop_z.loop_header.critedge.6, %loop_z.loop_header.critedge.us
  %partial_reduction_result.0.1.lcssa = phi float [ %add.347.i112.7, %output_x_in_tile-true59.7 ], [ %add.347.i119.7, %loop_z.loop_header.critedge.6 ], [ %partial_reduction_result.0.0.us, %loop_z.loop_header.critedge.us ]
  %76 = bitcast i8 addrspace(1)* %alloc13131 to [64 x float] addrspace(1)*
  %lane_id65 = and i32 %1, 31
  %77 = zext i32 %3 to i64
  %output_element_address = getelementptr inbounds [64 x float], [64 x float] addrspace(1)* %76, i64 0, i64 %77
  %78 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result.0.1.lcssa, i32 16, i32 31)
  %add.347.i118 = fadd float %partial_reduction_result.0.1.lcssa, %78
  %79 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.347.i118, i32 8, i32 31)
  %add.347.i117 = fadd float %add.347.i118, %79
  %80 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.347.i117, i32 4, i32 31)
  %add.347.i116 = fadd float %add.347.i117, %80
  %81 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.347.i116, i32 2, i32 31)
  %add.347.i115 = fadd float %add.347.i116, %81
  %82 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.347.i115, i32 1, i32 31)
  %83 = lshr i32 %1, 5
  %84 = icmp eq i32 %lane_id65, 0
  %85 = zext i32 %83 to i64
  %86 = getelementptr inbounds [1 x [32 x float]], [1 x [32 x float]] addrspace(3)* @shared_cache_03, i64 0, i64 0, i64 %85
  %add.347.i114 = fadd float %add.347.i115, %82
  br i1 %84, label %intra_warp_reduce_write-true, label %intra_warp_reduce_write-after

intra_warp_reduce_write-after:                    ; preds = %intra_warp_reduce_write-true, %loop_z.loop_exit
  tail call void @llvm.nvvm.barrier0()
  %87 = icmp eq i32 %83, 0
  br i1 %87, label %inter_warp_reduce-true, label %reduce-group-0-after

output_x_in_tile-true59:                          ; preds = %loop_z.loop_body
  %88 = bitcast float addrspace(1)* %71 to i8 addrspace(1)*
  %sunkaddr = getelementptr inbounds i8, i8 addrspace(1)* %88, i64 1540
  %89 = bitcast i8 addrspace(1)* %sunkaddr to float addrspace(1)*
  %param_0.8262 = load float, float addrspace(1)* %89, align 4, !invariant.load !66
  %add.347.i112 = fadd float %add.347.i119, %param_0.8262
  br label %loop_z.loop_header.critedge

intra_warp_reduce_write-true:                     ; preds = %loop_z.loop_exit
  store float %add.347.i114, float addrspace(3)* %86, align 4
  br label %intra_warp_reduce_write-after

inter_warp_reduce-true:                           ; preds = %intra_warp_reduce_write-after
  %90 = zext i32 %lane_id65 to i64
  %91 = getelementptr inbounds [1 x [32 x float]], [1 x [32 x float]] addrspace(3)* @shared_cache_03, i64 0, i64 0, i64 %90
  %92 = addrspacecast float addrspace(3)* %91 to float*
  store float 0.000000e+00, float addrspace(5)* %0, align 4
  %93 = icmp ult i32 %1, 2
  %94 = select i1 %93, float* %92, float* %initial_value_addr
  %partial_reduction_result75 = load float, float* %94, align 4
  %95 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result75, i32 16, i32 31)
  %add.347.i111 = fadd float %partial_reduction_result75, %95
  %96 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.347.i111, i32 8, i32 31)
  %add.347.i110 = fadd float %add.347.i111, %96
  %97 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.347.i110, i32 4, i32 31)
  %add.347.i109 = fadd float %add.347.i110, %97
  %98 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.347.i109, i32 2, i32 31)
  %add.347.i108 = fadd float %add.347.i109, %98
  %99 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.347.i108, i32 1, i32 31)
  %add.347.i107 = fadd float %add.347.i108, %99
  store float %add.347.i107, float* %94, align 4
  %100 = icmp eq i32 %1, 0
  br i1 %100, label %reduction_atomic_update-true, label %reduce-group-0-after

reduction_atomic_update-true:                     ; preds = %inter_warp_reduce-true
  %source = load float, float addrspace(3)* %91, align 4
  %101 = atomicrmw fadd float addrspace(1)* %output_element_address, float %source seq_cst
  br label %reduce-group-0-after

output_x_in_tile-true59.1:                        ; preds = %loop_z.loop_header.critedge
  %102 = bitcast float addrspace(1)* %57 to i8 addrspace(1)*
  %sunkaddr288 = getelementptr inbounds i8, i8 addrspace(1)* %102, i64 1540
  %103 = bitcast i8 addrspace(1)* %sunkaddr288 to float addrspace(1)*
  %param_0.8262.1 = load float, float addrspace(1)* %103, align 4, !invariant.load !66
  %add.347.i112.1 = fadd float %add.347.i119.1, %param_0.8262.1
  br label %loop_z.loop_header.critedge.1

loop_z.loop_header.critedge.1:                    ; preds = %output_x_in_tile-true59.1, %loop_z.loop_header.critedge
  %partial_reduction_result.0.0.1 = phi float [ %add.347.i112.1, %output_x_in_tile-true59.1 ], [ %add.347.i119.1, %loop_z.loop_header.critedge ]
  %104 = icmp ult i32 %x_loc58, 400
  %105 = bitcast i8 addrspace(1)* %fusion.35.raw to float addrspace(1)*
  %106 = add i32 %52, 25600
  %107 = add nuw nsw i32 %106, %5
  %108 = zext i32 %107 to i64
  %param_0.8226.2 = getelementptr inbounds float, float addrspace(1)* %105, i64 %108
  %param_0.8227.2 = load float, float addrspace(1)* %param_0.8226.2, align 8, !invariant.load !66
  %add.347.i.2 = fadd float %partial_reduction_result.0.0.1, %param_0.8227.2
  %109 = zext i32 %106 to i64
  %110 = add i64 %109, %69
  %111 = getelementptr float, float addrspace(1)* %105, i64 %110
  %param_0.8231.2160 = getelementptr inbounds float, float addrspace(1)* %111, i64 1
  %param_0.8232.2 = load float, float addrspace(1)* %param_0.8231.2160, align 4, !invariant.load !66
  %add.347.i123.2 = fadd float %add.347.i.2, %param_0.8232.2
  %param_0.8236.2162 = getelementptr inbounds float, float addrspace(1)* %111, i64 128
  %112 = bitcast float addrspace(1)* %param_0.8236.2162 to <2 x float> addrspace(1)*
  %113 = load <2 x float>, <2 x float> addrspace(1)* %112, align 8, !invariant.load !66
  %param_0.8237.2276 = extractelement <2 x float> %113, i32 0
  %param_0.8242.2277 = extractelement <2 x float> %113, i32 1
  %add.347.i122.2 = fadd float %add.347.i123.2, %param_0.8237.2276
  %add.347.i121.2 = fadd float %add.347.i122.2, %param_0.8242.2277
  %param_0.8246.2166 = getelementptr inbounds float, float addrspace(1)* %111, i64 256
  %114 = bitcast float addrspace(1)* %param_0.8246.2166 to <2 x float> addrspace(1)*
  %115 = load <2 x float>, <2 x float> addrspace(1)* %114, align 8, !invariant.load !66
  %param_0.8247.2278 = extractelement <2 x float> %115, i32 0
  %param_0.8252.2279 = extractelement <2 x float> %115, i32 1
  %add.347.i120.2 = fadd float %add.347.i121.2, %param_0.8247.2278
  %add.347.i119.2 = fadd float %add.347.i120.2, %param_0.8252.2279
  br i1 %104, label %output_x_in_tile-true59.2, label %loop_z.loop_header.critedge.2

output_x_in_tile-true59.2:                        ; preds = %loop_z.loop_header.critedge.1
  %116 = bitcast float addrspace(1)* %111 to i8 addrspace(1)*
  %sunkaddr289 = getelementptr inbounds i8, i8 addrspace(1)* %116, i64 1540
  %117 = bitcast i8 addrspace(1)* %sunkaddr289 to float addrspace(1)*
  %param_0.8262.2 = load float, float addrspace(1)* %117, align 4, !invariant.load !66
  %add.347.i112.2 = fadd float %add.347.i119.2, %param_0.8262.2
  br label %loop_z.loop_header.critedge.2

loop_z.loop_header.critedge.2:                    ; preds = %output_x_in_tile-true59.2, %loop_z.loop_header.critedge.1
  %partial_reduction_result.0.0.2 = phi float [ %add.347.i112.2, %output_x_in_tile-true59.2 ], [ %add.347.i119.2, %loop_z.loop_header.critedge.1 ]
  %118 = icmp ult i32 %x_loc58, 400
  %119 = bitcast i8 addrspace(1)* %fusion.35.raw to float addrspace(1)*
  %120 = add i32 %106, 25600
  %121 = add nuw nsw i32 %120, %5
  %122 = zext i32 %121 to i64
  %param_0.8226.3 = getelementptr inbounds float, float addrspace(1)* %119, i64 %122
  %param_0.8227.3 = load float, float addrspace(1)* %param_0.8226.3, align 8, !invariant.load !66
  %add.347.i.3 = fadd float %partial_reduction_result.0.0.2, %param_0.8227.3
  %123 = zext i32 %120 to i64
  %124 = add i64 %123, %69
  %125 = getelementptr float, float addrspace(1)* %119, i64 %124
  %param_0.8231.3172 = getelementptr inbounds float, float addrspace(1)* %125, i64 1
  %param_0.8232.3 = load float, float addrspace(1)* %param_0.8231.3172, align 4, !invariant.load !66
  %add.347.i123.3 = fadd float %add.347.i.3, %param_0.8232.3
  %param_0.8236.3174 = getelementptr inbounds float, float addrspace(1)* %125, i64 128
  %126 = bitcast float addrspace(1)* %param_0.8236.3174 to <2 x float> addrspace(1)*
  %127 = load <2 x float>, <2 x float> addrspace(1)* %126, align 8, !invariant.load !66
  %param_0.8237.3272 = extractelement <2 x float> %127, i32 0
  %param_0.8242.3273 = extractelement <2 x float> %127, i32 1
  %add.347.i122.3 = fadd float %add.347.i123.3, %param_0.8237.3272
  %add.347.i121.3 = fadd float %add.347.i122.3, %param_0.8242.3273
  %param_0.8246.3178 = getelementptr inbounds float, float addrspace(1)* %125, i64 256
  %128 = bitcast float addrspace(1)* %param_0.8246.3178 to <2 x float> addrspace(1)*
  %129 = load <2 x float>, <2 x float> addrspace(1)* %128, align 8, !invariant.load !66
  %param_0.8247.3274 = extractelement <2 x float> %129, i32 0
  %param_0.8252.3275 = extractelement <2 x float> %129, i32 1
  %add.347.i120.3 = fadd float %add.347.i121.3, %param_0.8247.3274
  %add.347.i119.3 = fadd float %add.347.i120.3, %param_0.8252.3275
  br i1 %118, label %output_x_in_tile-true59.3, label %loop_z.loop_header.critedge.3

output_x_in_tile-true59.3:                        ; preds = %loop_z.loop_header.critedge.2
  %130 = bitcast float addrspace(1)* %125 to i8 addrspace(1)*
  %sunkaddr290 = getelementptr inbounds i8, i8 addrspace(1)* %130, i64 1540
  %131 = bitcast i8 addrspace(1)* %sunkaddr290 to float addrspace(1)*
  %param_0.8262.3 = load float, float addrspace(1)* %131, align 4, !invariant.load !66
  %add.347.i112.3 = fadd float %add.347.i119.3, %param_0.8262.3
  br label %loop_z.loop_header.critedge.3

loop_z.loop_header.critedge.3:                    ; preds = %output_x_in_tile-true59.3, %loop_z.loop_header.critedge.2
  %partial_reduction_result.0.0.3 = phi float [ %add.347.i112.3, %output_x_in_tile-true59.3 ], [ %add.347.i119.3, %loop_z.loop_header.critedge.2 ]
  %132 = icmp ult i32 %x_loc58, 400
  %133 = bitcast i8 addrspace(1)* %fusion.35.raw to float addrspace(1)*
  %134 = add i32 %120, 25600
  %135 = add nuw nsw i32 %134, %5
  %136 = zext i32 %135 to i64
  %param_0.8226.4 = getelementptr inbounds float, float addrspace(1)* %133, i64 %136
  %param_0.8227.4 = load float, float addrspace(1)* %param_0.8226.4, align 8, !invariant.load !66
  %add.347.i.4 = fadd float %partial_reduction_result.0.0.3, %param_0.8227.4
  %137 = zext i32 %134 to i64
  %138 = add i64 %137, %69
  %139 = getelementptr float, float addrspace(1)* %133, i64 %138
  %param_0.8231.4184 = getelementptr inbounds float, float addrspace(1)* %139, i64 1
  %param_0.8232.4 = load float, float addrspace(1)* %param_0.8231.4184, align 4, !invariant.load !66
  %add.347.i123.4 = fadd float %add.347.i.4, %param_0.8232.4
  %param_0.8236.4186 = getelementptr inbounds float, float addrspace(1)* %139, i64 128
  %140 = bitcast float addrspace(1)* %param_0.8236.4186 to <2 x float> addrspace(1)*
  %141 = load <2 x float>, <2 x float> addrspace(1)* %140, align 8, !invariant.load !66
  %param_0.8237.4268 = extractelement <2 x float> %141, i32 0
  %param_0.8242.4269 = extractelement <2 x float> %141, i32 1
  %add.347.i122.4 = fadd float %add.347.i123.4, %param_0.8237.4268
  %add.347.i121.4 = fadd float %add.347.i122.4, %param_0.8242.4269
  %param_0.8246.4190 = getelementptr inbounds float, float addrspace(1)* %139, i64 256
  %142 = bitcast float addrspace(1)* %param_0.8246.4190 to <2 x float> addrspace(1)*
  %143 = load <2 x float>, <2 x float> addrspace(1)* %142, align 8, !invariant.load !66
  %param_0.8247.4270 = extractelement <2 x float> %143, i32 0
  %param_0.8252.4271 = extractelement <2 x float> %143, i32 1
  %add.347.i120.4 = fadd float %add.347.i121.4, %param_0.8247.4270
  %add.347.i119.4 = fadd float %add.347.i120.4, %param_0.8252.4271
  br i1 %132, label %output_x_in_tile-true59.4, label %loop_z.loop_header.critedge.4

output_x_in_tile-true59.4:                        ; preds = %loop_z.loop_header.critedge.3
  %144 = bitcast float addrspace(1)* %139 to i8 addrspace(1)*
  %sunkaddr291 = getelementptr inbounds i8, i8 addrspace(1)* %144, i64 1540
  %145 = bitcast i8 addrspace(1)* %sunkaddr291 to float addrspace(1)*
  %param_0.8262.4 = load float, float addrspace(1)* %145, align 4, !invariant.load !66
  %add.347.i112.4 = fadd float %add.347.i119.4, %param_0.8262.4
  br label %loop_z.loop_header.critedge.4

loop_z.loop_header.critedge.4:                    ; preds = %output_x_in_tile-true59.4, %loop_z.loop_header.critedge.3
  %partial_reduction_result.0.0.4 = phi float [ %add.347.i112.4, %output_x_in_tile-true59.4 ], [ %add.347.i119.4, %loop_z.loop_header.critedge.3 ]
  %146 = icmp ult i32 %x_loc58, 400
  %147 = bitcast i8 addrspace(1)* %fusion.35.raw to float addrspace(1)*
  %148 = add i32 %134, 25600
  %149 = add nuw nsw i32 %148, %5
  %150 = zext i32 %149 to i64
  %param_0.8226.5 = getelementptr inbounds float, float addrspace(1)* %147, i64 %150
  %param_0.8227.5 = load float, float addrspace(1)* %param_0.8226.5, align 8, !invariant.load !66
  %add.347.i.5 = fadd float %partial_reduction_result.0.0.4, %param_0.8227.5
  %151 = zext i32 %148 to i64
  %152 = add i64 %151, %69
  %153 = getelementptr float, float addrspace(1)* %147, i64 %152
  %param_0.8231.5196 = getelementptr inbounds float, float addrspace(1)* %153, i64 1
  %param_0.8232.5 = load float, float addrspace(1)* %param_0.8231.5196, align 4, !invariant.load !66
  %add.347.i123.5 = fadd float %add.347.i.5, %param_0.8232.5
  %param_0.8236.5198 = getelementptr inbounds float, float addrspace(1)* %153, i64 128
  %154 = bitcast float addrspace(1)* %param_0.8236.5198 to <2 x float> addrspace(1)*
  %155 = load <2 x float>, <2 x float> addrspace(1)* %154, align 8, !invariant.load !66
  %param_0.8237.5264 = extractelement <2 x float> %155, i32 0
  %param_0.8242.5265 = extractelement <2 x float> %155, i32 1
  %add.347.i122.5 = fadd float %add.347.i123.5, %param_0.8237.5264
  %add.347.i121.5 = fadd float %add.347.i122.5, %param_0.8242.5265
  %param_0.8246.5202 = getelementptr inbounds float, float addrspace(1)* %153, i64 256
  %156 = bitcast float addrspace(1)* %param_0.8246.5202 to <2 x float> addrspace(1)*
  %157 = load <2 x float>, <2 x float> addrspace(1)* %156, align 8, !invariant.load !66
  %param_0.8247.5266 = extractelement <2 x float> %157, i32 0
  %param_0.8252.5267 = extractelement <2 x float> %157, i32 1
  %add.347.i120.5 = fadd float %add.347.i121.5, %param_0.8247.5266
  %add.347.i119.5 = fadd float %add.347.i120.5, %param_0.8252.5267
  br i1 %146, label %output_x_in_tile-true59.5, label %loop_z.loop_header.critedge.5

output_x_in_tile-true59.5:                        ; preds = %loop_z.loop_header.critedge.4
  %158 = bitcast float addrspace(1)* %153 to i8 addrspace(1)*
  %sunkaddr292 = getelementptr inbounds i8, i8 addrspace(1)* %158, i64 1540
  %159 = bitcast i8 addrspace(1)* %sunkaddr292 to float addrspace(1)*
  %param_0.8262.5 = load float, float addrspace(1)* %159, align 4, !invariant.load !66
  %add.347.i112.5 = fadd float %add.347.i119.5, %param_0.8262.5
  br label %loop_z.loop_header.critedge.5

loop_z.loop_header.critedge.5:                    ; preds = %output_x_in_tile-true59.5, %loop_z.loop_header.critedge.4
  %partial_reduction_result.0.0.5 = phi float [ %add.347.i112.5, %output_x_in_tile-true59.5 ], [ %add.347.i119.5, %loop_z.loop_header.critedge.4 ]
  %160 = icmp ult i32 %x_loc58, 400
  %161 = bitcast i8 addrspace(1)* %fusion.35.raw to float addrspace(1)*
  %162 = add i32 %148, 25600
  %163 = add nuw nsw i32 %162, %5
  %164 = zext i32 %163 to i64
  %param_0.8226.6 = getelementptr inbounds float, float addrspace(1)* %161, i64 %164
  %param_0.8227.6 = load float, float addrspace(1)* %param_0.8226.6, align 8, !invariant.load !66
  %add.347.i.6 = fadd float %partial_reduction_result.0.0.5, %param_0.8227.6
  %165 = zext i32 %162 to i64
  %166 = add i64 %165, %69
  %167 = getelementptr float, float addrspace(1)* %161, i64 %166
  %param_0.8231.6208 = getelementptr inbounds float, float addrspace(1)* %167, i64 1
  %param_0.8232.6 = load float, float addrspace(1)* %param_0.8231.6208, align 4, !invariant.load !66
  %add.347.i123.6 = fadd float %add.347.i.6, %param_0.8232.6
  %param_0.8236.6210 = getelementptr inbounds float, float addrspace(1)* %167, i64 128
  %168 = bitcast float addrspace(1)* %param_0.8236.6210 to <2 x float> addrspace(1)*
  %169 = load <2 x float>, <2 x float> addrspace(1)* %168, align 8, !invariant.load !66
  %param_0.8237.6260 = extractelement <2 x float> %169, i32 0
  %param_0.8242.6261 = extractelement <2 x float> %169, i32 1
  %add.347.i122.6 = fadd float %add.347.i123.6, %param_0.8237.6260
  %add.347.i121.6 = fadd float %add.347.i122.6, %param_0.8242.6261
  %param_0.8246.6214 = getelementptr inbounds float, float addrspace(1)* %167, i64 256
  %170 = bitcast float addrspace(1)* %param_0.8246.6214 to <2 x float> addrspace(1)*
  %171 = load <2 x float>, <2 x float> addrspace(1)* %170, align 8, !invariant.load !66
  %param_0.8247.6262 = extractelement <2 x float> %171, i32 0
  %param_0.8252.6263 = extractelement <2 x float> %171, i32 1
  %add.347.i120.6 = fadd float %add.347.i121.6, %param_0.8247.6262
  %add.347.i119.6 = fadd float %add.347.i120.6, %param_0.8252.6263
  br i1 %160, label %output_x_in_tile-true59.6, label %loop_z.loop_header.critedge.6

output_x_in_tile-true59.6:                        ; preds = %loop_z.loop_header.critedge.5
  %172 = bitcast float addrspace(1)* %167 to i8 addrspace(1)*
  %sunkaddr293 = getelementptr inbounds i8, i8 addrspace(1)* %172, i64 1540
  %173 = bitcast i8 addrspace(1)* %sunkaddr293 to float addrspace(1)*
  %param_0.8262.6 = load float, float addrspace(1)* %173, align 4, !invariant.load !66
  %add.347.i112.6 = fadd float %add.347.i119.6, %param_0.8262.6
  br label %loop_z.loop_header.critedge.6

loop_z.loop_header.critedge.6:                    ; preds = %output_x_in_tile-true59.6, %loop_z.loop_header.critedge.5
  %partial_reduction_result.0.0.6 = phi float [ %add.347.i112.6, %output_x_in_tile-true59.6 ], [ %add.347.i119.6, %loop_z.loop_header.critedge.5 ]
  %174 = icmp ult i32 %x_loc58, 400
  %175 = bitcast i8 addrspace(1)* %fusion.35.raw to float addrspace(1)*
  %176 = add i32 %162, 25600
  %177 = add nuw nsw i32 %176, %5
  %178 = zext i32 %177 to i64
  %param_0.8226.7 = getelementptr inbounds float, float addrspace(1)* %175, i64 %178
  %param_0.8227.7 = load float, float addrspace(1)* %param_0.8226.7, align 8, !invariant.load !66
  %add.347.i.7 = fadd float %partial_reduction_result.0.0.6, %param_0.8227.7
  %179 = zext i32 %176 to i64
  %180 = add i64 %179, %69
  %181 = getelementptr float, float addrspace(1)* %175, i64 %180
  %param_0.8231.7220 = getelementptr inbounds float, float addrspace(1)* %181, i64 1
  %param_0.8232.7 = load float, float addrspace(1)* %param_0.8231.7220, align 4, !invariant.load !66
  %add.347.i123.7 = fadd float %add.347.i.7, %param_0.8232.7
  %param_0.8236.7222 = getelementptr inbounds float, float addrspace(1)* %181, i64 128
  %182 = bitcast float addrspace(1)* %param_0.8236.7222 to <2 x float> addrspace(1)*
  %183 = load <2 x float>, <2 x float> addrspace(1)* %182, align 8, !invariant.load !66
  %param_0.8237.7256 = extractelement <2 x float> %183, i32 0
  %param_0.8242.7257 = extractelement <2 x float> %183, i32 1
  %add.347.i122.7 = fadd float %add.347.i123.7, %param_0.8237.7256
  %add.347.i121.7 = fadd float %add.347.i122.7, %param_0.8242.7257
  %param_0.8246.7226 = getelementptr inbounds float, float addrspace(1)* %181, i64 256
  %184 = bitcast float addrspace(1)* %param_0.8246.7226 to <2 x float> addrspace(1)*
  %185 = load <2 x float>, <2 x float> addrspace(1)* %184, align 8, !invariant.load !66
  %param_0.8247.7258 = extractelement <2 x float> %185, i32 0
  %param_0.8252.7259 = extractelement <2 x float> %185, i32 1
  %add.347.i120.7 = fadd float %add.347.i121.7, %param_0.8247.7258
  %add.347.i119.7 = fadd float %add.347.i120.7, %param_0.8252.7259
  br i1 %174, label %output_x_in_tile-true59.7, label %loop_z.loop_exit

output_x_in_tile-true59.7:                        ; preds = %loop_z.loop_header.critedge.6
  %186 = bitcast float addrspace(1)* %181 to i8 addrspace(1)*
  %sunkaddr294 = getelementptr inbounds i8, i8 addrspace(1)* %186, i64 1540
  %187 = bitcast i8 addrspace(1)* %sunkaddr294 to float addrspace(1)*
  %param_0.8262.7 = load float, float addrspace(1)* %187, align 4, !invariant.load !66
  %add.347.i112.7 = fadd float %add.347.i119.7, %param_0.8262.7
  br label %loop_z.loop_exit
}

; Function Attrs: nofree nounwind
define void @fusion_34(i8* noalias nocapture align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #3 {
entry:
  %temp_buf22 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !83
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !73
  %2 = shl nuw nsw i32 %0, 9
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %3, %2
  %4 = zext i32 %linear_index_base to i64
  %5 = shl nuw nsw i64 %4, 2
  %6 = add nuw nsw i64 %5, 588455936
  %scevgep = getelementptr i8, i8 addrspace(1)* %temp_buf22, i64 %6
  br label %loop.loop_body

loop.loop_body:                                   ; preds = %fusion.34.in_bounds-after, %entry
  %lsr.iv39 = phi i8 addrspace(1)* [ %scevgep, %entry ], [ %scevgep40, %fusion.34.in_bounds-after ]
  %lsr.iv = phi i32 [ -442368, %entry ], [ %lsr.iv.next, %fusion.34.in_bounds-after ]
  %7 = add i32 %linear_index_base, %lsr.iv
  %8 = add i32 %7, 442368
  %9 = icmp ult i32 %8, 18874368
  br i1 %9, label %fusion.34.in_bounds-true, label %fusion.34.in_bounds-after

fusion.34.in_bounds-after:                        ; preds = %fusion.34.in_bounds-true, %loop.loop_body
  %lsr.iv.next = add nsw i32 %lsr.iv, 442368
  %scevgep40 = getelementptr i8, i8 addrspace(1)* %lsr.iv39, i64 1769472
  %10 = icmp ugt i32 %lsr.iv.next, 18431999
  br i1 %10, label %loop.loop_exit, label %loop.loop_body, !llvm.loop !87

loop.loop_exit:                                   ; preds = %fusion.34.in_bounds-after
  ret void

fusion.34.in_bounds-true:                         ; preds = %loop.loop_body
  %11 = bitcast i8 addrspace(1)* %lsr.iv39 to float addrspace(1)*
  %scevgep52 = getelementptr float, float addrspace(1)* %11, i64 119224320
  %12 = bitcast float addrspace(1)* %scevgep52 to <4 x float> addrspace(1)*
  %13 = load <4 x float>, <4 x float> addrspace(1)* %12, align 16, !invariant.load !66
  %param_1.107453 = extractelement <4 x float> %13, i32 0
  %param_1.107754 = extractelement <4 x float> %13, i32 1
  %param_1.1071255 = extractelement <4 x float> %13, i32 2
  %param_1.1071756 = extractelement <4 x float> %13, i32 3
  %compare.0 = fcmp ogt float %param_1.107453, 0.000000e+00
  %14 = bitcast float addrspace(1)* %11 to <4 x float> addrspace(1)*
  %15 = load <4 x float>, <4 x float> addrspace(1)* %14, align 16, !invariant.load !66
  %param_0.48557 = extractelement <4 x float> %15, i32 0
  %param_0.481058 = extractelement <4 x float> %15, i32 1
  %param_0.481559 = extractelement <4 x float> %15, i32 2
  %param_0.482060 = extractelement <4 x float> %15, i32 3
  %16 = select i1 %compare.0, float %param_0.48557, float 0.000000e+00
  %scevgep44 = getelementptr float, float addrspace(1)* %11, i64 18874368
  %compare.08 = fcmp ogt float %param_1.107754, 0.000000e+00
  %17 = select i1 %compare.08, float %param_0.481058, float 0.000000e+00
  %compare.013 = fcmp ogt float %param_1.1071255, 0.000000e+00
  %18 = select i1 %compare.013, float %param_0.481559, float 0.000000e+00
  %compare.018 = fcmp ogt float %param_1.1071756, 0.000000e+00
  %19 = select i1 %compare.018, float %param_0.482060, float 0.000000e+00
  %20 = insertelement <4 x float> undef, float %16, i32 0
  %21 = insertelement <4 x float> %20, float %17, i32 1
  %22 = insertelement <4 x float> %21, float %18, i32 2
  %23 = insertelement <4 x float> %22, float %19, i32 3
  %24 = bitcast float addrspace(1)* %scevgep44 to <4 x float> addrspace(1)*
  store <4 x float> %23, <4 x float> addrspace(1)* %24, align 16
  br label %fusion.34.in_bounds-after
}

; Function Attrs: nounwind
define void @fusion_33(i8* noalias nocapture align 64 dereferenceable(204800) %alloc15, i8* noalias nocapture readonly align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #0 {
entry:
  %temp_buf122 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc15120 = addrspacecast i8* %alloc15 to i8 addrspace(1)*
  %initial_value_addr = alloca float, align 4
  %0 = addrspacecast float* %initial_value_addr to float addrspace(5)*
  %fusion.34.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf122, i64 663953408
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !88
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !89
  %3 = and i32 %2, 31
  %4 = lshr i32 %2, 5
  %block_origin.z = shl nuw nsw i32 %4, 3
  %5 = shl nuw nsw i32 %1, 1
  %6 = mul nuw nsw i32 %3, 576
  %7 = bitcast i8 addrspace(1)* %fusion.34.raw to float addrspace(1)*
  %8 = mul nuw nsw i32 %4, 147456
  %9 = add nuw nsw i32 %8, %6
  %10 = add nuw nsw i32 %9, %5
  %11 = zext i32 %10 to i64
  %param_0.8826 = getelementptr inbounds float, float addrspace(1)* %7, i64 %11
  %param_0.8827 = load float, float addrspace(1)* %param_0.8826, align 8, !invariant.load !66
  %add.412.i = fadd float %param_0.8827, 0.000000e+00
  %12 = zext i32 %9 to i64
  %13 = zext i32 %5 to i64
  %14 = add i64 %12, %13
  %15 = getelementptr float, float addrspace(1)* %7, i64 %14
  %param_0.8831125 = getelementptr inbounds float, float addrspace(1)* %15, i64 1
  %param_0.8832 = load float, float addrspace(1)* %param_0.8831125, align 4, !invariant.load !66
  %add.412.i117 = fadd float %add.412.i, %param_0.8832
  %param_0.8836126 = getelementptr inbounds float, float addrspace(1)* %15, i64 192
  %16 = bitcast float addrspace(1)* %param_0.8836126 to <2 x float> addrspace(1)*
  %17 = load <2 x float>, <2 x float> addrspace(1)* %16, align 8, !invariant.load !66
  %param_0.8837144 = extractelement <2 x float> %17, i32 0
  %param_0.8842145 = extractelement <2 x float> %17, i32 1
  %add.412.i116 = fadd float %add.412.i117, %param_0.8837144
  %add.412.i115 = fadd float %add.412.i116, %param_0.8842145
  %param_0.8846128 = getelementptr inbounds float, float addrspace(1)* %15, i64 384
  %18 = bitcast float addrspace(1)* %param_0.8846128 to <2 x float> addrspace(1)*
  %19 = load <2 x float>, <2 x float> addrspace(1)* %18, align 8, !invariant.load !66
  %param_0.8847146 = extractelement <2 x float> %19, i32 0
  %param_0.8852147 = extractelement <2 x float> %19, i32 1
  %add.412.i114 = fadd float %add.412.i115, %param_0.8847146
  %add.412.i113 = fadd float %add.412.i114, %param_0.8852147
  %20 = or i32 %block_origin.z, 1
  %21 = mul nuw nsw i32 %20, 18432
  %22 = add nuw nsw i32 %21, %6
  %23 = add nuw nsw i32 %22, %5
  %24 = zext i32 %23 to i64
  %param_0.8826.1 = getelementptr inbounds float, float addrspace(1)* %7, i64 %24
  %param_0.8827.1 = load float, float addrspace(1)* %param_0.8826.1, align 8, !invariant.load !66
  %add.412.i.1 = fadd float %add.412.i113, %param_0.8827.1
  %25 = zext i32 %22 to i64
  %26 = add i64 %25, %13
  %27 = getelementptr float, float addrspace(1)* %7, i64 %26
  %param_0.8831.1131 = getelementptr inbounds float, float addrspace(1)* %27, i64 1
  %param_0.8832.1 = load float, float addrspace(1)* %param_0.8831.1131, align 4, !invariant.load !66
  %add.412.i117.1 = fadd float %add.412.i.1, %param_0.8832.1
  %28 = add i32 %23, 192
  %29 = sext i32 %28 to i64
  %param_0.8836.1 = getelementptr inbounds float, float addrspace(1)* %7, i64 %29
  %30 = bitcast float addrspace(1)* %param_0.8836.1 to <2 x float> addrspace(1)*
  %31 = load <2 x float>, <2 x float> addrspace(1)* %30, align 8, !invariant.load !66
  %param_0.8837.1148 = extractelement <2 x float> %31, i32 0
  %param_0.8842.1149 = extractelement <2 x float> %31, i32 1
  %add.412.i116.1 = fadd float %add.412.i117.1, %param_0.8837.1148
  %32 = add i32 %23, 193
  %33 = sext i32 %32 to i64
  %add.412.i115.1 = fadd float %add.412.i116.1, %param_0.8842.1149
  %34 = add i32 %23, 384
  %35 = sext i32 %34 to i64
  %param_0.8846.1 = getelementptr inbounds float, float addrspace(1)* %7, i64 %35
  %36 = bitcast float addrspace(1)* %param_0.8846.1 to <2 x float> addrspace(1)*
  %37 = load <2 x float>, <2 x float> addrspace(1)* %36, align 8, !invariant.load !66
  %param_0.8847.1150 = extractelement <2 x float> %37, i32 0
  %param_0.8852.1151 = extractelement <2 x float> %37, i32 1
  %add.412.i114.1 = fadd float %add.412.i115.1, %param_0.8847.1150
  %38 = add i32 %23, 385
  %39 = sext i32 %38 to i64
  %add.412.i113.1 = fadd float %add.412.i114.1, %param_0.8852.1151
  %40 = add i32 %22, 18432
  %41 = add nuw nsw i32 %40, %5
  %42 = zext i32 %41 to i64
  %param_0.8826.2 = getelementptr inbounds float, float addrspace(1)* %7, i64 %42
  %param_0.8827.2 = load float, float addrspace(1)* %param_0.8826.2, align 8, !invariant.load !66
  %add.412.i.2 = fadd float %add.412.i113.1, %param_0.8827.2
  %43 = zext i32 %40 to i64
  %44 = add i64 %43, %13
  %45 = getelementptr float, float addrspace(1)* %7, i64 %44
  %param_0.8831.2133 = getelementptr inbounds float, float addrspace(1)* %45, i64 1
  %param_0.8832.2 = load float, float addrspace(1)* %param_0.8831.2133, align 4, !invariant.load !66
  %add.412.i117.2 = fadd float %add.412.i.2, %param_0.8832.2
  %46 = add i32 %41, 192
  %47 = sext i32 %46 to i64
  %param_0.8836.2 = getelementptr inbounds float, float addrspace(1)* %7, i64 %47
  %48 = bitcast float addrspace(1)* %param_0.8836.2 to <2 x float> addrspace(1)*
  %49 = load <2 x float>, <2 x float> addrspace(1)* %48, align 8, !invariant.load !66
  %param_0.8837.2152 = extractelement <2 x float> %49, i32 0
  %param_0.8842.2153 = extractelement <2 x float> %49, i32 1
  %add.412.i116.2 = fadd float %add.412.i117.2, %param_0.8837.2152
  %50 = add i32 %41, 193
  %51 = sext i32 %50 to i64
  %add.412.i115.2 = fadd float %add.412.i116.2, %param_0.8842.2153
  %52 = add i32 %41, 384
  %53 = sext i32 %52 to i64
  %param_0.8846.2 = getelementptr inbounds float, float addrspace(1)* %7, i64 %53
  %54 = bitcast float addrspace(1)* %param_0.8846.2 to <2 x float> addrspace(1)*
  %55 = load <2 x float>, <2 x float> addrspace(1)* %54, align 8, !invariant.load !66
  %param_0.8847.2154 = extractelement <2 x float> %55, i32 0
  %param_0.8852.2155 = extractelement <2 x float> %55, i32 1
  %add.412.i114.2 = fadd float %add.412.i115.2, %param_0.8847.2154
  %56 = add i32 %41, 385
  %57 = sext i32 %56 to i64
  %add.412.i113.2 = fadd float %add.412.i114.2, %param_0.8852.2155
  %58 = add i32 %40, 18432
  %59 = add nuw nsw i32 %58, %5
  %60 = zext i32 %59 to i64
  %param_0.8826.3 = getelementptr inbounds float, float addrspace(1)* %7, i64 %60
  %param_0.8827.3 = load float, float addrspace(1)* %param_0.8826.3, align 8, !invariant.load !66
  %add.412.i.3 = fadd float %add.412.i113.2, %param_0.8827.3
  %61 = zext i32 %58 to i64
  %62 = add i64 %61, %13
  %63 = getelementptr float, float addrspace(1)* %7, i64 %62
  %param_0.8831.3135 = getelementptr inbounds float, float addrspace(1)* %63, i64 1
  %param_0.8832.3 = load float, float addrspace(1)* %param_0.8831.3135, align 4, !invariant.load !66
  %add.412.i117.3 = fadd float %add.412.i.3, %param_0.8832.3
  %64 = add i32 %59, 192
  %65 = sext i32 %64 to i64
  %param_0.8836.3 = getelementptr inbounds float, float addrspace(1)* %7, i64 %65
  %66 = bitcast float addrspace(1)* %param_0.8836.3 to <2 x float> addrspace(1)*
  %67 = load <2 x float>, <2 x float> addrspace(1)* %66, align 8, !invariant.load !66
  %param_0.8837.3156 = extractelement <2 x float> %67, i32 0
  %param_0.8842.3157 = extractelement <2 x float> %67, i32 1
  %add.412.i116.3 = fadd float %add.412.i117.3, %param_0.8837.3156
  %68 = add i32 %59, 193
  %69 = sext i32 %68 to i64
  %add.412.i115.3 = fadd float %add.412.i116.3, %param_0.8842.3157
  %70 = add i32 %59, 384
  %71 = sext i32 %70 to i64
  %param_0.8846.3 = getelementptr inbounds float, float addrspace(1)* %7, i64 %71
  %72 = bitcast float addrspace(1)* %param_0.8846.3 to <2 x float> addrspace(1)*
  %73 = load <2 x float>, <2 x float> addrspace(1)* %72, align 8, !invariant.load !66
  %param_0.8847.3158 = extractelement <2 x float> %73, i32 0
  %param_0.8852.3159 = extractelement <2 x float> %73, i32 1
  %add.412.i114.3 = fadd float %add.412.i115.3, %param_0.8847.3158
  %74 = add i32 %59, 385
  %75 = sext i32 %74 to i64
  %add.412.i113.3 = fadd float %add.412.i114.3, %param_0.8852.3159
  %76 = add i32 %58, 18432
  %77 = add nuw nsw i32 %76, %5
  %78 = zext i32 %77 to i64
  %param_0.8826.4 = getelementptr inbounds float, float addrspace(1)* %7, i64 %78
  %param_0.8827.4 = load float, float addrspace(1)* %param_0.8826.4, align 8, !invariant.load !66
  %add.412.i.4 = fadd float %add.412.i113.3, %param_0.8827.4
  %79 = zext i32 %76 to i64
  %80 = add i64 %79, %13
  %81 = getelementptr float, float addrspace(1)* %7, i64 %80
  %param_0.8831.4137 = getelementptr inbounds float, float addrspace(1)* %81, i64 1
  %param_0.8832.4 = load float, float addrspace(1)* %param_0.8831.4137, align 4, !invariant.load !66
  %add.412.i117.4 = fadd float %add.412.i.4, %param_0.8832.4
  %82 = add i32 %77, 192
  %83 = sext i32 %82 to i64
  %param_0.8836.4 = getelementptr inbounds float, float addrspace(1)* %7, i64 %83
  %84 = bitcast float addrspace(1)* %param_0.8836.4 to <2 x float> addrspace(1)*
  %85 = load <2 x float>, <2 x float> addrspace(1)* %84, align 8, !invariant.load !66
  %param_0.8837.4160 = extractelement <2 x float> %85, i32 0
  %param_0.8842.4161 = extractelement <2 x float> %85, i32 1
  %add.412.i116.4 = fadd float %add.412.i117.4, %param_0.8837.4160
  %86 = add i32 %77, 193
  %87 = sext i32 %86 to i64
  %add.412.i115.4 = fadd float %add.412.i116.4, %param_0.8842.4161
  %88 = add i32 %77, 384
  %89 = sext i32 %88 to i64
  %param_0.8846.4 = getelementptr inbounds float, float addrspace(1)* %7, i64 %89
  %90 = bitcast float addrspace(1)* %param_0.8846.4 to <2 x float> addrspace(1)*
  %91 = load <2 x float>, <2 x float> addrspace(1)* %90, align 8, !invariant.load !66
  %param_0.8847.4162 = extractelement <2 x float> %91, i32 0
  %param_0.8852.4163 = extractelement <2 x float> %91, i32 1
  %add.412.i114.4 = fadd float %add.412.i115.4, %param_0.8847.4162
  %92 = add i32 %77, 385
  %93 = sext i32 %92 to i64
  %add.412.i113.4 = fadd float %add.412.i114.4, %param_0.8852.4163
  %94 = add i32 %76, 18432
  %95 = add nuw nsw i32 %94, %5
  %96 = zext i32 %95 to i64
  %param_0.8826.5 = getelementptr inbounds float, float addrspace(1)* %7, i64 %96
  %param_0.8827.5 = load float, float addrspace(1)* %param_0.8826.5, align 8, !invariant.load !66
  %add.412.i.5 = fadd float %add.412.i113.4, %param_0.8827.5
  %97 = zext i32 %94 to i64
  %98 = add i64 %97, %13
  %99 = getelementptr float, float addrspace(1)* %7, i64 %98
  %param_0.8831.5139 = getelementptr inbounds float, float addrspace(1)* %99, i64 1
  %param_0.8832.5 = load float, float addrspace(1)* %param_0.8831.5139, align 4, !invariant.load !66
  %add.412.i117.5 = fadd float %add.412.i.5, %param_0.8832.5
  %100 = add i32 %95, 192
  %101 = sext i32 %100 to i64
  %param_0.8836.5 = getelementptr inbounds float, float addrspace(1)* %7, i64 %101
  %102 = bitcast float addrspace(1)* %param_0.8836.5 to <2 x float> addrspace(1)*
  %103 = load <2 x float>, <2 x float> addrspace(1)* %102, align 8, !invariant.load !66
  %param_0.8837.5164 = extractelement <2 x float> %103, i32 0
  %param_0.8842.5165 = extractelement <2 x float> %103, i32 1
  %add.412.i116.5 = fadd float %add.412.i117.5, %param_0.8837.5164
  %104 = add i32 %95, 193
  %105 = sext i32 %104 to i64
  %add.412.i115.5 = fadd float %add.412.i116.5, %param_0.8842.5165
  %106 = add i32 %95, 384
  %107 = sext i32 %106 to i64
  %param_0.8846.5 = getelementptr inbounds float, float addrspace(1)* %7, i64 %107
  %108 = bitcast float addrspace(1)* %param_0.8846.5 to <2 x float> addrspace(1)*
  %109 = load <2 x float>, <2 x float> addrspace(1)* %108, align 8, !invariant.load !66
  %param_0.8847.5166 = extractelement <2 x float> %109, i32 0
  %param_0.8852.5167 = extractelement <2 x float> %109, i32 1
  %add.412.i114.5 = fadd float %add.412.i115.5, %param_0.8847.5166
  %110 = add i32 %95, 385
  %111 = sext i32 %110 to i64
  %add.412.i113.5 = fadd float %add.412.i114.5, %param_0.8852.5167
  %112 = add i32 %94, 18432
  %113 = add nuw nsw i32 %112, %5
  %114 = zext i32 %113 to i64
  %param_0.8826.6 = getelementptr inbounds float, float addrspace(1)* %7, i64 %114
  %param_0.8827.6 = load float, float addrspace(1)* %param_0.8826.6, align 8, !invariant.load !66
  %add.412.i.6 = fadd float %add.412.i113.5, %param_0.8827.6
  %115 = zext i32 %112 to i64
  %116 = add i64 %115, %13
  %117 = getelementptr float, float addrspace(1)* %7, i64 %116
  %param_0.8831.6141 = getelementptr inbounds float, float addrspace(1)* %117, i64 1
  %param_0.8832.6 = load float, float addrspace(1)* %param_0.8831.6141, align 4, !invariant.load !66
  %add.412.i117.6 = fadd float %add.412.i.6, %param_0.8832.6
  %118 = add i32 %113, 192
  %119 = sext i32 %118 to i64
  %param_0.8836.6 = getelementptr inbounds float, float addrspace(1)* %7, i64 %119
  %120 = bitcast float addrspace(1)* %param_0.8836.6 to <2 x float> addrspace(1)*
  %121 = load <2 x float>, <2 x float> addrspace(1)* %120, align 8, !invariant.load !66
  %param_0.8837.6168 = extractelement <2 x float> %121, i32 0
  %param_0.8842.6169 = extractelement <2 x float> %121, i32 1
  %add.412.i116.6 = fadd float %add.412.i117.6, %param_0.8837.6168
  %122 = add i32 %113, 193
  %123 = sext i32 %122 to i64
  %add.412.i115.6 = fadd float %add.412.i116.6, %param_0.8842.6169
  %124 = add i32 %113, 384
  %125 = sext i32 %124 to i64
  %param_0.8846.6 = getelementptr inbounds float, float addrspace(1)* %7, i64 %125
  %126 = bitcast float addrspace(1)* %param_0.8846.6 to <2 x float> addrspace(1)*
  %127 = load <2 x float>, <2 x float> addrspace(1)* %126, align 8, !invariant.load !66
  %param_0.8847.6170 = extractelement <2 x float> %127, i32 0
  %param_0.8852.6171 = extractelement <2 x float> %127, i32 1
  %add.412.i114.6 = fadd float %add.412.i115.6, %param_0.8847.6170
  %128 = add i32 %113, 385
  %129 = sext i32 %128 to i64
  %add.412.i113.6 = fadd float %add.412.i114.6, %param_0.8852.6171
  %130 = add i32 %112, 18432
  %131 = add nuw nsw i32 %130, %5
  %132 = zext i32 %131 to i64
  %param_0.8826.7 = getelementptr inbounds float, float addrspace(1)* %7, i64 %132
  %param_0.8827.7 = load float, float addrspace(1)* %param_0.8826.7, align 8, !invariant.load !66
  %add.412.i.7 = fadd float %add.412.i113.6, %param_0.8827.7
  %133 = zext i32 %130 to i64
  %134 = add i64 %133, %13
  %135 = getelementptr float, float addrspace(1)* %7, i64 %134
  %param_0.8831.7143 = getelementptr inbounds float, float addrspace(1)* %135, i64 1
  %param_0.8832.7 = load float, float addrspace(1)* %param_0.8831.7143, align 4, !invariant.load !66
  %add.412.i117.7 = fadd float %add.412.i.7, %param_0.8832.7
  %136 = add i32 %131, 192
  %137 = sext i32 %136 to i64
  %param_0.8836.7 = getelementptr inbounds float, float addrspace(1)* %7, i64 %137
  %138 = bitcast float addrspace(1)* %param_0.8836.7 to <2 x float> addrspace(1)*
  %139 = load <2 x float>, <2 x float> addrspace(1)* %138, align 8, !invariant.load !66
  %param_0.8837.7172 = extractelement <2 x float> %139, i32 0
  %param_0.8842.7173 = extractelement <2 x float> %139, i32 1
  %add.412.i116.7 = fadd float %add.412.i117.7, %param_0.8837.7172
  %140 = add i32 %131, 193
  %141 = sext i32 %140 to i64
  %add.412.i115.7 = fadd float %add.412.i116.7, %param_0.8842.7173
  %142 = add i32 %131, 384
  %143 = sext i32 %142 to i64
  %param_0.8846.7 = getelementptr inbounds float, float addrspace(1)* %7, i64 %143
  %144 = bitcast float addrspace(1)* %param_0.8846.7 to <2 x float> addrspace(1)*
  %145 = load <2 x float>, <2 x float> addrspace(1)* %144, align 8, !invariant.load !66
  %param_0.8847.7174 = extractelement <2 x float> %145, i32 0
  %param_0.8852.7175 = extractelement <2 x float> %145, i32 1
  %add.412.i114.7 = fadd float %add.412.i115.7, %param_0.8847.7174
  %146 = add i32 %131, 385
  %147 = sext i32 %146 to i64
  %add.412.i113.7 = fadd float %add.412.i114.7, %param_0.8852.7175
  %fusion.33.typed = bitcast i8 addrspace(1)* %alloc15120 to [32 x float] addrspace(1)*
  %lane_id65 = and i32 %1, 31
  %148 = zext i32 %3 to i64
  %output_element_address = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %fusion.33.typed, i64 0, i64 %148
  %149 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.412.i113.7, i32 16, i32 31)
  %add.412.i112 = fadd float %add.412.i113.7, %149
  %150 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.412.i112, i32 8, i32 31)
  %add.412.i111 = fadd float %add.412.i112, %150
  %151 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.412.i111, i32 4, i32 31)
  %add.412.i110 = fadd float %add.412.i111, %151
  %152 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.412.i110, i32 2, i32 31)
  %add.412.i109 = fadd float %add.412.i110, %152
  %153 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.412.i109, i32 1, i32 31)
  %154 = lshr i32 %1, 5
  %155 = icmp eq i32 %lane_id65, 0
  %156 = zext i32 %154 to i64
  %157 = getelementptr inbounds [1 x [32 x float]], [1 x [32 x float]] addrspace(3)* @shared_cache_04, i64 0, i64 0, i64 %156
  %add.412.i108 = fadd float %add.412.i109, %153
  br i1 %155, label %intra_warp_reduce_write-true, label %intra_warp_reduce_write-after

reduce-group-0-after:                             ; preds = %reduction_atomic_update-true, %inter_warp_reduce-true, %intra_warp_reduce_write-after
  ret void

intra_warp_reduce_write-after:                    ; preds = %intra_warp_reduce_write-true, %entry
  tail call void @llvm.nvvm.barrier0()
  %158 = icmp eq i32 %154, 0
  br i1 %158, label %inter_warp_reduce-true, label %reduce-group-0-after

intra_warp_reduce_write-true:                     ; preds = %entry
  store float %add.412.i108, float addrspace(3)* %157, align 4
  br label %intra_warp_reduce_write-after

inter_warp_reduce-true:                           ; preds = %intra_warp_reduce_write-after
  %159 = zext i32 %lane_id65 to i64
  %160 = getelementptr inbounds [1 x [32 x float]], [1 x [32 x float]] addrspace(3)* @shared_cache_04, i64 0, i64 0, i64 %159
  %161 = addrspacecast float addrspace(3)* %160 to float*
  store float 0.000000e+00, float addrspace(5)* %0, align 4
  %162 = icmp ult i32 %1, 3
  %163 = select i1 %162, float* %161, float* %initial_value_addr
  %partial_reduction_result75 = load float, float* %163, align 4
  %164 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result75, i32 16, i32 31)
  %add.412.i107 = fadd float %partial_reduction_result75, %164
  %165 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.412.i107, i32 8, i32 31)
  %add.412.i106 = fadd float %add.412.i107, %165
  %166 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.412.i106, i32 4, i32 31)
  %add.412.i105 = fadd float %add.412.i106, %166
  %167 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.412.i105, i32 2, i32 31)
  %add.412.i104 = fadd float %add.412.i105, %167
  %168 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.412.i104, i32 1, i32 31)
  %add.412.i103 = fadd float %add.412.i104, %168
  store float %add.412.i103, float* %163, align 4
  %169 = icmp eq i32 %1, 0
  br i1 %169, label %reduction_atomic_update-true, label %reduce-group-0-after

reduction_atomic_update-true:                     ; preds = %inter_warp_reduce-true
  %source = load float, float addrspace(3)* %160, align 4
  %170 = atomicrmw fadd float addrspace(1)* %output_element_address, float %source seq_cst
  br label %reduce-group-0-after
}

; Function Attrs: nounwind
define void @fusion_51(i8* noalias nocapture readonly align 64 dereferenceable(5120) %alloc21, i8* noalias align 64 dereferenceable(3200) %alloc27, i8* noalias align 64 dereferenceable(3200) %alloc28, i8* noalias align 64 dereferenceable(3200) %alloc29, i8* noalias nocapture readonly align 16 dereferenceable(3200) %alloc30, i8* noalias nocapture readonly align 16 dereferenceable(3200) %alloc31, i8* noalias nocapture readonly align 16 dereferenceable(3200) %alloc32, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc84, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc86, i8* noalias nocapture align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #0 {
entry:
  %temp_buf110 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc86108 = addrspacecast i8* %alloc86 to i8 addrspace(1)*
  %alloc84106 = addrspacecast i8* %alloc84 to i8 addrspace(1)*
  %alloc32104 = addrspacecast i8* %alloc32 to i8 addrspace(1)*
  %alloc31102 = addrspacecast i8* %alloc31 to i8 addrspace(1)*
  %alloc30100 = addrspacecast i8* %alloc30 to i8 addrspace(1)*
  %alloc2998 = addrspacecast i8* %alloc29 to i8 addrspace(1)*
  %alloc2896 = addrspacecast i8* %alloc28 to i8 addrspace(1)*
  %alloc2794 = addrspacecast i8* %alloc27 to i8 addrspace(1)*
  %alloc2192 = addrspacecast i8* %alloc21 to i8 addrspace(1)*
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !76
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !70
  %2 = or i32 %1, %0
  %3 = icmp eq i32 %2, 0
  %4 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf110, i64 1141056456
  br i1 %3, label %emit_mof_tuple-true, label %emit_mof_tuple-after

emit_mof_tuple-after:                             ; preds = %emit_mof_tuple-true, %entry
  %5 = bitcast i8 addrspace(1)* %alloc30100 to [5 x [5 x [1 x [32 x float]]]] addrspace(1)*
  %6 = bitcast i8 addrspace(1)* %alloc32104 to [5 x [5 x [1 x [32 x float]]]] addrspace(1)*
  %7 = bitcast i8 addrspace(1)* %alloc31102 to [5 x [5 x [1 x [32 x float]]]] addrspace(1)*
  %8 = bitcast i8 addrspace(1)* %alloc2192 to [32 x [1 x [5 x [5 x float]]]] addrspace(1)*
  %fusion.31.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf110, i64 1141055488
  %fusion.31.typed = bitcast i8 addrspace(1)* %fusion.31.raw to float addrspace(1)*
  %arg5.6.typed = bitcast i8 addrspace(1)* %alloc86108 to float addrspace(1)*
  %arg4.5.typed = bitcast i8 addrspace(1)* %alloc84106 to float addrspace(1)*
  %9 = mul nuw nsw i32 %0, 200
  %linear_index = add nuw nsw i32 %9, %1
  %linear_index_base = shl nuw nsw i32 %linear_index, 2
  %10 = and i32 %linear_index_base, 28
  %11 = lshr i32 %linear_index, 3
  %.lhs.trunc = trunc i32 %11 to i8
  %12 = urem i8 %.lhs.trunc, 5
  %.lhs.trunc90 = trunc i32 %linear_index to i8
  %13 = udiv i8 %.lhs.trunc90, 40
  %linear_index7 = or i32 %linear_index_base, 1
  %14 = and i32 %linear_index7, 29
  %linear_index8 = or i32 %linear_index_base, 2
  %15 = and i32 %linear_index8, 30
  %linear_index9 = or i32 %linear_index_base, 3
  %16 = and i32 %linear_index9, 31
  %17 = zext i8 %13 to i64
  %18 = zext i8 %12 to i64
  %19 = zext i32 %10 to i64
  %param_2.243 = getelementptr inbounds [5 x [5 x [1 x [32 x float]]]], [5 x [5 x [1 x [32 x float]]]] addrspace(1)* %7, i64 0, i64 %17, i64 %18, i64 0, i64 %19
  %param_2.24310 = load float, float addrspace(1)* %param_2.243, align 16, !invariant.load !66
  %param_1.216 = getelementptr inbounds [32 x [1 x [5 x [5 x float]]]], [32 x [1 x [5 x [5 x float]]]] addrspace(1)* %8, i64 0, i64 %19, i64 0, i64 %17, i64 %18
  %param_1.21611 = load float, float addrspace(1)* %param_1.216, align 4, !invariant.load !66
  %subtract.83 = fsub float %param_1.21611, %param_2.24310
  %param_0.129 = load float, float addrspace(1)* %arg4.5.typed, align 16, !invariant.load !66
  %subtract.82 = fsub float 1.000000e+00, %param_0.129
  %multiply.71 = fmul float %subtract.83, %subtract.82
  %add.52 = fadd float %param_2.24310, %multiply.71
  %param_6.118 = getelementptr inbounds [5 x [5 x [1 x [32 x float]]]], [5 x [5 x [1 x [32 x float]]]] addrspace(1)* %5, i64 0, i64 %17, i64 %18, i64 0, i64 %19
  %param_6.11812 = load float, float addrspace(1)* %param_6.118, align 16, !invariant.load !66
  %param_5.133 = load float, float addrspace(1)* %fusion.31.typed, align 64, !invariant.load !66
  %multiply.32.clone.1 = fmul float %param_5.133, %add.52
  %param_4.125 = getelementptr inbounds [5 x [5 x [1 x [32 x float]]]], [5 x [5 x [1 x [32 x float]]]] addrspace(1)* %6, i64 0, i64 %17, i64 %18, i64 0, i64 %19
  %param_4.12513 = load float, float addrspace(1)* %param_4.125, align 16, !invariant.load !66
  %multiply.63.clone.1 = fmul float %param_1.21611, %param_1.21611
  %subtract.71.clone.1 = fsub float %multiply.63.clone.1, %param_4.12513
  %param_3.154 = load float, float addrspace(1)* %arg5.6.typed, align 16, !invariant.load !66
  %subtract.70.clone.1 = fsub float 1.000000e+00, %param_3.154
  %multiply.62.clone.1 = fmul float %subtract.71.clone.1, %subtract.70.clone.1
  %add.45.clone.1 = fadd float %param_4.12513, %multiply.62.clone.1
  %20 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.45.clone.1) #0
  %add.25.clone.1 = fadd float %20, 0x3E7AD7F2A0000000
  %divide.9.clone.1 = fdiv float %multiply.32.clone.1, %add.25.clone.1
  %subtract.25.clone.1 = fsub float %param_6.11812, %divide.9.clone.1
  %21 = bitcast i8 addrspace(1)* %alloc2998 to float addrspace(1)*
  %22 = zext i32 %linear_index_base to i64
  %23 = getelementptr float, float addrspace(1)* %21, i64 %22
  %24 = bitcast i8 addrspace(1)* %alloc2896 to float addrspace(1)*
  %25 = getelementptr float, float addrspace(1)* %24, i64 %22
  %26 = bitcast i8 addrspace(1)* %alloc2794 to float addrspace(1)*
  %27 = getelementptr float, float addrspace(1)* %26, i64 %22
  %28 = zext i32 %14 to i64
  %param_2.24318 = getelementptr inbounds [5 x [5 x [1 x [32 x float]]]], [5 x [5 x [1 x [32 x float]]]] addrspace(1)* %7, i64 0, i64 %17, i64 %18, i64 0, i64 %28
  %param_2.24319 = load float, float addrspace(1)* %param_2.24318, align 4, !invariant.load !66
  %param_1.21620 = getelementptr inbounds [32 x [1 x [5 x [5 x float]]]], [32 x [1 x [5 x [5 x float]]]] addrspace(1)* %8, i64 0, i64 %28, i64 0, i64 %17, i64 %18
  %param_1.21621 = load float, float addrspace(1)* %param_1.21620, align 4, !invariant.load !66
  %subtract.8322 = fsub float %param_1.21621, %param_2.24319
  %multiply.7123 = fmul float %subtract.82, %subtract.8322
  %add.5224 = fadd float %param_2.24319, %multiply.7123
  %param_6.11825 = getelementptr inbounds [5 x [5 x [1 x [32 x float]]]], [5 x [5 x [1 x [32 x float]]]] addrspace(1)* %5, i64 0, i64 %17, i64 %18, i64 0, i64 %28
  %param_6.11826 = load float, float addrspace(1)* %param_6.11825, align 4, !invariant.load !66
  %multiply.32.clone.128 = fmul float %param_5.133, %add.5224
  %param_4.12529 = getelementptr inbounds [5 x [5 x [1 x [32 x float]]]], [5 x [5 x [1 x [32 x float]]]] addrspace(1)* %6, i64 0, i64 %17, i64 %18, i64 0, i64 %28
  %param_4.12530 = load float, float addrspace(1)* %param_4.12529, align 4, !invariant.load !66
  %multiply.63.clone.135 = fmul float %param_1.21621, %param_1.21621
  %subtract.71.clone.136 = fsub float %multiply.63.clone.135, %param_4.12530
  %multiply.62.clone.137 = fmul float %subtract.70.clone.1, %subtract.71.clone.136
  %add.45.clone.138 = fadd float %param_4.12530, %multiply.62.clone.137
  %29 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.45.clone.138) #0
  %add.25.clone.139 = fadd float %29, 0x3E7AD7F2A0000000
  %divide.9.clone.140 = fdiv float %multiply.32.clone.128, %add.25.clone.139
  %subtract.25.clone.141 = fsub float %param_6.11826, %divide.9.clone.140
  %30 = zext i32 %15 to i64
  %param_2.24342 = getelementptr inbounds [5 x [5 x [1 x [32 x float]]]], [5 x [5 x [1 x [32 x float]]]] addrspace(1)* %7, i64 0, i64 %17, i64 %18, i64 0, i64 %30
  %param_2.24343 = load float, float addrspace(1)* %param_2.24342, align 8, !invariant.load !66
  %param_1.21644 = getelementptr inbounds [32 x [1 x [5 x [5 x float]]]], [32 x [1 x [5 x [5 x float]]]] addrspace(1)* %8, i64 0, i64 %30, i64 0, i64 %17, i64 %18
  %param_1.21645 = load float, float addrspace(1)* %param_1.21644, align 4, !invariant.load !66
  %subtract.8346 = fsub float %param_1.21645, %param_2.24343
  %multiply.7147 = fmul float %subtract.82, %subtract.8346
  %add.5248 = fadd float %param_2.24343, %multiply.7147
  %param_6.11849 = getelementptr inbounds [5 x [5 x [1 x [32 x float]]]], [5 x [5 x [1 x [32 x float]]]] addrspace(1)* %5, i64 0, i64 %17, i64 %18, i64 0, i64 %30
  %param_6.11850 = load float, float addrspace(1)* %param_6.11849, align 8, !invariant.load !66
  %multiply.32.clone.152 = fmul float %param_5.133, %add.5248
  %param_4.12553 = getelementptr inbounds [5 x [5 x [1 x [32 x float]]]], [5 x [5 x [1 x [32 x float]]]] addrspace(1)* %6, i64 0, i64 %17, i64 %18, i64 0, i64 %30
  %param_4.12554 = load float, float addrspace(1)* %param_4.12553, align 8, !invariant.load !66
  %multiply.63.clone.159 = fmul float %param_1.21645, %param_1.21645
  %subtract.71.clone.160 = fsub float %multiply.63.clone.159, %param_4.12554
  %multiply.62.clone.161 = fmul float %subtract.70.clone.1, %subtract.71.clone.160
  %add.45.clone.162 = fadd float %param_4.12554, %multiply.62.clone.161
  %31 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.45.clone.162) #0
  %add.25.clone.163 = fadd float %31, 0x3E7AD7F2A0000000
  %divide.9.clone.164 = fdiv float %multiply.32.clone.152, %add.25.clone.163
  %subtract.25.clone.165 = fsub float %param_6.11850, %divide.9.clone.164
  %32 = zext i32 %16 to i64
  %param_2.24366 = getelementptr inbounds [5 x [5 x [1 x [32 x float]]]], [5 x [5 x [1 x [32 x float]]]] addrspace(1)* %7, i64 0, i64 %17, i64 %18, i64 0, i64 %32
  %param_2.24367 = load float, float addrspace(1)* %param_2.24366, align 4, !invariant.load !66
  %param_1.21668 = getelementptr inbounds [32 x [1 x [5 x [5 x float]]]], [32 x [1 x [5 x [5 x float]]]] addrspace(1)* %8, i64 0, i64 %32, i64 0, i64 %17, i64 %18
  %param_1.21669 = load float, float addrspace(1)* %param_1.21668, align 4, !invariant.load !66
  %subtract.8370 = fsub float %param_1.21669, %param_2.24367
  %multiply.7171 = fmul float %subtract.82, %subtract.8370
  %add.5272 = fadd float %param_2.24367, %multiply.7171
  %param_6.11873 = getelementptr inbounds [5 x [5 x [1 x [32 x float]]]], [5 x [5 x [1 x [32 x float]]]] addrspace(1)* %5, i64 0, i64 %17, i64 %18, i64 0, i64 %32
  %param_6.11874 = load float, float addrspace(1)* %param_6.11873, align 4, !invariant.load !66
  %multiply.32.clone.176 = fmul float %param_5.133, %add.5272
  %param_4.12577 = getelementptr inbounds [5 x [5 x [1 x [32 x float]]]], [5 x [5 x [1 x [32 x float]]]] addrspace(1)* %6, i64 0, i64 %17, i64 %18, i64 0, i64 %32
  %param_4.12578 = load float, float addrspace(1)* %param_4.12577, align 4, !invariant.load !66
  %multiply.63.clone.183 = fmul float %param_1.21669, %param_1.21669
  %subtract.71.clone.184 = fsub float %multiply.63.clone.183, %param_4.12578
  %multiply.62.clone.185 = fmul float %subtract.70.clone.1, %subtract.71.clone.184
  %add.45.clone.186 = fadd float %param_4.12578, %multiply.62.clone.185
  %33 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.45.clone.186) #0
  %add.25.clone.187 = fadd float %33, 0x3E7AD7F2A0000000
  %divide.9.clone.188 = fdiv float %multiply.32.clone.176, %add.25.clone.187
  %subtract.25.clone.189 = fsub float %param_6.11874, %divide.9.clone.188
  %34 = insertelement <4 x float> undef, float %add.52, i32 0
  %35 = insertelement <4 x float> %34, float %add.5224, i32 1
  %36 = insertelement <4 x float> %35, float %add.5248, i32 2
  %37 = insertelement <4 x float> %36, float %add.5272, i32 3
  %38 = bitcast float addrspace(1)* %23 to <4 x float> addrspace(1)*
  store <4 x float> %37, <4 x float> addrspace(1)* %38, align 16
  %39 = insertelement <4 x float> undef, float %subtract.25.clone.1, i32 0
  %40 = insertelement <4 x float> %39, float %subtract.25.clone.141, i32 1
  %41 = insertelement <4 x float> %40, float %subtract.25.clone.165, i32 2
  %42 = insertelement <4 x float> %41, float %subtract.25.clone.189, i32 3
  %43 = bitcast float addrspace(1)* %25 to <4 x float> addrspace(1)*
  store <4 x float> %42, <4 x float> addrspace(1)* %43, align 16
  %44 = insertelement <4 x float> undef, float %add.45.clone.1, i32 0
  %45 = insertelement <4 x float> %44, float %add.45.clone.138, i32 1
  %46 = insertelement <4 x float> %45, float %add.45.clone.162, i32 2
  %47 = insertelement <4 x float> %46, float %add.45.clone.186, i32 3
  %48 = bitcast float addrspace(1)* %27 to <4 x float> addrspace(1)*
  store <4 x float> %47, <4 x float> addrspace(1)* %48, align 16
  ret void

emit_mof_tuple-true:                              ; preds = %entry
  %49 = ptrtoint i8* %alloc29 to i64
  %50 = insertelement <2 x i64> undef, i64 %49, i32 0
  %51 = ptrtoint i8* %alloc28 to i64
  %52 = insertelement <2 x i64> %50, i64 %51, i32 1
  %sunkaddr = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf110, i64 1141056448
  %53 = bitcast i8 addrspace(1)* %sunkaddr to <2 x i64> addrspace(1)*
  store <2 x i64> %52, <2 x i64> addrspace(1)* %53, align 64
  %sunkaddr121 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf110, i64 1141056464
  %54 = bitcast i8 addrspace(1)* %sunkaddr121 to i8* addrspace(1)*
  store i8* %alloc27, i8* addrspace(1)* %54, align 16
  br label %emit_mof_tuple-after
}

; Function Attrs: nofree nounwind
define void @fusion_59(i8* noalias nocapture readonly align 64 dereferenceable(204800) %alloc13, i8* noalias nocapture readonly align 64 dereferenceable(204800) %alloc14, i8* noalias nocapture readonly align 64 dereferenceable(204800) %alloc15, i8* noalias nocapture align 64 dereferenceable(5120) %alloc19, i8* noalias nocapture align 64 dereferenceable(5120) %alloc20, i8* noalias nocapture align 64 dereferenceable(5120) %alloc21, i8* noalias nocapture readonly align 16 dereferenceable(5120) %alloc22, i8* noalias nocapture readonly align 16 dereferenceable(5120) %alloc23, i8* noalias nocapture readonly align 16 dereferenceable(5120) %alloc24, i8* noalias nocapture align 64 dereferenceable(256) %alloc45, i8* noalias nocapture align 64 dereferenceable(256) %alloc46, i8* noalias nocapture align 64 dereferenceable(256) %alloc47, i8* noalias nocapture readonly align 16 dereferenceable(256) %alloc48, i8* noalias nocapture readonly align 16 dereferenceable(256) %alloc49, i8* noalias nocapture readonly align 16 dereferenceable(256) %alloc50, i8* noalias nocapture align 64 dereferenceable(128) %alloc52, i8* noalias nocapture align 64 dereferenceable(128) %alloc53, i8* noalias nocapture align 64 dereferenceable(128) %alloc54, i8* noalias nocapture readonly align 16 dereferenceable(128) %alloc55, i8* noalias nocapture readonly align 16 dereferenceable(128) %alloc56, i8* noalias nocapture readonly align 16 dereferenceable(128) %alloc57, i8* noalias nocapture align 64 dereferenceable(40) %alloc60, i8* noalias nocapture align 64 dereferenceable(40) %alloc61, i8* noalias nocapture align 64 dereferenceable(40) %alloc62, i8* noalias nocapture readonly align 16 dereferenceable(40) %alloc63, i8* noalias nocapture readonly align 16 dereferenceable(40) %alloc64, i8* noalias nocapture readonly align 16 dereferenceable(40) %alloc65, i8* noalias readonly align 16 dereferenceable(4) %alloc84, i8* noalias readonly align 16 dereferenceable(4) %alloc86, i8* noalias nocapture readonly align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #3 {
entry:
  %temp_buf1403 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc861401 = addrspacecast i8* %alloc86 to i8 addrspace(1)*
  %alloc841399 = addrspacecast i8* %alloc84 to i8 addrspace(1)*
  %alloc651397 = addrspacecast i8* %alloc65 to i8 addrspace(1)*
  %alloc641395 = addrspacecast i8* %alloc64 to i8 addrspace(1)*
  %alloc631393 = addrspacecast i8* %alloc63 to i8 addrspace(1)*
  %alloc621391 = addrspacecast i8* %alloc62 to i8 addrspace(1)*
  %alloc611389 = addrspacecast i8* %alloc61 to i8 addrspace(1)*
  %alloc601387 = addrspacecast i8* %alloc60 to i8 addrspace(1)*
  %alloc571385 = addrspacecast i8* %alloc57 to i8 addrspace(1)*
  %alloc561383 = addrspacecast i8* %alloc56 to i8 addrspace(1)*
  %alloc551381 = addrspacecast i8* %alloc55 to i8 addrspace(1)*
  %alloc541379 = addrspacecast i8* %alloc54 to i8 addrspace(1)*
  %alloc531377 = addrspacecast i8* %alloc53 to i8 addrspace(1)*
  %alloc521375 = addrspacecast i8* %alloc52 to i8 addrspace(1)*
  %alloc501373 = addrspacecast i8* %alloc50 to i8 addrspace(1)*
  %alloc491371 = addrspacecast i8* %alloc49 to i8 addrspace(1)*
  %alloc481369 = addrspacecast i8* %alloc48 to i8 addrspace(1)*
  %alloc471367 = addrspacecast i8* %alloc47 to i8 addrspace(1)*
  %alloc461365 = addrspacecast i8* %alloc46 to i8 addrspace(1)*
  %alloc451363 = addrspacecast i8* %alloc45 to i8 addrspace(1)*
  %alloc241361 = addrspacecast i8* %alloc24 to i8 addrspace(1)*
  %alloc231359 = addrspacecast i8* %alloc23 to i8 addrspace(1)*
  %alloc221357 = addrspacecast i8* %alloc22 to i8 addrspace(1)*
  %alloc211355 = addrspacecast i8* %alloc21 to i8 addrspace(1)*
  %alloc201353 = addrspacecast i8* %alloc20 to i8 addrspace(1)*
  %alloc191351 = addrspacecast i8* %alloc19 to i8 addrspace(1)*
  %alloc151349 = addrspacecast i8* %alloc15 to i8 addrspace(1)*
  %alloc141347 = addrspacecast i8* %alloc14 to i8 addrspace(1)*
  %alloc131345 = addrspacecast i8* %alloc13 to i8 addrspace(1)*
  %get-tuple-element.116.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf1403, i64 1140850688
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !79
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !70
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = icmp ult i32 %linear_index, 1386
  br i1 %3, label %fusion.59.in_bounds-true, label %fusion.59.in_bounds-after

fusion.59.in_bounds-after:                        ; preds = %slice9-true, %slice6-true, %slice3-true, %slice2-after.thread, %entry
  ret void

fusion.59.in_bounds-true:                         ; preds = %entry
  %4 = icmp ult i32 %linear_index, 32
  br i1 %4, label %slice2-after.thread, label %concat_index_not_from_operand0

concat_index_not_from_operand0:                   ; preds = %fusion.59.in_bounds-true
  %5 = icmp ult i32 %linear_index, 96
  br i1 %5, label %slice3-true, label %concat_index_not_from_operand1

concat_index_not_from_operand1:                   ; preds = %concat_index_not_from_operand0
  %6 = icmp ult i32 %linear_index, 106
  br i1 %6, label %slice6-true, label %slice9-true

slice2-after.thread:                              ; preds = %fusion.59.in_bounds-true
  %7 = bitcast i8 addrspace(1)* %alloc861401 to float addrspace(1)*
  %8 = bitcast i8 addrspace(1)* %alloc571385 to [32 x float] addrspace(1)*
  %9 = bitcast i8 addrspace(1)* %alloc151349 to [32 x float] addrspace(1)*
  %10 = bitcast i8 addrspace(1)* %alloc841399 to float addrspace(1)*
  %11 = bitcast i8 addrspace(1)* %alloc561383 to [32 x float] addrspace(1)*
  %12 = bitcast i8 addrspace(1)* %alloc551381 to [32 x float] addrspace(1)*
  %13 = bitcast i8 addrspace(1)* %alloc521375 to [32 x float] addrspace(1)*
  %14 = bitcast i8 addrspace(1)* %alloc531377 to [32 x float] addrspace(1)*
  %15 = bitcast i8 addrspace(1)* %alloc541379 to [32 x float] addrspace(1)*
  %16 = zext i32 %linear_index to i64
  %param_0_0 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %12, i64 0, i64 %16
  %param_0_025 = load float, float addrspace(1)* %param_0_0, align 4, !invariant.load !66
  %param_0_2 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %11, i64 0, i64 %16
  %param_0_226 = load float, float addrspace(1)* %param_0_2, align 4, !invariant.load !66
  %param_0_4 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %9, i64 0, i64 %16
  %param_0_427 = load float, float addrspace(1)* %param_0_4, align 4, !invariant.load !66
  %subtract.116 = fsub float %param_0_427, %param_0_226
  %param_0_3 = load float, float addrspace(1)* %10, align 16, !invariant.load !66
  %subtract.117 = fsub float 1.000000e+00, %param_0_3
  %multiply.96 = fmul float %subtract.116, %subtract.117
  %add.71 = fadd float %param_0_226, %multiply.96
  %sunkaddr = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf1403, i64 1141055488
  %17 = bitcast i8 addrspace(1)* %sunkaddr to float addrspace(1)*
  %param_0_1 = load float, float addrspace(1)* %17, align 64, !invariant.load !66
  %multiply.97 = fmul float %param_0_1, %add.71
  %param_0_5 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %8, i64 0, i64 %16
  %param_0_530 = load float, float addrspace(1)* %param_0_5, align 4, !invariant.load !66
  %multiply.98 = fmul float %param_0_427, %param_0_427
  %subtract.118 = fsub float %multiply.98, %param_0_530
  %param_0_6 = load float, float addrspace(1)* %7, align 16, !invariant.load !66
  %subtract.119 = fsub float 1.000000e+00, %param_0_6
  %multiply.99 = fmul float %subtract.118, %subtract.119
  %add.72 = fadd float %param_0_530, %multiply.99
  %18 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.72) #0
  %add.73 = fadd float %18, 0x3E7AD7F2A0000000
  %divide.43 = fdiv float %multiply.97, %add.73
  %subtract.120 = fsub float %param_0_025, %divide.43
  %19 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %15, i64 0, i64 %16
  %20 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %14, i64 0, i64 %16
  %21 = getelementptr inbounds [32 x float], [32 x float] addrspace(1)* %13, i64 0, i64 %16
  store float %subtract.120, float addrspace(1)* %19, align 4
  store float %add.71, float addrspace(1)* %20, align 4
  store float %add.72, float addrspace(1)* %21, align 4
  br label %fusion.59.in_bounds-after

slice3-true:                                      ; preds = %concat_index_not_from_operand0
  %22 = bitcast i8 addrspace(1)* %alloc501373 to [64 x float] addrspace(1)*
  %23 = bitcast i8 addrspace(1)* %alloc131345 to [64 x float] addrspace(1)*
  %24 = bitcast i8 addrspace(1)* %alloc491371 to [64 x float] addrspace(1)*
  %25 = bitcast i8 addrspace(1)* %alloc481369 to [64 x float] addrspace(1)*
  %26 = bitcast i8 addrspace(1)* %alloc861401 to float addrspace(1)*
  %27 = bitcast i8 addrspace(1)* %alloc841399 to float addrspace(1)*
  %28 = bitcast i8 addrspace(1)* %alloc461365 to [64 x float] addrspace(1)*
  %29 = bitcast i8 addrspace(1)* %alloc471367 to [64 x float] addrspace(1)*
  %30 = bitcast i8 addrspace(1)* %alloc451363 to [64 x float] addrspace(1)*
  %31 = sext i32 %linear_index to i64
  %32 = getelementptr [64 x float], [64 x float] addrspace(1)* %25, i64 0, i64 %31
  %param_1_02241405 = getelementptr inbounds float, float addrspace(1)* %32, i64 -32
  %param_1_0225 = load float, float addrspace(1)* %param_1_02241405, align 4, !invariant.load !66
  %33 = getelementptr [64 x float], [64 x float] addrspace(1)* %24, i64 0, i64 %31
  %param_1_22261406 = getelementptr inbounds float, float addrspace(1)* %33, i64 -32
  %param_1_2227 = load float, float addrspace(1)* %param_1_22261406, align 4, !invariant.load !66
  %34 = getelementptr [64 x float], [64 x float] addrspace(1)* %23, i64 0, i64 %31
  %param_1_42281407 = getelementptr inbounds float, float addrspace(1)* %34, i64 -32
  %param_1_4229 = load float, float addrspace(1)* %param_1_42281407, align 4, !invariant.load !66
  %subtract.121232 = fsub float %param_1_4229, %param_1_2227
  %param_1_3233 = load float, float addrspace(1)* %27, align 16, !invariant.load !66
  %subtract.122234 = fsub float 1.000000e+00, %param_1_3233
  %multiply.100235 = fmul float %subtract.121232, %subtract.122234
  %add.74236 = fadd float %param_1_2227, %multiply.100235
  %sunkaddr1413 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf1403, i64 1141055488
  %35 = bitcast i8 addrspace(1)* %sunkaddr1413 to float addrspace(1)*
  %param_1_1237 = load float, float addrspace(1)* %35, align 64, !invariant.load !66
  %multiply.101238 = fmul float %param_1_1237, %add.74236
  %36 = getelementptr [64 x float], [64 x float] addrspace(1)* %22, i64 0, i64 %31
  %param_1_52391408 = getelementptr inbounds float, float addrspace(1)* %36, i64 -32
  %param_1_5240 = load float, float addrspace(1)* %param_1_52391408, align 4, !invariant.load !66
  %multiply.102245 = fmul float %param_1_4229, %param_1_4229
  %subtract.123248 = fsub float %multiply.102245, %param_1_5240
  %param_1_6249 = load float, float addrspace(1)* %26, align 16, !invariant.load !66
  %subtract.124250 = fsub float 1.000000e+00, %param_1_6249
  %multiply.103251 = fmul float %subtract.123248, %subtract.124250
  %add.75252 = fadd float %param_1_5240, %multiply.103251
  %37 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.75252) #0
  %add.76253 = fadd float %37, 0x3E7AD7F2A0000000
  %divide.44254 = fdiv float %multiply.101238, %add.76253
  %subtract.125255 = fsub float %param_1_0225, %divide.44254
  %38 = getelementptr [64 x float], [64 x float] addrspace(1)* %30, i64 0, i64 %31
  %39 = getelementptr inbounds float, float addrspace(1)* %38, i64 -32
  %40 = getelementptr [64 x float], [64 x float] addrspace(1)* %29, i64 0, i64 %31
  %41 = getelementptr inbounds float, float addrspace(1)* %40, i64 -32
  %42 = getelementptr [64 x float], [64 x float] addrspace(1)* %28, i64 0, i64 %31
  %43 = getelementptr inbounds float, float addrspace(1)* %42, i64 -32
  store float %subtract.125255, float addrspace(1)* %39, align 4
  store float %add.74236, float addrspace(1)* %41, align 4
  store float %add.75252, float addrspace(1)* %43, align 4
  br label %fusion.59.in_bounds-after

slice6-true:                                      ; preds = %concat_index_not_from_operand1
  %44 = bitcast i8 addrspace(1)* %alloc651397 to [10 x float] addrspace(1)*
  %45 = bitcast i8 addrspace(1)* %get-tuple-element.116.raw to [10 x float] addrspace(1)*
  %46 = bitcast i8 addrspace(1)* %alloc641395 to [10 x float] addrspace(1)*
  %47 = bitcast i8 addrspace(1)* %alloc631393 to [10 x float] addrspace(1)*
  %48 = bitcast i8 addrspace(1)* %alloc861401 to float addrspace(1)*
  %49 = bitcast i8 addrspace(1)* %alloc841399 to float addrspace(1)*
  %50 = bitcast i8 addrspace(1)* %alloc621391 to [10 x float] addrspace(1)*
  %51 = bitcast i8 addrspace(1)* %alloc611389 to [10 x float] addrspace(1)*
  %52 = bitcast i8 addrspace(1)* %alloc601387 to [10 x float] addrspace(1)*
  %53 = sext i32 %linear_index to i64
  %54 = getelementptr [10 x float], [10 x float] addrspace(1)* %47, i64 0, i64 %53
  %param_2_05121409 = getelementptr inbounds float, float addrspace(1)* %54, i64 -96
  %param_2_0513 = load float, float addrspace(1)* %param_2_05121409, align 4, !invariant.load !66
  %55 = getelementptr [10 x float], [10 x float] addrspace(1)* %46, i64 0, i64 %53
  %param_2_25141410 = getelementptr inbounds float, float addrspace(1)* %55, i64 -96
  %param_2_2515 = load float, float addrspace(1)* %param_2_25141410, align 4, !invariant.load !66
  %56 = getelementptr [10 x float], [10 x float] addrspace(1)* %45, i64 0, i64 %53
  %param_2_45161411 = getelementptr inbounds float, float addrspace(1)* %56, i64 -96
  %param_2_4517 = load float, float addrspace(1)* %param_2_45161411, align 4, !invariant.load !66
  %subtract.126520 = fsub float %param_2_4517, %param_2_2515
  %param_2_3521 = load float, float addrspace(1)* %49, align 16, !invariant.load !66
  %subtract.127522 = fsub float 1.000000e+00, %param_2_3521
  %multiply.104523 = fmul float %subtract.126520, %subtract.127522
  %add.77524 = fadd float %param_2_2515, %multiply.104523
  %sunkaddr1414 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf1403, i64 1141055488
  %57 = bitcast i8 addrspace(1)* %sunkaddr1414 to float addrspace(1)*
  %param_2_1525 = load float, float addrspace(1)* %57, align 64, !invariant.load !66
  %multiply.105526 = fmul float %param_2_1525, %add.77524
  %58 = getelementptr [10 x float], [10 x float] addrspace(1)* %44, i64 0, i64 %53
  %param_2_55271412 = getelementptr inbounds float, float addrspace(1)* %58, i64 -96
  %param_2_5528 = load float, float addrspace(1)* %param_2_55271412, align 4, !invariant.load !66
  %multiply.106533 = fmul float %param_2_4517, %param_2_4517
  %subtract.128536 = fsub float %multiply.106533, %param_2_5528
  %param_2_6537 = load float, float addrspace(1)* %48, align 16, !invariant.load !66
  %subtract.129538 = fsub float 1.000000e+00, %param_2_6537
  %multiply.107539 = fmul float %subtract.128536, %subtract.129538
  %add.79540 = fadd float %param_2_5528, %multiply.107539
  %59 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.79540) #0
  %add.80541 = fadd float %59, 0x3E7AD7F2A0000000
  %divide.45542 = fdiv float %multiply.105526, %add.80541
  %subtract.130543 = fsub float %param_2_0513, %divide.45542
  %60 = getelementptr [10 x float], [10 x float] addrspace(1)* %52, i64 0, i64 %53
  %61 = getelementptr inbounds float, float addrspace(1)* %60, i64 -96
  %62 = getelementptr [10 x float], [10 x float] addrspace(1)* %51, i64 0, i64 %53
  %63 = getelementptr inbounds float, float addrspace(1)* %62, i64 -96
  %64 = getelementptr [10 x float], [10 x float] addrspace(1)* %50, i64 0, i64 %53
  %65 = getelementptr inbounds float, float addrspace(1)* %64, i64 -96
  store float %subtract.130543, float addrspace(1)* %61, align 4
  store float %add.77524, float addrspace(1)* %63, align 4
  store float %add.79540, float addrspace(1)* %65, align 4
  br label %fusion.59.in_bounds-after

slice9-true:                                      ; preds = %concat_index_not_from_operand1
  %66 = bitcast i8 addrspace(1)* %alloc241361 to [128 x [10 x float]] addrspace(1)*
  %67 = bitcast i8 addrspace(1)* %alloc141347 to [128 x [10 x float]] addrspace(1)*
  %68 = bitcast i8 addrspace(1)* %alloc231359 to [128 x [10 x float]] addrspace(1)*
  %69 = bitcast i8 addrspace(1)* %alloc221357 to [128 x [10 x float]] addrspace(1)*
  %70 = bitcast i8 addrspace(1)* %alloc861401 to float addrspace(1)*
  %71 = bitcast i8 addrspace(1)* %alloc841399 to float addrspace(1)*
  %72 = bitcast i8 addrspace(1)* %alloc211355 to [1280 x float] addrspace(1)*
  %73 = bitcast i8 addrspace(1)* %alloc201353 to [1280 x float] addrspace(1)*
  %74 = bitcast i8 addrspace(1)* %alloc191351 to [1280 x float] addrspace(1)*
  %75 = add nsw i32 %linear_index, -106
  %.lhs.trunc1333 = trunc i32 %75 to i16
  %.lhs.trunc1333.frozen = freeze i16 %.lhs.trunc1333
  %76 = udiv i16 %.lhs.trunc1333.frozen, 10
  %77 = mul i16 %76, 10
  %.decomposed = sub i16 %.lhs.trunc1333.frozen, %77
  %78 = zext i16 %76 to i64
  %79 = zext i16 %.decomposed to i64
  %param_3_0800 = getelementptr inbounds [128 x [10 x float]], [128 x [10 x float]] addrspace(1)* %69, i64 0, i64 %78, i64 %79
  %param_3_0801 = load float, float addrspace(1)* %param_3_0800, align 4, !invariant.load !66
  %param_3_2802 = getelementptr inbounds [128 x [10 x float]], [128 x [10 x float]] addrspace(1)* %68, i64 0, i64 %78, i64 %79
  %param_3_2803 = load float, float addrspace(1)* %param_3_2802, align 4, !invariant.load !66
  %param_3_4804 = getelementptr inbounds [128 x [10 x float]], [128 x [10 x float]] addrspace(1)* %67, i64 0, i64 %78, i64 %79
  %param_3_4805 = load float, float addrspace(1)* %param_3_4804, align 4, !invariant.load !66
  %subtract.132808 = fsub float %param_3_4805, %param_3_2803
  %param_3_3809 = load float, float addrspace(1)* %71, align 16, !invariant.load !66
  %subtract.133810 = fsub float 1.000000e+00, %param_3_3809
  %multiply.108811 = fmul float %subtract.132808, %subtract.133810
  %add.81812 = fadd float %param_3_2803, %multiply.108811
  %sunkaddr1415 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf1403, i64 1141055488
  %80 = bitcast i8 addrspace(1)* %sunkaddr1415 to float addrspace(1)*
  %param_3_1813 = load float, float addrspace(1)* %80, align 64, !invariant.load !66
  %multiply.109814 = fmul float %param_3_1813, %add.81812
  %param_3_5815 = getelementptr inbounds [128 x [10 x float]], [128 x [10 x float]] addrspace(1)* %66, i64 0, i64 %78, i64 %79
  %param_3_5816 = load float, float addrspace(1)* %param_3_5815, align 4, !invariant.load !66
  %multiply.110821 = fmul float %param_3_4805, %param_3_4805
  %subtract.134824 = fsub float %multiply.110821, %param_3_5816
  %param_3_6825 = load float, float addrspace(1)* %70, align 16, !invariant.load !66
  %subtract.135826 = fsub float 1.000000e+00, %param_3_6825
  %multiply.111827 = fmul float %subtract.134824, %subtract.135826
  %add.82828 = fadd float %param_3_5816, %multiply.111827
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.82828) #0
  %add.83829 = fadd float %81, 0x3E7AD7F2A0000000
  %divide.46830 = fdiv float %multiply.109814, %add.83829
  %subtract.136831 = fsub float %param_3_0801, %divide.46830
  %82 = sext i32 %linear_index to i64
  %83 = getelementptr [1280 x float], [1280 x float] addrspace(1)* %74, i64 0, i64 %82
  %84 = getelementptr inbounds float, float addrspace(1)* %83, i64 -106
  %85 = getelementptr [1280 x float], [1280 x float] addrspace(1)* %73, i64 0, i64 %82
  %86 = getelementptr inbounds float, float addrspace(1)* %85, i64 -106
  %87 = getelementptr [1280 x float], [1280 x float] addrspace(1)* %72, i64 0, i64 %82
  %88 = getelementptr inbounds float, float addrspace(1)* %87, i64 -106
  store float %subtract.136831, float addrspace(1)* %84, align 4
  store float %add.81812, float addrspace(1)* %86, align 4
  store float %add.82828, float addrspace(1)* %88, align 4
  br label %fusion.59.in_bounds-after
}

; Function Attrs: nounwind
define void @fusion_53(i8* noalias align 64 dereferenceable(204800) %alloc13, i8* noalias align 64 dereferenceable(204800) %alloc14, i8* noalias align 64 dereferenceable(204800) %alloc15, i8* noalias nocapture readonly align 16 dereferenceable(204800) %alloc16, i8* noalias nocapture readonly align 16 dereferenceable(204800) %alloc17, i8* noalias nocapture readonly align 16 dereferenceable(204800) %alloc18, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc84, i8* noalias nocapture readonly align 16 dereferenceable(4) %alloc86, i8* noalias nocapture align 64 dereferenceable(1141056672) %temp_buf) local_unnamed_addr #0 {
entry:
  %temp_buf108 = addrspacecast i8* %temp_buf to i8 addrspace(1)*
  %alloc86106 = addrspacecast i8* %alloc86 to i8 addrspace(1)*
  %alloc84104 = addrspacecast i8* %alloc84 to i8 addrspace(1)*
  %alloc18102 = addrspacecast i8* %alloc18 to i8 addrspace(1)*
  %alloc17100 = addrspacecast i8* %alloc17 to i8 addrspace(1)*
  %alloc1698 = addrspacecast i8* %alloc16 to i8 addrspace(1)*
  %alloc1596 = addrspacecast i8* %alloc15 to i8 addrspace(1)*
  %alloc1494 = addrspacecast i8* %alloc14 to i8 addrspace(1)*
  %alloc1392 = addrspacecast i8* %alloc13 to i8 addrspace(1)*
  %get-tuple-element.75.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf108, i64 1140850688
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !76
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !70
  %2 = or i32 %1, %0
  %3 = icmp eq i32 %2, 0
  %4 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf108, i64 1141056392
  br i1 %3, label %emit_mof_tuple-true, label %emit_mof_tuple-after

emit_mof_tuple-after:                             ; preds = %emit_mof_tuple-true, %entry
  %5 = bitcast i8 addrspace(1)* %alloc1698 to [5 x [5 x [32 x [64 x float]]]] addrspace(1)*
  %6 = bitcast i8 addrspace(1)* %alloc18102 to [5 x [5 x [32 x [64 x float]]]] addrspace(1)*
  %7 = bitcast i8 addrspace(1)* %alloc17100 to [5 x [5 x [32 x [64 x float]]]] addrspace(1)*
  %8 = bitcast i8 addrspace(1)* %get-tuple-element.75.raw to [64 x [32 x [5 x [5 x float]]]] addrspace(1)*
  %fusion.31.raw = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf108, i64 1141055488
  %fusion.31.typed = bitcast i8 addrspace(1)* %fusion.31.raw to float addrspace(1)*
  %arg5.6.typed = bitcast i8 addrspace(1)* %alloc86106 to float addrspace(1)*
  %arg4.5.typed = bitcast i8 addrspace(1)* %alloc84104 to float addrspace(1)*
  %9 = shl nuw nsw i32 %0, 8
  %linear_index = add nuw nsw i32 %9, %1
  %linear_index_base = shl nuw nsw i32 %linear_index, 2
  %10 = and i32 %linear_index_base, 60
  %11 = lshr i32 %linear_index, 4
  %12 = and i32 %11, 31
  %13 = lshr i32 %linear_index, 9
  %.lhs.trunc = trunc i32 %13 to i8
  %14 = urem i8 %.lhs.trunc, 5
  %.lhs.trunc90 = trunc i32 %linear_index to i16
  %15 = udiv i16 %.lhs.trunc90, 2560
  %linear_index7 = or i32 %linear_index_base, 1
  %16 = and i32 %linear_index7, 61
  %linear_index8 = or i32 %linear_index_base, 2
  %17 = and i32 %linear_index8, 62
  %linear_index9 = or i32 %linear_index_base, 3
  %18 = and i32 %linear_index9, 63
  %19 = zext i16 %15 to i64
  %20 = zext i8 %14 to i64
  %21 = zext i32 %12 to i64
  %22 = zext i32 %10 to i64
  %param_2.262 = getelementptr inbounds [5 x [5 x [32 x [64 x float]]]], [5 x [5 x [32 x [64 x float]]]] addrspace(1)* %7, i64 0, i64 %19, i64 %20, i64 %21, i64 %22
  %param_2.26210 = load float, float addrspace(1)* %param_2.262, align 16, !invariant.load !66
  %param_1.230 = getelementptr inbounds [64 x [32 x [5 x [5 x float]]]], [64 x [32 x [5 x [5 x float]]]] addrspace(1)* %8, i64 0, i64 %22, i64 %21, i64 %19, i64 %20
  %param_1.23011 = load float, float addrspace(1)* %param_1.230, align 4, !invariant.load !66
  %subtract.99 = fsub float %param_1.23011, %param_2.26210
  %param_0.141 = load float, float addrspace(1)* %arg4.5.typed, align 16, !invariant.load !66
  %subtract.98 = fsub float 1.000000e+00, %param_0.141
  %multiply.83 = fmul float %subtract.99, %subtract.98
  %add.61 = fadd float %param_2.26210, %multiply.83
  %param_6.105 = getelementptr inbounds [5 x [5 x [32 x [64 x float]]]], [5 x [5 x [32 x [64 x float]]]] addrspace(1)* %5, i64 0, i64 %19, i64 %20, i64 %21, i64 %22
  %param_6.10512 = load float, float addrspace(1)* %param_6.105, align 16, !invariant.load !66
  %param_5.120 = load float, float addrspace(1)* %fusion.31.typed, align 64, !invariant.load !66
  %multiply.24.clone.1 = fmul float %param_5.120, %add.61
  %param_4.117 = getelementptr inbounds [5 x [5 x [32 x [64 x float]]]], [5 x [5 x [32 x [64 x float]]]] addrspace(1)* %6, i64 0, i64 %19, i64 %20, i64 %21, i64 %22
  %param_4.11713 = load float, float addrspace(1)* %param_4.117, align 16, !invariant.load !66
  %multiply.75.clone.1 = fmul float %param_1.23011, %param_1.23011
  %subtract.87.clone.1 = fsub float %multiply.75.clone.1, %param_4.11713
  %param_3.149 = load float, float addrspace(1)* %arg5.6.typed, align 16, !invariant.load !66
  %subtract.86.clone.1 = fsub float 1.000000e+00, %param_3.149
  %multiply.74.clone.1 = fmul float %subtract.87.clone.1, %subtract.86.clone.1
  %add.54.clone.1 = fadd float %param_4.11713, %multiply.74.clone.1
  %23 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.54.clone.1) #0
  %add.19.clone.1 = fadd float %23, 0x3E7AD7F2A0000000
  %divide.7.clone.1 = fdiv float %multiply.24.clone.1, %add.19.clone.1
  %subtract.19.clone.1 = fsub float %param_6.10512, %divide.7.clone.1
  %24 = bitcast i8 addrspace(1)* %alloc1392 to float addrspace(1)*
  %25 = zext i32 %linear_index_base to i64
  %26 = getelementptr float, float addrspace(1)* %24, i64 %25
  %27 = bitcast i8 addrspace(1)* %alloc1494 to float addrspace(1)*
  %28 = getelementptr float, float addrspace(1)* %27, i64 %25
  %29 = bitcast i8 addrspace(1)* %alloc1596 to float addrspace(1)*
  %30 = getelementptr float, float addrspace(1)* %29, i64 %25
  %31 = zext i32 %16 to i64
  %param_2.26218 = getelementptr inbounds [5 x [5 x [32 x [64 x float]]]], [5 x [5 x [32 x [64 x float]]]] addrspace(1)* %7, i64 0, i64 %19, i64 %20, i64 %21, i64 %31
  %param_2.26219 = load float, float addrspace(1)* %param_2.26218, align 4, !invariant.load !66
  %param_1.23020 = getelementptr inbounds [64 x [32 x [5 x [5 x float]]]], [64 x [32 x [5 x [5 x float]]]] addrspace(1)* %8, i64 0, i64 %31, i64 %21, i64 %19, i64 %20
  %param_1.23021 = load float, float addrspace(1)* %param_1.23020, align 4, !invariant.load !66
  %subtract.9922 = fsub float %param_1.23021, %param_2.26219
  %multiply.8323 = fmul float %subtract.98, %subtract.9922
  %add.6124 = fadd float %param_2.26219, %multiply.8323
  %param_6.10525 = getelementptr inbounds [5 x [5 x [32 x [64 x float]]]], [5 x [5 x [32 x [64 x float]]]] addrspace(1)* %5, i64 0, i64 %19, i64 %20, i64 %21, i64 %31
  %param_6.10526 = load float, float addrspace(1)* %param_6.10525, align 4, !invariant.load !66
  %multiply.24.clone.128 = fmul float %param_5.120, %add.6124
  %param_4.11729 = getelementptr inbounds [5 x [5 x [32 x [64 x float]]]], [5 x [5 x [32 x [64 x float]]]] addrspace(1)* %6, i64 0, i64 %19, i64 %20, i64 %21, i64 %31
  %param_4.11730 = load float, float addrspace(1)* %param_4.11729, align 4, !invariant.load !66
  %multiply.75.clone.135 = fmul float %param_1.23021, %param_1.23021
  %subtract.87.clone.136 = fsub float %multiply.75.clone.135, %param_4.11730
  %multiply.74.clone.137 = fmul float %subtract.86.clone.1, %subtract.87.clone.136
  %add.54.clone.138 = fadd float %param_4.11730, %multiply.74.clone.137
  %32 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.54.clone.138) #0
  %add.19.clone.139 = fadd float %32, 0x3E7AD7F2A0000000
  %divide.7.clone.140 = fdiv float %multiply.24.clone.128, %add.19.clone.139
  %subtract.19.clone.141 = fsub float %param_6.10526, %divide.7.clone.140
  %33 = zext i32 %17 to i64
  %param_2.26242 = getelementptr inbounds [5 x [5 x [32 x [64 x float]]]], [5 x [5 x [32 x [64 x float]]]] addrspace(1)* %7, i64 0, i64 %19, i64 %20, i64 %21, i64 %33
  %param_2.26243 = load float, float addrspace(1)* %param_2.26242, align 8, !invariant.load !66
  %param_1.23044 = getelementptr inbounds [64 x [32 x [5 x [5 x float]]]], [64 x [32 x [5 x [5 x float]]]] addrspace(1)* %8, i64 0, i64 %33, i64 %21, i64 %19, i64 %20
  %param_1.23045 = load float, float addrspace(1)* %param_1.23044, align 4, !invariant.load !66
  %subtract.9946 = fsub float %param_1.23045, %param_2.26243
  %multiply.8347 = fmul float %subtract.98, %subtract.9946
  %add.6148 = fadd float %param_2.26243, %multiply.8347
  %param_6.10549 = getelementptr inbounds [5 x [5 x [32 x [64 x float]]]], [5 x [5 x [32 x [64 x float]]]] addrspace(1)* %5, i64 0, i64 %19, i64 %20, i64 %21, i64 %33
  %param_6.10550 = load float, float addrspace(1)* %param_6.10549, align 8, !invariant.load !66
  %multiply.24.clone.152 = fmul float %param_5.120, %add.6148
  %param_4.11753 = getelementptr inbounds [5 x [5 x [32 x [64 x float]]]], [5 x [5 x [32 x [64 x float]]]] addrspace(1)* %6, i64 0, i64 %19, i64 %20, i64 %21, i64 %33
  %param_4.11754 = load float, float addrspace(1)* %param_4.11753, align 8, !invariant.load !66
  %multiply.75.clone.159 = fmul float %param_1.23045, %param_1.23045
  %subtract.87.clone.160 = fsub float %multiply.75.clone.159, %param_4.11754
  %multiply.74.clone.161 = fmul float %subtract.86.clone.1, %subtract.87.clone.160
  %add.54.clone.162 = fadd float %param_4.11754, %multiply.74.clone.161
  %34 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.54.clone.162) #0
  %add.19.clone.163 = fadd float %34, 0x3E7AD7F2A0000000
  %divide.7.clone.164 = fdiv float %multiply.24.clone.152, %add.19.clone.163
  %subtract.19.clone.165 = fsub float %param_6.10550, %divide.7.clone.164
  %35 = zext i32 %18 to i64
  %param_2.26266 = getelementptr inbounds [5 x [5 x [32 x [64 x float]]]], [5 x [5 x [32 x [64 x float]]]] addrspace(1)* %7, i64 0, i64 %19, i64 %20, i64 %21, i64 %35
  %param_2.26267 = load float, float addrspace(1)* %param_2.26266, align 4, !invariant.load !66
  %param_1.23068 = getelementptr inbounds [64 x [32 x [5 x [5 x float]]]], [64 x [32 x [5 x [5 x float]]]] addrspace(1)* %8, i64 0, i64 %35, i64 %21, i64 %19, i64 %20
  %param_1.23069 = load float, float addrspace(1)* %param_1.23068, align 4, !invariant.load !66
  %subtract.9970 = fsub float %param_1.23069, %param_2.26267
  %multiply.8371 = fmul float %subtract.98, %subtract.9970
  %add.6172 = fadd float %param_2.26267, %multiply.8371
  %param_6.10573 = getelementptr inbounds [5 x [5 x [32 x [64 x float]]]], [5 x [5 x [32 x [64 x float]]]] addrspace(1)* %5, i64 0, i64 %19, i64 %20, i64 %21, i64 %35
  %param_6.10574 = load float, float addrspace(1)* %param_6.10573, align 4, !invariant.load !66
  %multiply.24.clone.176 = fmul float %param_5.120, %add.6172
  %param_4.11777 = getelementptr inbounds [5 x [5 x [32 x [64 x float]]]], [5 x [5 x [32 x [64 x float]]]] addrspace(1)* %6, i64 0, i64 %19, i64 %20, i64 %21, i64 %35
  %param_4.11778 = load float, float addrspace(1)* %param_4.11777, align 4, !invariant.load !66
  %multiply.75.clone.183 = fmul float %param_1.23069, %param_1.23069
  %subtract.87.clone.184 = fsub float %multiply.75.clone.183, %param_4.11778
  %multiply.74.clone.185 = fmul float %subtract.86.clone.1, %subtract.87.clone.184
  %add.54.clone.186 = fadd float %param_4.11778, %multiply.74.clone.185
  %36 = tail call float @llvm.nvvm.sqrt.approx.f(float %add.54.clone.186) #0
  %add.19.clone.187 = fadd float %36, 0x3E7AD7F2A0000000
  %divide.7.clone.188 = fdiv float %multiply.24.clone.176, %add.19.clone.187
  %subtract.19.clone.189 = fsub float %param_6.10574, %divide.7.clone.188
  %37 = insertelement <4 x float> undef, float %add.61, i32 0
  %38 = insertelement <4 x float> %37, float %add.6124, i32 1
  %39 = insertelement <4 x float> %38, float %add.6148, i32 2
  %40 = insertelement <4 x float> %39, float %add.6172, i32 3
  %41 = bitcast float addrspace(1)* %26 to <4 x float> addrspace(1)*
  store <4 x float> %40, <4 x float> addrspace(1)* %41, align 16
  %42 = insertelement <4 x float> undef, float %subtract.19.clone.1, i32 0
  %43 = insertelement <4 x float> %42, float %subtract.19.clone.141, i32 1
  %44 = insertelement <4 x float> %43, float %subtract.19.clone.165, i32 2
  %45 = insertelement <4 x float> %44, float %subtract.19.clone.189, i32 3
  %46 = bitcast float addrspace(1)* %28 to <4 x float> addrspace(1)*
  store <4 x float> %45, <4 x float> addrspace(1)* %46, align 16
  %47 = insertelement <4 x float> undef, float %add.54.clone.1, i32 0
  %48 = insertelement <4 x float> %47, float %add.54.clone.138, i32 1
  %49 = insertelement <4 x float> %48, float %add.54.clone.162, i32 2
  %50 = insertelement <4 x float> %49, float %add.54.clone.186, i32 3
  %51 = bitcast float addrspace(1)* %30 to <4 x float> addrspace(1)*
  store <4 x float> %50, <4 x float> addrspace(1)* %51, align 16
  ret void

emit_mof_tuple-true:                              ; preds = %entry
  %52 = ptrtoint i8* %alloc13 to i64
  %53 = insertelement <2 x i64> undef, i64 %52, i32 0
  %54 = ptrtoint i8* %alloc14 to i64
  %55 = insertelement <2 x i64> %53, i64 %54, i32 1
  %sunkaddr = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf108, i64 1141056384
  %56 = bitcast i8 addrspace(1)* %sunkaddr to <2 x i64> addrspace(1)*
  store <2 x i64> %55, <2 x i64> addrspace(1)* %56, align 64
  %sunkaddr119 = getelementptr inbounds i8, i8 addrspace(1)* %temp_buf108, i64 1141056400
  %57 = bitcast i8 addrspace(1)* %sunkaddr119 to i8* addrspace(1)*
  store i8* %alloc15, i8* addrspace(1)* %57, align 16
  br label %emit_mof_tuple-after
}

; Function Attrs: nounwind readnone
declare float @llvm.nvvm.sqrt.approx.f(float) #1

; Function Attrs: nounwind readnone
declare float @llvm.nvvm.saturate.f(float) #1

; Function Attrs: nounwind readnone
declare float @llvm.nvvm.fma.rm.f(float, float, float) #1

; Function Attrs: nounwind readnone
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.fma.f32(float, float, float) #4

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.trunc.f32(float) #4

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #4

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind willreturn }
attributes #3 = { nofree nounwind }
attributes #4 = { nounwind readnone speculatable willreturn }
attributes #5 = { convergent nounwind }
attributes #6 = { convergent inaccessiblememonly nounwind }

!nvvm.annotations = !{!0, !1, !2, !3, !4, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63}
!llvm.ident = !{!64}
!llvm.module.flags = !{!65}

!0 = !{void (i8*, i8*, i8*, i8*, i8*)* @fusion_31, !"kernel", i32 1}
!1 = !{void (i8*, i8*, i8*, i8*, i8*)* @fusion_31, !"reqntidx", i32 1}
!2 = !{void (i8*, i8*, i8*)* @copy_32, !"kernel", i32 1}
!3 = !{void (i8*, i8*, i8*)* @copy_32, !"reqntidx", i32 200}
!4 = !{void (i8*, i8*, i8*)* @broadcast_84, !"kernel", i32 1}
!5 = !{void (i8*, i8*, i8*)* @broadcast_84, !"reqntidx", i32 1024}
!6 = !{void (i8*, i8*, i8*)* @copy_33, !"kernel", i32 1}
!7 = !{void (i8*, i8*, i8*)* @copy_33, !"reqntidx", i32 256}
!8 = !{void (i8*, i8*, i8*)* @broadcast_77, !"kernel", i32 1}
!9 = !{void (i8*, i8*, i8*)* @broadcast_77, !"reqntidx", i32 1024}
!10 = !{void (i8*, i8*)* @copy_34, !"kernel", i32 1}
!11 = !{void (i8*, i8*)* @copy_34, !"reqntidx", i32 256}
!12 = !{void (i8*)* @reduce_window_66, !"kernel", i32 1}
!13 = !{void (i8*)* @reduce_window_66, !"reqntidx", i32 1024}
!14 = !{void (i8*)* @fusion_45, !"kernel", i32 1}
!15 = !{void (i8*)* @fusion_45, !"reqntidx", i32 256}
!16 = !{void (i8*, i8*, i8*)* @fusion_48, !"kernel", i32 1}
!17 = !{void (i8*, i8*, i8*)* @fusion_48, !"reqntidx", i32 256}
!18 = !{void (i8*, i8*, i8*)* @reduce, !"kernel", i32 1}
!19 = !{void (i8*, i8*, i8*)* @reduce, !"reqntidx", i32 256}
!20 = !{void (i8*, i8*, i8*)* @fusion_44, !"kernel", i32 1}
!21 = !{void (i8*, i8*, i8*)* @fusion_44, !"reqntidx", i32 256}
!22 = !{void (i8*, i8*, i8*)* @reduce_1, !"kernel", i32 1}
!23 = !{void (i8*, i8*, i8*)* @reduce_1, !"reqntidx", i32 256}
!24 = !{void (i8*, i8*, i8*, i8*)* @fusion_47, !"kernel", i32 1}
!25 = !{void (i8*, i8*, i8*, i8*)* @fusion_47, !"reqntidx", i32 256}
!26 = !{void (i8*, i8*, i8*)* @reduce_129, !"kernel", i32 1}
!27 = !{void (i8*, i8*, i8*)* @reduce_129, !"reqntidx", i32 256}
!28 = !{void (i8*, i8*, i8*, i8*)* @fusion_49, !"kernel", i32 1}
!29 = !{void (i8*, i8*, i8*, i8*)* @fusion_49, !"reqntidx", i32 256}
!30 = !{void (i8*, i8*, i8*, i8*)* @fusion_58, !"kernel", i32 1}
!31 = !{void (i8*, i8*, i8*, i8*)* @fusion_58, !"reqntidx", i32 256}
!32 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_57, !"kernel", i32 1}
!33 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_57, !"reqntidx", i32 1024}
!34 = !{void (i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_41, !"kernel", i32 1}
!35 = !{void (i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_41, !"reqntidx", i32 256}
!36 = !{void (i8*, i8*, i8*, i8*, i8*)* @fusion_56, !"kernel", i32 1}
!37 = !{void (i8*, i8*, i8*, i8*, i8*)* @fusion_56, !"reqntidx", i32 1024}
!38 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_6, !"kernel", i32 1}
!39 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_6, !"reqntidx", i32 256}
!40 = !{void (i8*)* @fusion_36, !"kernel", i32 1}
!41 = !{void (i8*)* @fusion_36, !"reqntidx", i32 256}
!42 = !{void (i8*, i8*)* @fusion_18, !"kernel", i32 1}
!43 = !{void (i8*, i8*)* @fusion_18, !"reqntidx", i32 32}
!44 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_15, !"kernel", i32 1}
!45 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_15, !"reqntidx", i32 32}
!46 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_55, !"kernel", i32 1}
!47 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_55, !"reqntidx", i32 256}
!48 = !{void (i8*)* @select_and_scatter_337, !"kernel", i32 1}
!49 = !{void (i8*)* @select_and_scatter_337, !"reqntidx", i32 1024}
!50 = !{void (i8*)* @fusion_35, !"kernel", i32 1}
!51 = !{void (i8*)* @fusion_35, !"reqntidx", i32 128}
!52 = !{void (i8*, i8*)* @fusion_25, !"kernel", i32 1}
!53 = !{void (i8*, i8*)* @fusion_25, !"reqntidx", i32 64}
!54 = !{void (i8*)* @fusion_34, !"kernel", i32 1}
!55 = !{void (i8*)* @fusion_34, !"reqntidx", i32 128}
!56 = !{void (i8*, i8*)* @fusion_33, !"kernel", i32 1}
!57 = !{void (i8*, i8*)* @fusion_33, !"reqntidx", i32 96}
!58 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_51, !"kernel", i32 1}
!59 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_51, !"reqntidx", i32 200}
!60 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_59, !"kernel", i32 1}
!61 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_59, !"reqntidx", i32 1024}
!62 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_53, !"kernel", i32 1}
!63 = !{void (i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*)* @fusion_53, !"reqntidx", i32 256}
!64 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!65 = !{i32 4, !"nvvm-reflect-ftz", i32 0}
!66 = !{}
!67 = !{i32 17700}
!68 = !{i32 0, i32 200}
!69 = !{i32 0, i32 10}
!70 = !{i32 0, i32 1024}
!71 = !{i32 0, i32 50}
!72 = !{i32 0, i32 256}
!73 = !{i32 0, i32 128}
!74 = !{i32 0, i32 6400}
!75 = !{i32 0, i32 4608}
!76 = !{i32 0, i32 2147483647}
!77 = distinct !{!77, !78}
!78 = !{!"llvm.loop.vectorize.enable", i1 false}
!79 = !{i32 0, i32 2}
!80 = distinct !{!80, !78}
!81 = !{i32 0, i32 32}
!82 = !{i32 0, i32 16384}
!83 = !{i32 0, i32 864}
!84 = distinct !{!84, !78}
!85 = !{i32 0, i32 64}
!86 = !{i32 0, i32 8192}
!87 = distinct !{!87, !78}
!88 = !{i32 0, i32 96}
!89 = !{i32 0, i32 4096}
